var data = {lines:[
{"lineNum":"    1","line":"/// jstring.zig"},
{"lineNum":"    2","line":"///"},
{"lineNum":"    3","line":"/// Author: Yu Li (liyu1981@gmail.com)"},
{"lineNum":"    4","line":"///"},
{"lineNum":"    5","line":"/// Target: create a reusable string lib for myself with all familiar methods methods can find in javascript string."},
{"lineNum":"    6","line":"///"},
{"lineNum":"    7","line":"/// Reason:"},
{"lineNum":"    8","line":"///   1. string is important we all know, so a good string lib will be very useful."},
{"lineNum":"    9","line":"///   2. javascript string is (in my opinion) the most battle tested string library out there, strike a good balance"},
{"lineNum":"   10","line":"///      between features and complexity."},
{"lineNum":"   11","line":"///"},
{"lineNum":"   12","line":"/// The javascript string specs and methods this file use as reference can be found at"},
{"lineNum":"   13","line":"///   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"},
{"lineNum":"   14","line":"///"},
{"lineNum":"   15","line":"/// All methods except those marked as deprecated (such as anchor, big, blink etc) are implemented, in zig way."},
{"lineNum":"   16","line":"const enable_arena_allocator: bool = true;"},
{"lineNum":"   17","line":"const enable_pcre: bool = true;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"const std = @import(\"std\");"},
{"lineNum":"   20","line":"const testing = std.testing;"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"const pcre = if (enable_pcre) @import(\"pcre_binding.zig\") else undefined;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"pub const JStringError = error{"},
{"lineNum":"   25","line":"    RegexFetchBeforeMatch,"},
{"lineNum":"   26","line":"    RegexBadPattern,"},
{"lineNum":"   27","line":"    RegexMatchFailed,"},
{"lineNum":"   28","line":"    // Usually reported when use with splitByRegex/replaceByRegex, indicating that the pattern used will result in"},
{"lineNum":"   29","line":"    // overlapped matches so that we can determinstically know how to split/replace. The possible reason is the pattern"},
{"lineNum":"   30","line":"    // is using named group. Or you can debug your regex with `RegexUnmanaged.matchAll` or use https://regex101.com/"},
{"lineNum":"   31","line":"    RegexMatchOverlapped,"},
{"lineNum":"   32","line":"};"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"pub const ArenaAllocator = defineArenaAllocator(enable_arena_allocator);"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"// managed versions"},
{"lineNum":"   37","line":"//   just very thin wrap around unmanaged versions, where has all real implemenats"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"pub const Regex = defineRegex(enable_pcre);"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"pub const JString = struct {"},
{"lineNum":"   42","line":"    allocator: std.mem.Allocator,"},
{"lineNum":"   43","line":"    unmanaged: JStringUnmanaged,"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    pub const U8Iterator = JStringUnmanaged.U8Iterator;"},
{"lineNum":"   46","line":"    pub const U8ReverseIterator = JStringUnmanaged.U8ReverseIterator;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    pub fn deinit(this: *JString) void {","class":"lineCov","hits":"1","order":"1709","possible_hits":"1",},
{"lineNum":"   49","line":"        this.unmanaged.deinit(this.allocator);","class":"lineCov","hits":"1","order":"1710","possible_hits":"1",},
{"lineNum":"   50","line":"    }"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    pub inline fn newEmpty(allocator: std.mem.Allocator) anyerror!JString {"},
{"lineNum":"   53","line":"        return JString{","class":"lineCov","hits":"2","order":"1736","possible_hits":"2",},
{"lineNum":"   54","line":"            .allocator = allocator,"},
{"lineNum":"   55","line":"            .unmanaged = try JStringUnmanaged.newEmpty(allocator),","class":"linePartCov","hits":"1","order":"1735","possible_hits":"2",},
{"lineNum":"   56","line":"        };"},
{"lineNum":"   57","line":"    }"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    pub fn newFromSlice(allocator: std.mem.Allocator, string_slice: []const u8) anyerror!JString {","class":"lineCov","hits":"1","order":"1696","possible_hits":"1",},
{"lineNum":"   60","line":"        return JString{","class":"lineCov","hits":"1","order":"1698","possible_hits":"1",},
{"lineNum":"   61","line":"            .allocator = allocator,"},
{"lineNum":"   62","line":"            .unmanaged = try JStringUnmanaged.newFromSlice(allocator, string_slice),","class":"lineCov","hits":"1","order":"1697","possible_hits":"1",},
{"lineNum":"   63","line":"        };"},
{"lineNum":"   64","line":"    }"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    pub fn newFromJString(that: JString) anyerror!JString {","class":"lineCov","hits":"2","order":"1773","possible_hits":"2",},
{"lineNum":"   67","line":"        return JString{","class":"lineCov","hits":"1","order":"1776","possible_hits":"1",},
{"lineNum":"   68","line":"            .allocator = that.allocator,","class":"linePartCov","hits":"4","order":"1774","possible_hits":"5",},
{"lineNum":"   69","line":"            .unmanaged = try JStringUnmanaged.newFromJStringUnmanaged(that.allocator, that.unmanaged),","class":"linePartCov","hits":"4","order":"1775","possible_hits":"5",},
{"lineNum":"   70","line":"        };"},
{"lineNum":"   71","line":"    }"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    pub fn newFromFormat(allocator: std.mem.Allocator, comptime fmt: []const u8, args: anytype) anyerror!JString {","class":"lineCov","hits":"2","order":"1779","possible_hits":"2",},
{"lineNum":"   74","line":"        return JString{","class":"lineCov","hits":"1","order":"1782","possible_hits":"1",},
{"lineNum":"   75","line":"            .allocator = allocator,"},
{"lineNum":"   76","line":"            .unmanaged = try JStringUnmanaged.newFromFormat(allocator, fmt, args),","class":"lineCov","hits":"1","order":"1780","possible_hits":"1",},
{"lineNum":"   77","line":"        };"},
{"lineNum":"   78","line":"    }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    pub fn newFromTuple(allocator: std.mem.Allocator, rest_items: anytype) anyerror!JString {","class":"lineCov","hits":"2","order":"1785","possible_hits":"2",},
{"lineNum":"   81","line":"        return JString{","class":"lineCov","hits":"1","order":"1787","possible_hits":"1",},
{"lineNum":"   82","line":"            .allocator = allocator,"},
{"lineNum":"   83","line":"            .unmanaged = try JStringUnmanaged.newFromTuple(allocator, rest_items),","class":"lineCov","hits":"1","order":"1786","possible_hits":"1",},
{"lineNum":"   84","line":"        };"},
{"lineNum":"   85","line":"    }"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    pub inline fn newFromNumber(allocator: std.mem.Allocator, comptime T: type, value: T) anyerror!JString {"},
{"lineNum":"   88","line":"        return JString{","class":"lineCov","hits":"2","order":"1791","possible_hits":"2",},
{"lineNum":"   89","line":"            .allocator = allocator,"},
{"lineNum":"   90","line":"            .unmanaged = try JStringUnmanaged.newFromNumber(allocator, T, value),","class":"linePartCov","hits":"1","order":"1790","possible_hits":"2",},
{"lineNum":"   91","line":"        };"},
{"lineNum":"   92","line":"    }"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    pub inline fn newFromStringify(allocator: std.mem.Allocator, value: anytype) anyerror!JString {"},
{"lineNum":"   95","line":"        return JString{","class":"lineCov","hits":"2","order":"1795","possible_hits":"2",},
{"lineNum":"   96","line":"            .allocator = allocator,"},
{"lineNum":"   97","line":"            .unmanaged = try JStringUnmanaged.newFromStringify(allocator, value),","class":"linePartCov","hits":"1","order":"1794","possible_hits":"2",},
{"lineNum":"   98","line":"        };"},
{"lineNum":"   99","line":"    }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    pub inline fn newFromStringifyWithOptions(allocator: std.mem.Allocator, value: anytype, options: std.json.StringifyOptions) anyerror!JString {"},
{"lineNum":"  102","line":"        return JString{","class":"lineCov","hits":"2","order":"1799","possible_hits":"2",},
{"lineNum":"  103","line":"            .allocator = allocator,"},
{"lineNum":"  104","line":"            .unmanaged = try JStringUnmanaged.newFromStringifyWithOptions(allocator, value, options),","class":"linePartCov","hits":"1","order":"1798","possible_hits":"2",},
{"lineNum":"  105","line":"        };"},
{"lineNum":"  106","line":"    }"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    pub inline fn newFromFile(allocator: std.mem.Allocator, f: std.fs.File) anyerror!JString {"},
{"lineNum":"  109","line":"        return JString{","class":"lineCov","hits":"4","order":"1807","possible_hits":"4",},
{"lineNum":"  110","line":"            .allocator = allocator,"},
{"lineNum":"  111","line":"            .unmanaged = try JStringUnmanaged.newFromFile(allocator, f),","class":"linePartCov","hits":"2","order":"1806","possible_hits":"4",},
{"lineNum":"  112","line":"        };"},
{"lineNum":"  113","line":"    }"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    pub inline fn hash(this: *const JString) usize {"},
{"lineNum":"  116","line":"        return this.unmanaged.hash();","class":"lineCov","hits":"1","order":"1817","possible_hits":"1",},
{"lineNum":"  117","line":"    }"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    pub inline fn format("},
{"lineNum":"  120","line":"        this: *const JString,"},
{"lineNum":"  121","line":"        comptime fmt: []const u8,"},
{"lineNum":"  122","line":"        options: std.fmt.FormatOptions,"},
{"lineNum":"  123","line":"        writer: anytype,"},
{"lineNum":"  124","line":"    ) @TypeOf(writer).Error!void {"},
{"lineNum":"  125","line":"        try this.unmanaged.format(fmt, options, writer);","class":"lineCov","hits":"4","order":"1781","possible_hits":"4",},
{"lineNum":"  126","line":"    }"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    pub inline fn len(this: *const JString) usize {"},
{"lineNum":"  129","line":"        return this.unmanaged.len();","class":"lineCov","hits":"2","order":"1819","possible_hits":"2",},
{"lineNum":"  130","line":"    }"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    pub inline fn utf8Len(this: *JString) anyerror!usize {"},
{"lineNum":"  133","line":"        return this.unmanaged.utf8Len();","class":"lineCov","hits":"1","order":"1821","possible_hits":"1",},
{"lineNum":"  134","line":"    }"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    pub inline fn clone(this: *const JString) anyerror!JString {"},
{"lineNum":"  137","line":"        return JString{","class":"lineCov","hits":"4","order":"1759","possible_hits":"4",},
{"lineNum":"  138","line":"            .allocator = this.allocator,","class":"lineCov","hits":"3","order":"1757","possible_hits":"3",},
{"lineNum":"  139","line":"            .unmanaged = try this.unmanaged.clone(this.allocator),","class":"linePartCov","hits":"3","order":"1758","possible_hits":"6",},
{"lineNum":"  140","line":"        };"},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    pub inline fn isEmpty(this: *const JString) bool {"},
{"lineNum":"  144","line":"        return this.unmanaged.isEmpty();","class":"lineCov","hits":"1","order":"1769","possible_hits":"1",},
{"lineNum":"  145","line":"    }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    pub inline fn eqlSlice(this: *const JString, string_slice: []const u8) bool {"},
{"lineNum":"  148","line":"        return this.unmanaged.eqlSlice(string_slice);","class":"lineCov","hits":"34","order":"1754","possible_hits":"34",},
{"lineNum":"  149","line":"    }"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"    pub inline fn eql(this: *const JString, that: JString) bool {"},
{"lineNum":"  152","line":"        return this.eqlSlice(that.unmanaged.str_slice);","class":"lineCov","hits":"1","order":"1771","possible_hits":"1",},
{"lineNum":"  153","line":"    }"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"    pub inline fn explode(this: *const JString, limit: isize) anyerror![]JString {"},
{"lineNum":"  156","line":"        const unmanaged_strings = try this.unmanaged.explode(this.allocator, limit);","class":"linePartCov","hits":"2","order":"1858","possible_hits":"4",},
{"lineNum":"  157","line":"        const strings = try this.allocator.alloc(JString, unmanaged_strings.len);","class":"lineCov","hits":"2","order":"1859","possible_hits":"2",},
{"lineNum":"  158","line":"        for (0..unmanaged_strings.len) |i| {","class":"lineCov","hits":"6","order":"1860","possible_hits":"6",},
{"lineNum":"  159","line":"            strings[i] = JString{","class":"lineCov","hits":"6","order":"1861","possible_hits":"6",},
{"lineNum":"  160","line":"                .allocator = this.allocator,"},
{"lineNum":"  161","line":"                .unmanaged = unmanaged_strings[i],","class":"lineCov","hits":"8","order":"1862","possible_hits":"8",},
{"lineNum":"  162","line":"            };"},
{"lineNum":"  163","line":"        }"},
{"lineNum":"  164","line":"        return strings;","class":"linePartCov","hits":"3","order":"1863","possible_hits":"4",},
{"lineNum":"  165","line":"    }"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    // ** iterator"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    pub inline fn iterator(this: *const JString) U8Iterator {"},
{"lineNum":"  170","line":"        return this.unmanaged.iterator();","class":"lineCov","hits":"2","order":"1824","possible_hits":"2",},
{"lineNum":"  171","line":"    }"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    pub inline fn reverseIterator(this: *const JString) U8ReverseIterator {"},
{"lineNum":"  174","line":"        return this.unmanaged.reverseIterator();","class":"lineCov","hits":"2","order":"1827","possible_hits":"2",},
{"lineNum":"  175","line":"    }"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"    pub inline fn utf8Iterator(this: *JString) anyerror!std.unicode.Utf8Iterator {"},
{"lineNum":"  178","line":"        return this.unmanaged.utf8Iterator();","class":"linePartCov","hits":"2","order":"1831","possible_hits":"3",},
{"lineNum":"  179","line":"    }"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    // ** at"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"    pub inline fn at(this: *JString, index: isize) anyerror!u21 {"},
{"lineNum":"  184","line":"        return this.unmanaged.at(index);","class":"lineCov","hits":"1","order":"1855","possible_hits":"1",},
{"lineNum":"  185","line":"    }"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    // ** charAt"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    pub inline fn charAt(this: *const JString, index: isize) anyerror!u8 {"},
{"lineNum":"  190","line":"        return this.unmanaged.charAt(index);","class":"lineCov","hits":"1","order":"1852","possible_hits":"1",},
{"lineNum":"  191","line":"    }"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    // ** charCodeAt"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    pub inline fn charCodeAt(this: *const JString, index: isize) anyerror!u21 {"},
{"lineNum":"  196","line":"        _ = this;"},
{"lineNum":"  197","line":"        _ = index;"},
{"lineNum":"  198","line":"        @compileError(\"charCodeAt does not make sense in zig, please use at or charAt!\");"},
{"lineNum":"  199","line":"    }"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    // ** codePointAt"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"    pub inline fn codePointAt(this: *const JString, index: isize) anyerror!u21 {"},
{"lineNum":"  204","line":"        _ = this;"},
{"lineNum":"  205","line":"        _ = index;"},
{"lineNum":"  206","line":"        @compileError(\"codePointAt does not make sense in zig, please use at or charAt!\");"},
{"lineNum":"  207","line":"    }"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"    // ** concat"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"    pub inline fn concat(this: *const JString, other_jstring: JString) anyerror!JString {"},
{"lineNum":"  212","line":"        return JString{","class":"lineCov","hits":"2","order":"1764","possible_hits":"2",},
{"lineNum":"  213","line":"            .allocator = this.allocator,","class":"lineCov","hits":"1","order":"1762","possible_hits":"1",},
{"lineNum":"  214","line":"            .unmanaged = try this.unmanaged.concat(this.allocator, other_jstring.unmanaged),","class":"linePartCov","hits":"1","order":"1763","possible_hits":"2",},
{"lineNum":"  215","line":"        };"},
{"lineNum":"  216","line":"    }"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    pub inline fn concatSlice(this: *const JString, other_slice: []const u8) anyerror!JString {"},
{"lineNum":"  219","line":"        return JString{","class":"lineCov","hits":"2","order":"1896","possible_hits":"2",},
{"lineNum":"  220","line":"            .allocator = this.allocator,","class":"lineCov","hits":"1","order":"1894","possible_hits":"1",},
{"lineNum":"  221","line":"            .unmanaged = try this.unmanaged.concatSlice(this.allocator, other_slice),","class":"linePartCov","hits":"1","order":"1895","possible_hits":"2",},
{"lineNum":"  222","line":"        };"},
{"lineNum":"  223","line":"    }"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"    /// as we can not know len of rest_jstrings in comptime, so this method is a bit of slower than unmanaged version"},
{"lineNum":"  226","line":"    /// (or concatManySlices). Preciesly, slower than one allocation/deallocation of"},
{"lineNum":"  227","line":"    /// `[rest_jstrings.len]const []const u8` time."},
{"lineNum":"  228","line":"    pub fn concatMany(this: *const JString, rest_jstrings: []const JString) anyerror!JString {","class":"lineCov","hits":"1","order":"1745","possible_hits":"1",},
{"lineNum":"  229","line":"        if (rest_jstrings.len == 0) {","class":"lineCov","hits":"1","order":"1746","possible_hits":"1",},
{"lineNum":"  230","line":"            return this.clone();","class":"lineCov","hits":"3","order":"1756","possible_hits":"3",},
{"lineNum":"  231","line":"        } else {"},
{"lineNum":"  232","line":"            const rest_slices = try this.allocator.alloc([]const u8, rest_jstrings.len);","class":"linePartCov","hits":"1","order":"1747","possible_hits":"2",},
{"lineNum":"  233","line":"            defer this.allocator.free(rest_slices);","class":"linePartCov","hits":"1","order":"1751","possible_hits":"2",},
{"lineNum":"  234","line":"            for (0..rest_slices.len) |i| rest_slices[i] = rest_jstrings[i].unmanaged.str_slice;","class":"lineCov","hits":"2","order":"1748","possible_hits":"2",},
{"lineNum":"  235","line":"            return JString{","class":"lineCov","hits":"1","order":"1752","possible_hits":"1",},
{"lineNum":"  236","line":"                .allocator = this.allocator,","class":"lineCov","hits":"1","order":"1749","possible_hits":"1",},
{"lineNum":"  237","line":"                .unmanaged = try this.unmanaged.concatManySlices(this.allocator, rest_slices),","class":"linePartCov","hits":"1","order":"1750","possible_hits":"3",},
{"lineNum":"  238","line":"            };"},
{"lineNum":"  239","line":"        }"},
{"lineNum":"  240","line":"    }"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    pub inline fn concatManySlices(this: *const JString, rest_slices: []const []const u8) anyerror!JString {"},
{"lineNum":"  243","line":"        return JString{","class":"lineCov","hits":"2","order":"1891","possible_hits":"2",},
{"lineNum":"  244","line":"            .allocator = this.allocator,","class":"lineCov","hits":"1","order":"1889","possible_hits":"1",},
{"lineNum":"  245","line":"            .unmanaged = try this.unmanaged.concatManySlices(this.allocator, rest_slices),","class":"linePartCov","hits":"1","order":"1890","possible_hits":"2",},
{"lineNum":"  246","line":"        };"},
{"lineNum":"  247","line":"    }"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"    pub inline fn concatFormat(this: *const JString, comptime fmt: []const u8, rest_items: anytype) anyerror!JString {"},
{"lineNum":"  250","line":"        const ArgsType = @TypeOf(rest_items);"},
{"lineNum":"  251","line":"        const args_type_info = @typeInfo(ArgsType);"},
{"lineNum":"  252","line":"        if (args_type_info != .Struct) {"},
{"lineNum":"  253","line":"            @compileError(\"expected tuple or struct argument, found \" ++ @typeName(ArgsType));"},
{"lineNum":"  254","line":"        }"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"        const fields_info = args_type_info.Struct.fields;"},
{"lineNum":"  257","line":"        if (fields_info.len > @typeInfo(u32).Int.bits) {"},
{"lineNum":"  258","line":"            @compileError(\"32 arguments max are supported per format call\");"},
{"lineNum":"  259","line":"        }"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"        if (rest_items.len == 0) {"},
{"lineNum":"  262","line":"            return this.clone();","class":"linePartCov","hits":"2","order":"1880","possible_hits":"3",},
{"lineNum":"  263","line":"        } else {"},
{"lineNum":"  264","line":"            var rest_items_unmanaged_jstring = try JStringUnmanaged.newFromFormat(this.allocator, fmt, rest_items);","class":"linePartCov","hits":"2","order":"1874","possible_hits":"4",},
{"lineNum":"  265","line":"            defer rest_items_unmanaged_jstring.deinit(this.allocator);","class":"lineCov","hits":"2","order":"1877","possible_hits":"2",},
{"lineNum":"  266","line":"            var rest_items_jstrings = [1]JString{JString{ .allocator = this.allocator, .unmanaged = rest_items_unmanaged_jstring }};","class":"lineCov","hits":"2","order":"1875","possible_hits":"2",},
{"lineNum":"  267","line":"            return this.concatMany(&rest_items_jstrings);","class":"lineCov","hits":"5","order":"1876","possible_hits":"5",},
{"lineNum":"  268","line":"        }"},
{"lineNum":"  269","line":"    }"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"    pub inline fn concatTuple(this: *const JString, rest_items: anytype) anyerror!JString {"},
{"lineNum":"  272","line":"        const ArgsType = @TypeOf(rest_items);"},
{"lineNum":"  273","line":"        const args_type_info = @typeInfo(ArgsType);"},
{"lineNum":"  274","line":"        if (args_type_info != .Struct) {"},
{"lineNum":"  275","line":"            @compileError(\"expected tuple or struct argument, found \" ++ @typeName(ArgsType));"},
{"lineNum":"  276","line":"        }"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"        const fields_info = args_type_info.Struct.fields;"},
{"lineNum":"  279","line":"        if (fields_info.len > @typeInfo(u32).Int.bits) {"},
{"lineNum":"  280","line":"            @compileError(\"32 arguments max are supported per format call\");"},
{"lineNum":"  281","line":"        }"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"        // max 32 arguments, and each of them will not have long (<8) specifier"},
{"lineNum":"  284","line":"        comptime var fmt_buf: [8 * 32]u8 = undefined;"},
{"lineNum":"  285","line":"        _ = &fmt_buf;"},
{"lineNum":"  286","line":"        comptime var fmt_len: usize = 0;"},
{"lineNum":"  287","line":"        comptime {"},
{"lineNum":"  288","line":"            var fmt_print_slice: []u8 = fmt_buf[0..];"},
{"lineNum":"  289","line":"            for (fields_info) |field_info| {"},
{"lineNum":"  290","line":"                _bufPrintFmt(@typeInfo(field_info.type), &fmt_buf, &fmt_len, &fmt_print_slice);"},
{"lineNum":"  291","line":"            }"},
{"lineNum":"  292","line":"        }"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"        return this.concatFormat(fmt_buf[0..fmt_len], rest_items);","class":"linePartCov","hits":"2","order":"1884","possible_hits":"3",},
{"lineNum":"  295","line":"    }"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"    // ** endsWith"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"    pub inline fn endsWith(this: *const JString, suffix: JString) bool {"},
{"lineNum":"  300","line":"        return this.unmanaged.endsWith(suffix.unmanaged);","class":"lineCov","hits":"2","order":"1905","possible_hits":"2",},
{"lineNum":"  301","line":"    }"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    pub inline fn endsWithSlice(this: *const JString, suffix_slice: []const u8) bool {"},
{"lineNum":"  304","line":"        return this.unmanaged.endsWithSlice(suffix_slice);","class":"lineCov","hits":"1","order":"1907","possible_hits":"1",},
{"lineNum":"  305","line":"    }"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"    // ** fromCharCode"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"    /// zig supports utf-8 natively, use newFromSlice instead."},
{"lineNum":"  310","line":"    pub inline fn fromCharCode() JString {"},
{"lineNum":"  311","line":"        @compileError(\"zig supports utf-8 natively, use newFromSlice instead.\");"},
{"lineNum":"  312","line":"    }"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"    // ** fromCodePoint"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"    /// zig supports utf-8 natively, use newFromSlice instead."},
{"lineNum":"  317","line":"    pub inline fn fromCodePoint() JString {"},
{"lineNum":"  318","line":"        @compileError(\"zig supports utf-8 natively, use newFromSlice instead.\");"},
{"lineNum":"  319","line":"    }"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    // ** includes"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    pub inline fn includes(this: *const JString, needle_slice: []const u8, pos: usize) bool {"},
{"lineNum":"  324","line":"        return this.unmanaged.includes(needle_slice, pos);","class":"lineCov","hits":"1","order":"1914","possible_hits":"1",},
{"lineNum":"  325","line":"    }"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    pub inline fn fastIncludes(this: *const JString, needle_slice: []const u8, pos: usize) bool {"},
{"lineNum":"  328","line":"        return this.unmanaged.fastIncludes(this.allocator, needle_slice, pos);"},
{"lineNum":"  329","line":"    }"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"    // ** indexOf"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"    pub inline fn indexOf(this: *const JString, needle_slice: []const u8, pos: usize) isize {"},
{"lineNum":"  334","line":"        return this.unmanaged.indexOf(needle_slice, pos);","class":"lineCov","hits":"1","order":"1910","possible_hits":"1",},
{"lineNum":"  335","line":"    }"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    pub inline fn fastIndexOf(this: *const JString, needle_slice: []const u8, pos: usize) anyerror!isize {"},
{"lineNum":"  338","line":"        return this.unmanaged.fastIndexOf(this.allocator, needle_slice, pos);","class":"lineCov","hits":"1","order":"1917","possible_hits":"1",},
{"lineNum":"  339","line":"    }"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"    // ** isWellFormed"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"    pub fn isWellFormed(this: *JString) bool {","class":"lineCov","hits":"1","order":"1925","possible_hits":"1",},
{"lineNum":"  344","line":"        return this.unmanaged.isWellFormed();","class":"lineCov","hits":"1","order":"1926","possible_hits":"1",},
{"lineNum":"  345","line":"    }"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"    // ** lastIndexOf"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"    pub inline fn lastIndexOf(this: *const JString, needle_slice: []const u8, pos: usize) isize {"},
{"lineNum":"  350","line":"        return this.unmanaged.lastIndexOf(needle_slice, pos);","class":"lineCov","hits":"1","order":"1912","possible_hits":"1",},
{"lineNum":"  351","line":"    }"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"    pub inline fn fastLastIndexOf(this: *const JString, needle_slice: []const u8, pos: usize) anyerror!isize {"},
{"lineNum":"  354","line":"        return this.unmanaged.fastLastIndexOf(this.allocator, needle_slice, pos);","class":"lineCov","hits":"1","order":"1919","possible_hits":"1",},
{"lineNum":"  355","line":"    }"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"    // ** localeCompare"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"    pub inline fn localeCompare(this: *const JString) bool {"},
{"lineNum":"  360","line":"        _ = this;"},
{"lineNum":"  361","line":"        @compileError(\"Not implemented! Does localeCompare make sense in zig?\");"},
{"lineNum":"  362","line":"    }"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"    // ** match"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"    pub inline fn match(this: *const JString, pattern: []const u8, offset: usize, fetch_results: bool, regex_options: u32, match_options: u32) anyerror!Regex {"},
{"lineNum":"  367","line":"        if (enable_pcre) {"},
{"lineNum":"  368","line":"            return Regex{","class":"lineCov","hits":"2","order":"1985","possible_hits":"2",},
{"lineNum":"  369","line":"                .allocator = this.allocator,","class":"lineCov","hits":"1","order":"1983","possible_hits":"1",},
{"lineNum":"  370","line":"                .unmanaged = try this.unmanaged.match(this.allocator, pattern, offset, fetch_results, regex_options, match_options),","class":"linePartCov","hits":"1","order":"1984","possible_hits":"2",},
{"lineNum":"  371","line":"            };"},
{"lineNum":"  372","line":"        } else {"},
{"lineNum":"  373","line":"            @compileError(\"disabled by comptime var `enable_pcre`, set it true to enable.\");"},
{"lineNum":"  374","line":"        }"},
{"lineNum":"  375","line":"    }"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"    // ** matchAll"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    pub inline fn matchAll(this: *const JString, pattern: []const u8, offset: usize, regex_options: u32, match_options: u32) anyerror!Regex {"},
{"lineNum":"  380","line":"        if (enable_pcre) {"},
{"lineNum":"  381","line":"            return Regex{","class":"lineCov","hits":"2","order":"2000","possible_hits":"2",},
{"lineNum":"  382","line":"                .allocator = this.allocator,","class":"lineCov","hits":"1","order":"1998","possible_hits":"1",},
{"lineNum":"  383","line":"                .unmanaged = try this.unmanaged.matchAll(this.allocator, pattern, offset, regex_options, match_options),","class":"linePartCov","hits":"1","order":"1999","possible_hits":"2",},
{"lineNum":"  384","line":"            };"},
{"lineNum":"  385","line":"        } else {"},
{"lineNum":"  386","line":"            @compileError(\"disabled by comptime var `enable_pcre`, set it true to enable.\");"},
{"lineNum":"  387","line":"        }"},
{"lineNum":"  388","line":"    }"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"    // ** normalize"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"    pub inline fn normalize(this: *const JString) JString {"},
{"lineNum":"  393","line":"        _ = this;"},
{"lineNum":"  394","line":"        @compileError(\"Not implemented! Does normalize make sense in zig?\");"},
{"lineNum":"  395","line":"    }"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"    // ** padEnd"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"    pub inline fn padEnd(this: *const JString, wanted_len: usize, pad_slice: []const u8) anyerror!JString {"},
{"lineNum":"  400","line":"        return JString{","class":"lineCov","hits":"3","order":"1845","possible_hits":"3",},
{"lineNum":"  401","line":"            .allocator = this.allocator,","class":"lineCov","hits":"2","order":"1843","possible_hits":"2",},
{"lineNum":"  402","line":"            .unmanaged = try this.unmanaged.padEnd(this.allocator, wanted_len, pad_slice),","class":"linePartCov","hits":"2","order":"1844","possible_hits":"4",},
{"lineNum":"  403","line":"        };"},
{"lineNum":"  404","line":"    }"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"    /// JString version of padEnd, accept pad_string (*const JStringUnmanaged) instead of slice."},
{"lineNum":"  407","line":"    pub inline fn padEndJString(this: *const JString, wanted_len: usize, pad_string: *const JString) anyerror!JString {"},
{"lineNum":"  408","line":"        return this.padEnd(wanted_len, pad_string.unmanaged.str_slice);","class":"linePartCov","hits":"2","order":"1848","possible_hits":"3",},
{"lineNum":"  409","line":"    }"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"    // ** padStart"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"    pub inline fn padStart(this: *const JString, wanted_len: usize, pad_slice: []const u8) anyerror!JString {"},
{"lineNum":"  414","line":"        return JString{","class":"lineCov","hits":"3","order":"1837","possible_hits":"3",},
{"lineNum":"  415","line":"            .allocator = this.allocator,","class":"lineCov","hits":"2","order":"1835","possible_hits":"2",},
{"lineNum":"  416","line":"            .unmanaged = try this.unmanaged.padStart(this.allocator, wanted_len, pad_slice),","class":"linePartCov","hits":"2","order":"1836","possible_hits":"4",},
{"lineNum":"  417","line":"        };"},
{"lineNum":"  418","line":"    }"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"    pub inline fn padStartJString(this: *const JString, wanted_len: usize, pad_string: *const JString) anyerror!JString {"},
{"lineNum":"  421","line":"        return this.padStart(wanted_len, pad_string.unmanaged.str_slice);","class":"linePartCov","hits":"2","order":"1840","possible_hits":"3",},
{"lineNum":"  422","line":"    }"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"    // ** raw"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"    pub inline fn raw() JString {"},
{"lineNum":"  427","line":"        @compileError(\"zig has no template literals like javascript, use newFromSlice/newFromFormat/newFromTuple instead.\");"},
{"lineNum":"  428","line":"    }"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"    // ** repeat"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"    pub inline fn repeat(this: *const JString, count: usize) anyerror!JString {"},
{"lineNum":"  433","line":"        return JString{","class":"lineCov","hits":"2","order":"1741","possible_hits":"2",},
{"lineNum":"  434","line":"            .allocator = this.allocator,","class":"lineCov","hits":"1","order":"1739","possible_hits":"1",},
{"lineNum":"  435","line":"            .unmanaged = try this.unmanaged.repeat(this.allocator, count),","class":"linePartCov","hits":"1","order":"1740","possible_hits":"2",},
{"lineNum":"  436","line":"        };"},
{"lineNum":"  437","line":"    }"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"    // ** replace"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"    pub inline fn replace(this: *const JString, pattern: []const u8, replacement_slice: []const u8) anyerror!JString {"},
{"lineNum":"  442","line":"        return JString{","class":"lineCov","hits":"2","order":"1931","possible_hits":"2",},
{"lineNum":"  443","line":"            .allocator = this.allocator,","class":"lineCov","hits":"1","order":"1929","possible_hits":"1",},
{"lineNum":"  444","line":"            .unmanaged = try this.unmanaged.replace(this.allocator, pattern, replacement_slice),","class":"linePartCov","hits":"1","order":"1930","possible_hits":"2",},
{"lineNum":"  445","line":"        };"},
{"lineNum":"  446","line":"    }"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"    pub inline fn replaceByRegex(this: *const JString, pattern: []const u8, replacement_slice: []const u8) anyerror!JString {"},
{"lineNum":"  449","line":"        return JString{","class":"lineCov","hits":"2","order":"2006","possible_hits":"2",},
{"lineNum":"  450","line":"            .allocator = this.allocator,","class":"lineCov","hits":"1","order":"2004","possible_hits":"1",},
{"lineNum":"  451","line":"            .unmanaged = try this.unmanaged.replaceByRegex(this.allocator, pattern, replacement_slice),","class":"linePartCov","hits":"1","order":"2005","possible_hits":"2",},
{"lineNum":"  452","line":"        };"},
{"lineNum":"  453","line":"    }"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"    // ** replaceAll"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"    pub inline fn replaceAll(this: *const JString, pattern: []const u8, replacement_slice: []const u8) anyerror!JString {"},
{"lineNum":"  458","line":"        return JString{","class":"lineCov","hits":"2","order":"1936","possible_hits":"2",},
{"lineNum":"  459","line":"            .allocator = this.allocator,","class":"lineCov","hits":"1","order":"1934","possible_hits":"1",},
{"lineNum":"  460","line":"            .unmanaged = try this.unmanaged.replaceAll(this.allocator, pattern, replacement_slice),","class":"linePartCov","hits":"1","order":"1935","possible_hits":"2",},
{"lineNum":"  461","line":"        };"},
{"lineNum":"  462","line":"    }"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"    pub inline fn replaceAllByRegex(this: *const JString, pattern: []const u8, replacement_slice: []const u8) anyerror!JString {"},
{"lineNum":"  465","line":"        return JString{","class":"lineCov","hits":"2","order":"2011","possible_hits":"2",},
{"lineNum":"  466","line":"            .allocator = this.allocator,","class":"lineCov","hits":"1","order":"2009","possible_hits":"1",},
{"lineNum":"  467","line":"            .unmanaged = try this.unmanaged.replaceAllByRegex(this.allocator, pattern, replacement_slice),","class":"linePartCov","hits":"1","order":"2010","possible_hits":"2",},
{"lineNum":"  468","line":"        };"},
{"lineNum":"  469","line":"    }"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"    // ** search"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"    pub inline fn search(this: *const JString, pattern: []const u8, offset: usize) isize {"},
{"lineNum":"  474","line":"        return this.unmanaged.search(pattern, offset);","class":"lineCov","hits":"1","order":"1921","possible_hits":"1",},
{"lineNum":"  475","line":"    }"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    pub inline fn searchByRegex(this: *const JString, pattern: []const u8, offset: usize) anyerror!isize {"},
{"lineNum":"  478","line":"        if (enable_pcre) {"},
{"lineNum":"  479","line":"            return this.unmanaged.searchByRegex(this.allocator, pattern, offset);","class":"lineCov","hits":"1","order":"2015","possible_hits":"1",},
{"lineNum":"  480","line":"        } else {"},
{"lineNum":"  481","line":"            @compileError(\"disabled by comptime var `enable_pcre`, set it true to enable.\");"},
{"lineNum":"  482","line":"        }"},
{"lineNum":"  483","line":"    }"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"    // ** slice"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"    pub inline fn slice(this: *const JString, index_start: isize, index_end: isize) anyerror!JString {"},
{"lineNum":"  488","line":"        return JString{","class":"lineCov","hits":"3","order":"1977","possible_hits":"3",},
{"lineNum":"  489","line":"            .allocator = this.allocator,","class":"lineCov","hits":"2","order":"1975","possible_hits":"2",},
{"lineNum":"  490","line":"            .unmanaged = try this.unmanaged.slice(this.allocator, index_start, index_end),","class":"linePartCov","hits":"2","order":"1976","possible_hits":"4",},
{"lineNum":"  491","line":"        };"},
{"lineNum":"  492","line":"    }"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"    pub inline fn sliceWithStartOnly(this: *const JString, index_start: isize) anyerror!JString {"},
{"lineNum":"  495","line":"        return this.slice(index_start, @as(isize, @intCast(this.len())));","class":"linePartCov","hits":"3","order":"1974","possible_hits":"4",},
{"lineNum":"  496","line":"    }"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"    // ** split"},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"    pub inline fn split(this: *JString, seperator: []const u8, limit: isize) anyerror![]JString {"},
{"lineNum":"  501","line":"        const unmanaged_strings = try this.unmanaged.split(this.allocator, seperator, limit);","class":"linePartCov","hits":"1","order":"1700","possible_hits":"2",},
{"lineNum":"  502","line":"        const strings = try this.allocator.alloc(JString, unmanaged_strings.len);","class":"lineCov","hits":"1","order":"1701","possible_hits":"1",},
{"lineNum":"  503","line":"        for (0..unmanaged_strings.len) |i| strings[i] = JString{","class":"lineCov","hits":"5","order":"1702","possible_hits":"5",},
{"lineNum":"  504","line":"            .allocator = this.allocator,"},
{"lineNum":"  505","line":"            .unmanaged = unmanaged_strings[i],","class":"lineCov","hits":"4","order":"1703","possible_hits":"4",},
{"lineNum":"  506","line":"        };"},
{"lineNum":"  507","line":"        return strings;","class":"linePartCov","hits":"2","order":"1704","possible_hits":"3",},
{"lineNum":"  508","line":"    }"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"    pub inline fn splitByWhiteSpace(this: *JString, limit: isize) anyerror![]JString {"},
{"lineNum":"  511","line":"        return this.explode(limit);","class":"linePartCov","hits":"2","order":"1866","possible_hits":"3",},
{"lineNum":"  512","line":"    }"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"    pub inline fn splitByRegex(this: *JString, pattern: []const u8, offset: usize, limit: isize) anyerror![]JString {"},
{"lineNum":"  515","line":"        if (enable_pcre) {"},
{"lineNum":"  516","line":"            const unmanaged_strings = try this.unmanaged.splitByRegex(this.allocator, pattern, offset, limit);","class":"linePartCov","hits":"1","order":"2019","possible_hits":"2",},
{"lineNum":"  517","line":"            const strings = try this.allocator.alloc(JString, unmanaged_strings.len);","class":"lineCov","hits":"1","order":"2020","possible_hits":"1",},
{"lineNum":"  518","line":"            for (0..unmanaged_strings.len) |i| strings[i] = JString{","class":"lineCov","hits":"5","order":"2021","possible_hits":"5",},
{"lineNum":"  519","line":"                .allocator = this.allocator,"},
{"lineNum":"  520","line":"                .unmanaged = unmanaged_strings[i],","class":"lineCov","hits":"4","order":"2022","possible_hits":"4",},
{"lineNum":"  521","line":"            };"},
{"lineNum":"  522","line":"            return strings;","class":"linePartCov","hits":"2","order":"2023","possible_hits":"3",},
{"lineNum":"  523","line":"        } else {"},
{"lineNum":"  524","line":"            @compileError(\"disabled by comptime var `enable_pcre`, set it true to enable.\");"},
{"lineNum":"  525","line":"        }"},
{"lineNum":"  526","line":"    }"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"    // ** startsWith"},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"    pub inline fn startsWith(this: *const JString, prefix: JString) bool {"},
{"lineNum":"  531","line":"        return this.startsWithSlice(prefix.unmanaged.str_slice);","class":"lineCov","hits":"1","order":"1901","possible_hits":"1",},
{"lineNum":"  532","line":"    }"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"    pub fn startsWithSlice(this: *const JString, prefix_slice: []const u8) bool {","class":"lineCov","hits":"1","order":"1902","possible_hits":"1",},
{"lineNum":"  535","line":"        return this.unmanaged.startsWithSlice(prefix_slice);","class":"lineCov","hits":"1","order":"1903","possible_hits":"1",},
{"lineNum":"  536","line":"    }"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"    // ** toLocaleLowerCase"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"    pub fn toLocaleLowerCase(this: *const JString) anyerror!JString {"},
{"lineNum":"  541","line":"        _ = this;"},
{"lineNum":"  542","line":"        @compileError(\"TODO, not yet implemented!\");"},
{"lineNum":"  543","line":"    }"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"    // ** toLocaleUpperCase"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"    pub fn toLocalUpperCase(this: *const JString) anyerror!JString {"},
{"lineNum":"  548","line":"        _ = this;"},
{"lineNum":"  549","line":"        @compileError(\"TODO, not yet implemented!\");"},
{"lineNum":"  550","line":"    }"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"    // ** toLowerCase"},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"    pub fn toLowerCase(this: *const JString) anyerror!JString {","class":"lineCov","hits":"1","order":"1946","possible_hits":"1",},
{"lineNum":"  555","line":"        return JString{","class":"lineCov","hits":"1","order":"1949","possible_hits":"1",},
{"lineNum":"  556","line":"            .allocator = this.allocator,","class":"lineCov","hits":"1","order":"1947","possible_hits":"1",},
{"lineNum":"  557","line":"            .unmanaged = try this.unmanaged.toLowerCase(this.allocator),","class":"lineCov","hits":"1","order":"1948","possible_hits":"1",},
{"lineNum":"  558","line":"        };"},
{"lineNum":"  559","line":"    }"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"    // ** toUpperCase"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"    pub fn toUpperCase(this: *const JString) anyerror!JString {","class":"lineCov","hits":"1","order":"1940","possible_hits":"1",},
{"lineNum":"  564","line":"        return JString{","class":"lineCov","hits":"1","order":"1943","possible_hits":"1",},
{"lineNum":"  565","line":"            .allocator = this.allocator,","class":"lineCov","hits":"1","order":"1941","possible_hits":"1",},
{"lineNum":"  566","line":"            .unmanaged = try this.unmanaged.toUpperCase(this.allocator),","class":"lineCov","hits":"1","order":"1942","possible_hits":"1",},
{"lineNum":"  567","line":"        };"},
{"lineNum":"  568","line":"    }"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"    // ** toWellFormed"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"    pub fn toWellFormed(this: *const JString) void {"},
{"lineNum":"  573","line":"        _ = this;"},
{"lineNum":"  574","line":"        @compileError(\"toWellFormed does not make sense in zig as zig is u8/utf8 based. No need to use this.\");"},
{"lineNum":"  575","line":"    }"},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"    // ** trim"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"    pub fn trim(this: *const JString) anyerror!JString {","class":"lineCov","hits":"1","order":"1967","possible_hits":"1",},
{"lineNum":"  580","line":"        return JString{","class":"lineCov","hits":"1","order":"1970","possible_hits":"1",},
{"lineNum":"  581","line":"            .allocator = this.allocator,","class":"lineCov","hits":"1","order":"1968","possible_hits":"1",},
{"lineNum":"  582","line":"            .unmanaged = try this.unmanaged.trim(this.allocator),","class":"lineCov","hits":"1","order":"1969","possible_hits":"1",},
{"lineNum":"  583","line":"        };"},
{"lineNum":"  584","line":"    }"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"    // ** trimEnd"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"    pub fn trimEnd(this: *const JString) anyerror!JString {","class":"lineCov","hits":"1","order":"1960","possible_hits":"1",},
{"lineNum":"  589","line":"        return JString{","class":"lineCov","hits":"1","order":"1963","possible_hits":"1",},
{"lineNum":"  590","line":"            .allocator = this.allocator,","class":"lineCov","hits":"1","order":"1961","possible_hits":"1",},
{"lineNum":"  591","line":"            .unmanaged = try this.unmanaged.trimEnd(this.allocator),","class":"lineCov","hits":"1","order":"1962","possible_hits":"1",},
{"lineNum":"  592","line":"        };"},
{"lineNum":"  593","line":"    }"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"    // ** trimStart"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"    pub fn trimStart(this: *const JString) anyerror!JString {","class":"lineCov","hits":"1","order":"1953","possible_hits":"1",},
{"lineNum":"  598","line":"        return JString{","class":"lineCov","hits":"1","order":"1956","possible_hits":"1",},
{"lineNum":"  599","line":"            .allocator = this.allocator,","class":"lineCov","hits":"1","order":"1954","possible_hits":"1",},
{"lineNum":"  600","line":"            .unmanaged = try this.unmanaged.trimStart(this.allocator),","class":"lineCov","hits":"1","order":"1955","possible_hits":"1",},
{"lineNum":"  601","line":"        };"},
{"lineNum":"  602","line":"    }"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"    // ** valueOf"},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"    pub inline fn valueOf(this: *const JString) []const u8 {"},
{"lineNum":"  607","line":"        return this.unmanaged.str_slice;","class":"lineCov","hits":"1","order":"1989","possible_hits":"1",},
{"lineNum":"  608","line":"    }"},
{"lineNum":"  609","line":"};"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"// unmanaged versions: the real deal"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"pub const RegexUnmanaged = defineRegexUnmanaged(enable_pcre);"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"pub const JStringUnmanaged = struct {"},
{"lineNum":"  616","line":"    pub const U8Iterator = struct {"},
{"lineNum":"  617","line":"        const Self = @This();"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"        jstring_: *const JStringUnmanaged = undefined,"},
{"lineNum":"  620","line":"        pos: usize = 0,"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"        pub fn next(this: *Self) ?u8 {","class":"lineCov","hits":"1","order":"513","possible_hits":"1",},
{"lineNum":"  623","line":"            if (this.pos >= this.jstring_.*.len()) {","class":"lineCov","hits":"1","order":"514","possible_hits":"1",},
{"lineNum":"  624","line":"                return null;","class":"lineCov","hits":"1","order":"515","possible_hits":"1",},
{"lineNum":"  625","line":"            } else {"},
{"lineNum":"  626","line":"                const c = this.jstring_.*.charAt(@as(i32, @intCast(this.pos))) catch return null;","class":"lineCov","hits":"2","order":"518","possible_hits":"2",},
{"lineNum":"  627","line":"                this.pos += 1;","class":"linePartCov","hits":"1","order":"519","possible_hits":"2",},
{"lineNum":"  628","line":"                return c;","class":"lineCov","hits":"1","order":"520","possible_hits":"1",},
{"lineNum":"  629","line":"            }"},
{"lineNum":"  630","line":"        }"},
{"lineNum":"  631","line":"    };"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"    pub const U8ReverseIterator = struct {"},
{"lineNum":"  634","line":"        const Self = @This();"},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"        jstring_: *const JStringUnmanaged = undefined,"},
{"lineNum":"  637","line":"        pos: isize = -1,"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"        pub fn next(this: *Self) ?u8 {","class":"lineCov","hits":"1","order":"526","possible_hits":"1",},
{"lineNum":"  640","line":"            if (this.pos < -@as(isize, @intCast(this.jstring_.*.len()))) {","class":"lineCov","hits":"2","order":"527","possible_hits":"2",},
{"lineNum":"  641","line":"                return null;","class":"lineCov","hits":"1","order":"533","possible_hits":"1",},
{"lineNum":"  642","line":"            } else {"},
{"lineNum":"  643","line":"                const c = this.jstring_.*.charAt(this.pos) catch return null;","class":"lineCov","hits":"2","order":"528","possible_hits":"2",},
{"lineNum":"  644","line":"                this.pos -= 1;","class":"linePartCov","hits":"1","order":"529","possible_hits":"2",},
{"lineNum":"  645","line":"                return c;","class":"lineCov","hits":"1","order":"530","possible_hits":"1",},
{"lineNum":"  646","line":"            }"},
{"lineNum":"  647","line":"        }"},
{"lineNum":"  648","line":"    };"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"    str_slice: []const u8,"},
{"lineNum":"  651","line":"    utf8_view_inited: bool = false,"},
{"lineNum":"  652","line":"    utf8_view: std.unicode.Utf8View = undefined,"},
{"lineNum":"  653","line":"    utf8_len: usize = 0,"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"    pub inline fn deinit(this: *const JStringUnmanaged, allocator: std.mem.Allocator) void {"},
{"lineNum":"  656","line":"        allocator.free(this.str_slice);","class":"lineCov","hits":"9","order":"330","possible_hits":"9",},
{"lineNum":"  657","line":"    }"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"    // constructors"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"    /// As the name assumes, it returns an empty string."},
{"lineNum":"  662","line":"    pub fn newEmpty(allocator: std.mem.Allocator) anyerror!JStringUnmanaged {","class":"lineCov","hits":"2","order":"134","possible_hits":"2",},
{"lineNum":"  663","line":"        const new_slice = try allocator.alloc(u8, 0);","class":"lineCov","hits":"1","order":"135","possible_hits":"1",},
{"lineNum":"  664","line":"        return JStringUnmanaged{","class":"lineCov","hits":"1","order":"136","possible_hits":"1",},
{"lineNum":"  665","line":"            .str_slice = new_slice,"},
{"lineNum":"  666","line":"        };"},
{"lineNum":"  667","line":"    }"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"    /// Returns a string copied the content of slice. i.e.,"},
{"lineNum":"  670","line":"    /// `const s = try JStringUnmanaged.newFromSlice(allocator, \"hello,world\");`"},
{"lineNum":"  671","line":"    pub fn newFromSlice(allocator: std.mem.Allocator, string_slice: []const u8) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"140","possible_hits":"1",},
{"lineNum":"  672","line":"        const new_slice = try allocator.alloc(u8, string_slice.len);","class":"lineCov","hits":"1","order":"141","possible_hits":"1",},
{"lineNum":"  673","line":"        @memcpy(new_slice, string_slice);","class":"lineCov","hits":"2","order":"142","possible_hits":"2",},
{"lineNum":"  674","line":"        return JStringUnmanaged{","class":"lineCov","hits":"1","order":"143","possible_hits":"1",},
{"lineNum":"  675","line":"            .str_slice = new_slice,"},
{"lineNum":"  676","line":"        };"},
{"lineNum":"  677","line":"    }"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"    /// Returns a string copied the content of the other JStringUnmanaged"},
{"lineNum":"  680","line":"    pub fn newFromJStringUnmanaged(allocator: std.mem.Allocator, that: JStringUnmanaged) anyerror!JStringUnmanaged {","class":"lineCov","hits":"2","order":"146","possible_hits":"2",},
{"lineNum":"  681","line":"        const new_slice = try allocator.alloc(u8, that.len());","class":"lineCov","hits":"2","order":"147","possible_hits":"2",},
{"lineNum":"  682","line":"        @memcpy(new_slice, that.str_slice);","class":"lineCov","hits":"2","order":"148","possible_hits":"2",},
{"lineNum":"  683","line":"        return JStringUnmanaged{","class":"lineCov","hits":"1","order":"149","possible_hits":"1",},
{"lineNum":"  684","line":"            .str_slice = new_slice,"},
{"lineNum":"  685","line":"        };"},
{"lineNum":"  686","line":"    }"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"    /// Returns a string from the result of formatting, i.e., sprintf."},
{"lineNum":"  689","line":"    /// Example: `var s = JStringUnmanaged.newFromFormat(allocator, \"{s}{d}\", .{ \"hello\", 5 })`"},
{"lineNum":"  690","line":"    pub fn newFromFormat(allocator: std.mem.Allocator, comptime fmt: []const u8, args: anytype) anyerror!JStringUnmanaged {","class":"lineCov","hits":"22","order":"152","possible_hits":"22",},
{"lineNum":"  691","line":"        const new_slice = try std.fmt.allocPrint(allocator, fmt, args);","class":"lineCov","hits":"11","order":"153","possible_hits":"11",},
{"lineNum":"  692","line":"        return JStringUnmanaged{","class":"lineCov","hits":"11","order":"154","possible_hits":"11",},
{"lineNum":"  693","line":"            .str_slice = new_slice,"},
{"lineNum":"  694","line":"        };"},
{"lineNum":"  695","line":"    }"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"    /// Returns a string from auto formatting a tuple of items. Essentially what it does is to guess the fmt"},
{"lineNum":"  698","line":"    /// automatically. The max items of the tuple is 32."},
{"lineNum":"  699","line":"    /// Example: `var s = JStringUnmanaged.newFromFormat(allocator, .{ \"hello\", 5 })`"},
{"lineNum":"  700","line":"    pub fn newFromTuple(allocator: std.mem.Allocator, rest_items: anytype) anyerror!JStringUnmanaged {","class":"lineCov","hits":"4","order":"157","possible_hits":"4",},
{"lineNum":"  701","line":"        const ArgsType = @TypeOf(rest_items);"},
{"lineNum":"  702","line":"        const args_type_info = @typeInfo(ArgsType);"},
{"lineNum":"  703","line":"        if (args_type_info != .Struct) {"},
{"lineNum":"  704","line":"            @compileError(\"expected tuple or struct argument, found \" ++ @typeName(ArgsType));"},
{"lineNum":"  705","line":"        }"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"        const fields_info = args_type_info.Struct.fields;"},
{"lineNum":"  708","line":"        if (fields_info.len > @typeInfo(u32).Int.bits) {"},
{"lineNum":"  709","line":"            @compileError(\"32 arguments max are supported per format call\");"},
{"lineNum":"  710","line":"        }"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":"        // max 32 arguments, and each of them will not have long (<8) specifier"},
{"lineNum":"  713","line":"        comptime var fmt_buf: [8 * 32]u8 = undefined;"},
{"lineNum":"  714","line":"        _ = &fmt_buf;"},
{"lineNum":"  715","line":"        comptime var fmt_len: usize = 0;"},
{"lineNum":"  716","line":"        comptime {"},
{"lineNum":"  717","line":"            var fmt_print_slice: []u8 = fmt_buf[0..];"},
{"lineNum":"  718","line":"            for (fields_info) |field_info| {"},
{"lineNum":"  719","line":"                _bufPrintFmt(@typeInfo(field_info.type), &fmt_buf, &fmt_len, &fmt_print_slice);"},
{"lineNum":"  720","line":"            }"},
{"lineNum":"  721","line":"        }"},
{"lineNum":"  722","line":"        return JStringUnmanaged.newFromFormat(allocator, fmt_buf[0..fmt_len], rest_items);","class":"lineCov","hits":"2","order":"158","possible_hits":"2",},
{"lineNum":"  723","line":"    }"},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"    pub inline fn newFromNumber(allocator: std.mem.Allocator, comptime T: type, value: T) anyerror!JStringUnmanaged {"},
{"lineNum":"  726","line":"        switch (@typeInfo(T)) {"},
{"lineNum":"  727","line":"            .Int => {},"},
{"lineNum":"  728","line":"            .Float => {},"},
{"lineNum":"  729","line":"            else => @compileError(\"parseInt can only work on number like types: integer or float (i32/u32/f32...).\"),"},
{"lineNum":"  730","line":"        }"},
{"lineNum":"  731","line":"        return JStringUnmanaged.newFromFormat(allocator, \"{d}\", .{value});","class":"linePartCov","hits":"3","order":"161","possible_hits":"4",},
{"lineNum":"  732","line":"    }"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"    pub fn newFromStringify(allocator: std.mem.Allocator, value: anytype) anyerror!JStringUnmanaged {","class":"lineCov","hits":"4","order":"167","possible_hits":"4",},
{"lineNum":"  735","line":"        const new_slice = try std.json.stringifyAlloc(allocator, value, .{});","class":"lineCov","hits":"2","order":"168","possible_hits":"2",},
{"lineNum":"  736","line":"        return JStringUnmanaged{","class":"lineCov","hits":"2","order":"176","possible_hits":"2",},
{"lineNum":"  737","line":"            .str_slice = new_slice,"},
{"lineNum":"  738","line":"        };"},
{"lineNum":"  739","line":"    }"},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"    pub fn newFromStringifyWithOptions(allocator: std.mem.Allocator, value: anytype, options: std.json.StringifyOptions) anyerror!JStringUnmanaged {","class":"lineCov","hits":"4","order":"179","possible_hits":"4",},
{"lineNum":"  742","line":"        const new_slice = try std.json.stringifyAlloc(allocator, value, options);","class":"lineCov","hits":"2","order":"180","possible_hits":"2",},
{"lineNum":"  743","line":"        return JStringUnmanaged{","class":"lineCov","hits":"2","order":"182","possible_hits":"2",},
{"lineNum":"  744","line":"            .str_slice = new_slice,"},
{"lineNum":"  745","line":"        };"},
{"lineNum":"  746","line":"    }"},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"    pub fn newFromFile(allocator: std.mem.Allocator, f: std.fs.File) anyerror!JStringUnmanaged {","class":"lineCov","hits":"2","order":"190","possible_hits":"2",},
{"lineNum":"  749","line":"        const stat = try f.stat();","class":"lineCov","hits":"1","order":"191","possible_hits":"1",},
{"lineNum":"  750","line":"        var new_slice = try allocator.alloc(u8, stat.size);","class":"lineCov","hits":"1","order":"192","possible_hits":"1",},
{"lineNum":"  751","line":"        const read_size = try f.readAll(new_slice);","class":"lineCov","hits":"1","order":"193","possible_hits":"1",},
{"lineNum":"  752","line":"        if (read_size == stat.size) {","class":"lineCov","hits":"1","order":"194","possible_hits":"1",},
{"lineNum":"  753","line":"            return JStringUnmanaged{","class":"lineCov","hits":"1","order":"195","possible_hits":"1",},
{"lineNum":"  754","line":"                .str_slice = new_slice,"},
{"lineNum":"  755","line":"            };"},
{"lineNum":"  756","line":"        } else {"},
{"lineNum":"  757","line":"            return JStringUnmanaged.newFromSlice(allocator, new_slice[0..read_size]);","class":"lineCov","hits":"1","order":"198","possible_hits":"1",},
{"lineNum":"  758","line":"        }"},
{"lineNum":"  759","line":"    }"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"    // utils"},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"    pub fn hash(this: *const JStringUnmanaged) usize {","class":"lineCov","hits":"1","order":"289","possible_hits":"1",},
{"lineNum":"  764","line":"        var wyhash = std.hash.Wyhash.init(0);","class":"lineCov","hits":"1","order":"290","possible_hits":"1",},
{"lineNum":"  765","line":"        wyhash.update(this.str_slice);","class":"lineCov","hits":"1","order":"291","possible_hits":"1",},
{"lineNum":"  766","line":"        return wyhash.final();","class":"lineCov","hits":"1","order":"292","possible_hits":"1",},
{"lineNum":"  767","line":"    }"},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"    pub fn format("},
{"lineNum":"  770","line":"        this: *const JStringUnmanaged,"},
{"lineNum":"  771","line":"        comptime fmt: []const u8,"},
{"lineNum":"  772","line":"        options: std.fmt.FormatOptions,"},
{"lineNum":"  773","line":"        writer: anytype,"},
{"lineNum":"  774","line":"    ) @TypeOf(writer).Error!void {","class":"linePartCov","hits":"4","order":"206","possible_hits":"5",},
{"lineNum":"  775","line":"        _ = options;"},
{"lineNum":"  776","line":"        _ = fmt;"},
{"lineNum":"  777","line":"        try writer.print(\"{s}\", .{this.str_slice});","class":"linePartCov","hits":"4","order":"207","possible_hits":"5",},
{"lineNum":"  778","line":"    }"},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"    /// Simple util to return the underlying slice\'s len (= this.str_slice.len). Less typing, less errors."},
{"lineNum":"  781","line":"    pub inline fn len(this: *const JStringUnmanaged) usize {"},
{"lineNum":"  782","line":"        return this.str_slice.len;","class":"linePartCov","hits":"58","order":"138","possible_hits":"61",},
{"lineNum":"  783","line":"    }"},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"    /// First time call utf8Len will init the utf8_view and calculate len once. After that we will just use the cached"},
{"lineNum":"  786","line":"    /// view and len."},
{"lineNum":"  787","line":"    pub fn utf8Len(this: *JStringUnmanaged) anyerror!usize {","class":"lineCov","hits":"1","order":"227","possible_hits":"1",},
{"lineNum":"  788","line":"        if (!this.utf8_view_inited) {","class":"lineCov","hits":"1","order":"228","possible_hits":"1",},
{"lineNum":"  789","line":"            this.utf8_view = try std.unicode.Utf8View.init(this.str_slice);","class":"lineCov","hits":"2","order":"229","possible_hits":"2",},
{"lineNum":"  790","line":"            this.utf8_view_inited = true;","class":"lineCov","hits":"1","order":"230","possible_hits":"1",},
{"lineNum":"  791","line":"            this.utf8_len = brk: {","class":"lineCov","hits":"1","order":"231","possible_hits":"1",},
{"lineNum":"  792","line":"                var utf8_len: usize = 0;","class":"lineCov","hits":"1","order":"232","possible_hits":"1",},
{"lineNum":"  793","line":"                var it = this.utf8_view.iterator();","class":"lineCov","hits":"1","order":"233","possible_hits":"1",},
{"lineNum":"  794","line":"                while (it.nextCodepoint()) |_| {","class":"lineCov","hits":"1","order":"234","possible_hits":"1",},
{"lineNum":"  795","line":"                    utf8_len += 1;","class":"lineCov","hits":"1","order":"235","possible_hits":"1",},
{"lineNum":"  796","line":"                }"},
{"lineNum":"  797","line":"                break :brk utf8_len;","class":"lineCov","hits":"2","order":"236","possible_hits":"2",},
{"lineNum":"  798","line":"            };"},
{"lineNum":"  799","line":"        }"},
{"lineNum":"  800","line":"        return this.utf8_len;","class":"lineCov","hits":"1","order":"237","possible_hits":"1",},
{"lineNum":"  801","line":"    }"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"    /// As the name assumes. Equals to `JStringUnmanaged.newFromJStringUnmanaged(allocator, this)`"},
{"lineNum":"  804","line":"    pub inline fn clone(this: *const JStringUnmanaged, allocator: std.mem.Allocator) anyerror!JStringUnmanaged {"},
{"lineNum":"  805","line":"        return JStringUnmanaged.newFromJStringUnmanaged(allocator, this.*);","class":"linePartCov","hits":"13","order":"222","possible_hits":"18",},
{"lineNum":"  806","line":"    }"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"    fn _cloneAsArray(this: *const JStringUnmanaged, allocator: std.mem.Allocator) anyerror![]JStringUnmanaged {","class":"lineCov","hits":"1","order":"1437","possible_hits":"1",},
{"lineNum":"  809","line":"        var result_jstrings = try allocator.alloc(JStringUnmanaged, 1);","class":"lineCov","hits":"1","order":"1438","possible_hits":"1",},
{"lineNum":"  810","line":"        result_jstrings[0] = try this.clone(allocator);","class":"linePartCov","hits":"2","order":"1439","possible_hits":"3",},
{"lineNum":"  811","line":"        return result_jstrings;","class":"lineCov","hits":"1","order":"1440","possible_hits":"1",},
{"lineNum":"  812","line":"    }"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"    /// Equals to `this.len() == 0` or `this.str_slice.len == 0`"},
{"lineNum":"  815","line":"    pub inline fn isEmpty(this: *const JStringUnmanaged) bool {"},
{"lineNum":"  816","line":"        return this.len() == 0;","class":"lineCov","hits":"5","order":"217","possible_hits":"5",},
{"lineNum":"  817","line":"    }"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"    /// As simple as compare the underlying str_slice to string_slice"},
{"lineNum":"  820","line":"    pub inline fn eqlSlice(this: *const JStringUnmanaged, string_slice: []const u8) bool {"},
{"lineNum":"  821","line":"        return std.mem.eql(u8, this.str_slice, string_slice);","class":"lineCov","hits":"135","order":"163","possible_hits":"135",},
{"lineNum":"  822","line":"    }"},
{"lineNum":"  823","line":""},
{"lineNum":"  824","line":"    /// Equals to `this.eqlSlice(that.str_slice)`"},
{"lineNum":"  825","line":"    pub inline fn eql(this: *const JStringUnmanaged, that: JStringUnmanaged) bool {"},
{"lineNum":"  826","line":"        return this.eqlSlice(that.str_slice);","class":"lineCov","hits":"1","order":"219","possible_hits":"1",},
{"lineNum":"  827","line":"    }"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"    /// explode this string to small strings sperated by ascii spaces while respects utf8 chars. Limit can be -1 or"},
{"lineNum":"  830","line":"    /// positive numbers. When limit is negative means auto calculate how many strings can return; otherwise will return"},
{"lineNum":"  831","line":"    /// min(limit, possible max number of strings)"},
{"lineNum":"  832","line":"    pub fn explode(this: *const JStringUnmanaged, allocator: std.mem.Allocator, limit: isize) anyerror![]JStringUnmanaged {","class":"lineCov","hits":"1","order":"240","possible_hits":"1",},
{"lineNum":"  833","line":"        const real_limit = brk: {"},
{"lineNum":"  834","line":"            if (limit < 0) {","class":"lineCov","hits":"1","order":"241","possible_hits":"1",},
{"lineNum":"  835","line":"                break :brk this.str_slice.len;","class":"lineCov","hits":"1","order":"242","possible_hits":"1",},
{"lineNum":"  836","line":"            } else {"},
{"lineNum":"  837","line":"                break :brk @as(usize, @intCast(limit));","class":"lineCov","hits":"2","order":"243","possible_hits":"2",},
{"lineNum":"  838","line":"            }"},
{"lineNum":"  839","line":"        };"},
{"lineNum":"  840","line":"        return this._explode(allocator, real_limit);","class":"lineCov","hits":"2","order":"244","possible_hits":"2",},
{"lineNum":"  841","line":"    }"},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"    fn _explode(this: *const JStringUnmanaged, allocator: std.mem.Allocator, limit: usize) anyerror![]JStringUnmanaged {","class":"lineCov","hits":"1","order":"245","possible_hits":"1",},
{"lineNum":"  844","line":"        var result_jstrings = try allocator.alloc(JStringUnmanaged, limit);","class":"lineCov","hits":"1","order":"246","possible_hits":"1",},
{"lineNum":"  845","line":"        var result_count: usize = 0;","class":"lineCov","hits":"1","order":"247","possible_hits":"1",},
{"lineNum":"  846","line":"        var pos: usize = 0;","class":"lineCov","hits":"1","order":"248","possible_hits":"1",},
{"lineNum":"  847","line":"        var next_pos: usize = 0;","class":"lineCov","hits":"1","order":"249","possible_hits":"1",},
{"lineNum":"  848","line":""},
{"lineNum":"  849","line":"        while (pos < this.str_slice.len) {","class":"lineCov","hits":"1","order":"250","possible_hits":"1",},
{"lineNum":"  850","line":"            switch (this.str_slice[pos]) {","class":"lineCov","hits":"2","order":"251","possible_hits":"2",},
{"lineNum":"  851","line":"                \' \', \'\\t\', \'\\n\', \'\\r\' => {"},
{"lineNum":"  852","line":"                    pos += 1;","class":"lineCov","hits":"1","order":"252","possible_hits":"1",},
{"lineNum":"  853","line":"                    continue;","class":"lineCov","hits":"1","order":"253","possible_hits":"1",},
{"lineNum":"  854","line":"                },"},
{"lineNum":"  855","line":"                else => {"},
{"lineNum":"  856","line":"                    next_pos = pos + 1;","class":"linePartCov","hits":"1","order":"255","possible_hits":"2",},
{"lineNum":"  857","line":"                    next_pos = brk: {","class":"lineCov","hits":"1","order":"256","possible_hits":"1",},
{"lineNum":"  858","line":"                        while (next_pos < this.str_slice.len) : (next_pos += 1) {","class":"linePartCov","hits":"2","order":"257","possible_hits":"3",},
{"lineNum":"  859","line":"                            switch (this.str_slice[next_pos]) {","class":"lineCov","hits":"2","order":"258","possible_hits":"2",},
{"lineNum":"  860","line":"                                \' \', \'\\t\', \'\\n\', \'\\r\' => break :brk next_pos,"},
{"lineNum":"  861","line":"                                else => continue,"},
{"lineNum":"  862","line":"                            }"},
{"lineNum":"  863","line":"                        }"},
{"lineNum":"  864","line":"                        break :brk next_pos;","class":"lineCov","hits":"2","order":"259","possible_hits":"2",},
{"lineNum":"  865","line":"                    };"},
{"lineNum":"  866","line":"                    result_jstrings[result_count] = try JStringUnmanaged.newFromSlice(allocator, this.str_slice[pos..next_pos]);","class":"lineCov","hits":"2","order":"260","possible_hits":"2",},
{"lineNum":"  867","line":"                    result_count += 1;","class":"lineCov","hits":"1","order":"261","possible_hits":"1",},
{"lineNum":"  868","line":"                    if (result_count >= limit) {","class":"lineCov","hits":"1","order":"262","possible_hits":"1",},
{"lineNum":"  869","line":"                        break;","class":"lineCov","hits":"1","order":"272","possible_hits":"1",},
{"lineNum":"  870","line":"                    }"},
{"lineNum":"  871","line":"                    pos = next_pos;","class":"lineCov","hits":"1","order":"263","possible_hits":"1",},
{"lineNum":"  872","line":"                    continue;","class":"lineCov","hits":"3","order":"254","possible_hits":"3",},
{"lineNum":"  873","line":"                },"},
{"lineNum":"  874","line":"            }"},
{"lineNum":"  875","line":"        }"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"        if (result_count == limit) {","class":"lineCov","hits":"1","order":"264","possible_hits":"1",},
{"lineNum":"  878","line":"            return result_jstrings;","class":"lineCov","hits":"1","order":"273","possible_hits":"1",},
{"lineNum":"  879","line":"        } else {"},
{"lineNum":"  880","line":"            defer allocator.free(result_jstrings);","class":"linePartCov","hits":"1","order":"269","possible_hits":"2",},
{"lineNum":"  881","line":"            var final_result_jstrings = try allocator.alloc(JStringUnmanaged, result_count);","class":"linePartCov","hits":"1","order":"265","possible_hits":"2",},
{"lineNum":"  882","line":"            _ = &final_result_jstrings;"},
{"lineNum":"  883","line":"            if (result_count > 0) {","class":"lineCov","hits":"1","order":"266","possible_hits":"1",},
{"lineNum":"  884","line":"                @memcpy(final_result_jstrings, result_jstrings[0..result_count]);","class":"lineCov","hits":"1","order":"267","possible_hits":"1",},
{"lineNum":"  885","line":"            }"},
{"lineNum":"  886","line":"            return final_result_jstrings;","class":"lineCov","hits":"2","order":"268","possible_hits":"2",},
{"lineNum":"  887","line":"        }"},
{"lineNum":"  888","line":"    }"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"    // ** iterator"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"    /// return an iterator can iterate char(u8) by char, from the beginning."},
{"lineNum":"  893","line":"    pub inline fn iterator(this: *const JStringUnmanaged) U8Iterator {"},
{"lineNum":"  894","line":"        return U8Iterator{","class":"lineCov","hits":"3","order":"511","possible_hits":"3",},
{"lineNum":"  895","line":"            .jstring_ = this,"},
{"lineNum":"  896","line":"            .pos = 0,"},
{"lineNum":"  897","line":"        };"},
{"lineNum":"  898","line":"    }"},
{"lineNum":"  899","line":""},
{"lineNum":"  900","line":"    /// return an interator can iterate char(u8) by char, but from the end."},
{"lineNum":"  901","line":"    pub inline fn reverseIterator(this: *const JStringUnmanaged) U8ReverseIterator {"},
{"lineNum":"  902","line":"        return U8ReverseIterator{","class":"lineCov","hits":"2","order":"524","possible_hits":"2",},
{"lineNum":"  903","line":"            .jstring_ = this,"},
{"lineNum":"  904","line":"            .pos = -1,"},
{"lineNum":"  905","line":"        };"},
{"lineNum":"  906","line":"    }"},
{"lineNum":"  907","line":""},
{"lineNum":"  908","line":"    /// return std.unicode.Utf8Iterator, which can help to iterate through every"},
{"lineNum":"  909","line":"    /// unicode char"},
{"lineNum":"  910","line":"    pub inline fn utf8Iterator(this: *JStringUnmanaged) anyerror!std.unicode.Utf8Iterator {"},
{"lineNum":"  911","line":"        _ = try this.utf8Len();","class":"linePartCov","hits":"4","order":"536","possible_hits":"8",},
{"lineNum":"  912","line":"        return this.utf8_view.iterator();","class":"lineCov","hits":"7","order":"537","possible_hits":"7",},
{"lineNum":"  913","line":"    }"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"    // ** at"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"    /// different to Javascript\'s string.at, return unicode char(u21) of index, as prefer utf-8 string. Same to"},
{"lineNum":"  918","line":"    /// Javascript, accept index as `i32`: when postive is from beginning; when negative is from ending; when"},
{"lineNum":"  919","line":"    /// `index == 0`, return the the first char if not empty."},
{"lineNum":"  920","line":"    pub fn at(this: *JStringUnmanaged, index: isize) anyerror!u21 {","class":"lineCov","hits":"1","order":"485","possible_hits":"1",},
{"lineNum":"  921","line":"        const utf8_len = try this.utf8Len();","class":"lineCov","hits":"1","order":"486","possible_hits":"1",},
{"lineNum":"  922","line":"        if (index >= utf8_len) {","class":"lineCov","hits":"1","order":"487","possible_hits":"1",},
{"lineNum":"  923","line":"            return error.IndexOutOfBounds;","class":"lineCov","hits":"1","order":"502","possible_hits":"1",},
{"lineNum":"  924","line":"        }"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"        if ((-index) > utf8_len) {","class":"linePartCov","hits":"1","order":"488","possible_hits":"2",},
{"lineNum":"  927","line":"            return error.IndexOutOfBounds;","class":"lineCov","hits":"1","order":"504","possible_hits":"1",},
{"lineNum":"  928","line":"        }"},
{"lineNum":"  929","line":""},
{"lineNum":"  930","line":"        const char_pos: usize = if (index >= 0) @intCast(index) else (utf8_len - @as(usize, @intCast(-index)));","class":"lineCov","hits":"3","order":"489","possible_hits":"3",},
{"lineNum":"  931","line":""},
{"lineNum":"  932","line":"        var it = this.utf8_view.iterator();","class":"lineCov","hits":"1","order":"490","possible_hits":"1",},
{"lineNum":"  933","line":"        var unicode_char: u21 = undefined;","class":"lineCov","hits":"1","order":"491","possible_hits":"1",},
{"lineNum":"  934","line":"        for (0..utf8_len) |i| {","class":"lineCov","hits":"3","order":"492","possible_hits":"3",},
{"lineNum":"  935","line":"            if (it.nextCodepoint()) |uc| {","class":"lineCov","hits":"2","order":"493","possible_hits":"2",},
{"lineNum":"  936","line":"                unicode_char = uc;","class":"lineCov","hits":"1","order":"494","possible_hits":"1",},
{"lineNum":"  937","line":"            }"},
{"lineNum":"  938","line":"            if (i >= char_pos) {","class":"lineCov","hits":"1","order":"495","possible_hits":"1",},
{"lineNum":"  939","line":"                break;","class":"linePartCov","hits":"2","order":"498","possible_hits":"3",},
{"lineNum":"  940","line":"            }"},
{"lineNum":"  941","line":"        }"},
{"lineNum":"  942","line":"        return unicode_char;","class":"lineCov","hits":"1","order":"496","possible_hits":"1",},
{"lineNum":"  943","line":"    }"},
{"lineNum":"  944","line":""},
{"lineNum":"  945","line":"    // ** charAt"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"    /// different to Javascript\'s string.charAt, return u8 of index, as prefer utf-8 string. Same to Javascript,"},
{"lineNum":"  948","line":"    /// accept index as `i32`: when postive is from beginning; when negative is from ending; when `index == 0`, return"},
{"lineNum":"  949","line":"    /// the the first char if not empty."},
{"lineNum":"  950","line":"    pub fn charAt(this: *const JStringUnmanaged, index: isize) anyerror!u8 {","class":"lineCov","hits":"1","order":"467","possible_hits":"1",},
{"lineNum":"  951","line":"        if (index >= this.len()) {","class":"lineCov","hits":"1","order":"468","possible_hits":"1",},
{"lineNum":"  952","line":"            return error.IndexOutOfBounds;","class":"lineCov","hits":"1","order":"469","possible_hits":"1",},
{"lineNum":"  953","line":"        }"},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"        if ((-index) > this.len()) {","class":"linePartCov","hits":"1","order":"474","possible_hits":"2",},
{"lineNum":"  956","line":"            return error.IndexOutOfBounds;","class":"lineCov","hits":"1","order":"482","possible_hits":"1",},
{"lineNum":"  957","line":"        }"},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"        if (index >= 0) {","class":"lineCov","hits":"1","order":"475","possible_hits":"1",},
{"lineNum":"  960","line":"            return this.str_slice[@intCast(index)];","class":"lineCov","hits":"2","order":"476","possible_hits":"2",},
{"lineNum":"  961","line":"        } else {"},
{"lineNum":"  962","line":"            return this.str_slice[this.len() - @as(usize, @intCast(-index))];","class":"lineCov","hits":"2","order":"479","possible_hits":"2",},
{"lineNum":"  963","line":"        }"},
{"lineNum":"  964","line":"    }"},
{"lineNum":"  965","line":""},
{"lineNum":"  966","line":"    // ** charCodeAt"},
{"lineNum":"  967","line":""},
{"lineNum":"  968","line":"    /// charCodeAt does not make sense in zig, please use at or charAt!"},
{"lineNum":"  969","line":"    pub inline fn charCodeAt(this: *const JStringUnmanaged, index: isize) anyerror!u21 {"},
{"lineNum":"  970","line":"        _ = this;"},
{"lineNum":"  971","line":"        _ = index;"},
{"lineNum":"  972","line":"        @compileError(\"charCodeAt does not make sense in zig, please use at or charAt!\");"},
{"lineNum":"  973","line":"    }"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"    // ** codePointAt"},
{"lineNum":"  976","line":""},
{"lineNum":"  977","line":"    /// as in zig we use u21 for char, so codePointAt is a trival alias to at()."},
{"lineNum":"  978","line":"    pub inline fn codePointAt(this: *const JStringUnmanaged, index: isize) anyerror!u21 {"},
{"lineNum":"  979","line":"        _ = this;"},
{"lineNum":"  980","line":"        _ = index;"},
{"lineNum":"  981","line":"        @compileError(\"codePointAt does not make sense in zig, please use at or charAt!\");"},
{"lineNum":"  982","line":"    }"},
{"lineNum":"  983","line":""},
{"lineNum":"  984","line":"    // ** concat"},
{"lineNum":"  985","line":""},
{"lineNum":"  986","line":"    /// Concat jstrings with the other."},
{"lineNum":"  987","line":"    pub fn concat(this: *const JStringUnmanaged, allocator: std.mem.Allocator, other_jstring: JStringUnmanaged) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"340","possible_hits":"1",},
{"lineNum":"  988","line":"        return this.concatSlice(allocator, other_jstring.str_slice);","class":"lineCov","hits":"1","order":"341","possible_hits":"1",},
{"lineNum":"  989","line":"    }"},
{"lineNum":"  990","line":""},
{"lineNum":"  991","line":"    pub fn concatSlice(this: *const JStringUnmanaged, allocator: std.mem.Allocator, other_slice: []const u8) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"342","possible_hits":"1",},
{"lineNum":"  992","line":"        if (other_slice.len == 0) {","class":"lineCov","hits":"1","order":"343","possible_hits":"1",},
{"lineNum":"  993","line":"            return this.clone(allocator);","class":"lineCov","hits":"3","order":"375","possible_hits":"3",},
{"lineNum":"  994","line":"        } else {"},
{"lineNum":"  995","line":"            const this_len = this.len();","class":"lineCov","hits":"1","order":"344","possible_hits":"1",},
{"lineNum":"  996","line":"            const other_len = other_slice.len;","class":"lineCov","hits":"1","order":"345","possible_hits":"1",},
{"lineNum":"  997","line":"            const new_slice = try allocator.alloc(u8, this_len + other_len);","class":"linePartCov","hits":"1","order":"346","possible_hits":"2",},
{"lineNum":"  998","line":"            var new_slice_ptr = new_slice.ptr;","class":"lineCov","hits":"1","order":"347","possible_hits":"1",},
{"lineNum":"  999","line":"            @memcpy(new_slice_ptr, this.str_slice);","class":"lineCov","hits":"2","order":"348","possible_hits":"2",},
{"lineNum":" 1000","line":"            new_slice_ptr += this.str_slice.len;","class":"lineCov","hits":"1","order":"349","possible_hits":"1",},
{"lineNum":" 1001","line":"            @memcpy(new_slice_ptr, other_slice);","class":"lineCov","hits":"3","order":"350","possible_hits":"3",},
{"lineNum":" 1002","line":"            return JStringUnmanaged{","class":"lineCov","hits":"1","order":"351","possible_hits":"1",},
{"lineNum":" 1003","line":"                .str_slice = new_slice,"},
{"lineNum":" 1004","line":"            };"},
{"lineNum":" 1005","line":"        }"},
{"lineNum":" 1006","line":"    }"},
{"lineNum":" 1007","line":""},
{"lineNum":" 1008","line":"    /// Concat jstrings in rest_jstrings in order, return a new allocated jstring. If `rest_jstrings.len == 0`, will"},
{"lineNum":" 1009","line":"    /// return a copy of this jstring."},
{"lineNum":" 1010","line":"    pub fn concatMany(this: *const JStringUnmanaged, allocator: std.mem.Allocator, rest_jstrings: []const JStringUnmanaged) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"300","possible_hits":"1",},
{"lineNum":" 1011","line":"        if (rest_jstrings.len == 0) {","class":"lineCov","hits":"1","order":"301","possible_hits":"1",},
{"lineNum":" 1012","line":"            return this.clone(allocator);","class":"lineCov","hits":"3","order":"321","possible_hits":"3",},
{"lineNum":" 1013","line":"        } else {"},
{"lineNum":" 1014","line":"            var rest_sum_len: usize = 0;","class":"lineCov","hits":"1","order":"302","possible_hits":"1",},
{"lineNum":" 1015","line":"            const new_len = this.len() + lenbrk: {","class":"linePartCov","hits":"2","order":"303","possible_hits":"3",},
{"lineNum":" 1016","line":"                for (rest_jstrings) |jstring| {","class":"lineCov","hits":"3","order":"304","possible_hits":"3",},
{"lineNum":" 1017","line":"                    rest_sum_len += jstring.len();","class":"lineCov","hits":"3","order":"305","possible_hits":"3",},
{"lineNum":" 1018","line":"                }"},
{"lineNum":" 1019","line":"                break :lenbrk rest_sum_len;","class":"lineCov","hits":"1","order":"306","possible_hits":"1",},
{"lineNum":" 1020","line":"            };"},
{"lineNum":" 1021","line":""},
{"lineNum":" 1022","line":"            const new_slice = try allocator.alloc(u8, new_len);","class":"lineCov","hits":"1","order":"307","possible_hits":"1",},
{"lineNum":" 1023","line":"            var new_slice_ptr = new_slice.ptr;","class":"lineCov","hits":"1","order":"308","possible_hits":"1",},
{"lineNum":" 1024","line":"            @memcpy(new_slice_ptr, this.str_slice);","class":"lineCov","hits":"2","order":"309","possible_hits":"2",},
{"lineNum":" 1025","line":"            new_slice_ptr += this.str_slice.len;","class":"lineCov","hits":"1","order":"310","possible_hits":"1",},
{"lineNum":" 1026","line":"            for (rest_jstrings) |jstring| {","class":"lineCov","hits":"3","order":"311","possible_hits":"3",},
{"lineNum":" 1027","line":"                @memcpy(new_slice_ptr, jstring.str_slice);","class":"lineCov","hits":"3","order":"312","possible_hits":"3",},
{"lineNum":" 1028","line":"                new_slice_ptr += jstring.len();","class":"lineCov","hits":"4","order":"313","possible_hits":"4",},
{"lineNum":" 1029","line":"            }"},
{"lineNum":" 1030","line":"            return JStringUnmanaged{","class":"lineCov","hits":"1","order":"314","possible_hits":"1",},
{"lineNum":" 1031","line":"                .str_slice = new_slice,"},
{"lineNum":" 1032","line":"            };"},
{"lineNum":" 1033","line":"        }"},
{"lineNum":" 1034","line":"    }"},
{"lineNum":" 1035","line":""},
{"lineNum":" 1036","line":"    pub fn concatManySlices(this: *const JStringUnmanaged, allocator: std.mem.Allocator, rest_slices: []const []const u8) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"358","possible_hits":"1",},
{"lineNum":" 1037","line":"        if (rest_slices.len == 0) {","class":"lineCov","hits":"1","order":"359","possible_hits":"1",},
{"lineNum":" 1038","line":"            return this.clone(allocator);","class":"lineCov","hits":"3","order":"378","possible_hits":"3",},
{"lineNum":" 1039","line":"        } else {"},
{"lineNum":" 1040","line":"            var rest_sum_len: usize = 0;","class":"lineCov","hits":"1","order":"360","possible_hits":"1",},
{"lineNum":" 1041","line":"            const new_len = this.len() + lenbrk: {","class":"linePartCov","hits":"2","order":"361","possible_hits":"3",},
{"lineNum":" 1042","line":"                for (rest_slices) |s| {","class":"lineCov","hits":"3","order":"362","possible_hits":"3",},
{"lineNum":" 1043","line":"                    rest_sum_len += s.len;","class":"lineCov","hits":"2","order":"363","possible_hits":"2",},
{"lineNum":" 1044","line":"                }"},
{"lineNum":" 1045","line":"                break :lenbrk rest_sum_len;","class":"lineCov","hits":"1","order":"364","possible_hits":"1",},
{"lineNum":" 1046","line":"            };"},
{"lineNum":" 1047","line":""},
{"lineNum":" 1048","line":"            const new_slice = try allocator.alloc(u8, new_len);","class":"lineCov","hits":"1","order":"365","possible_hits":"1",},
{"lineNum":" 1049","line":"            var new_slice_ptr = new_slice.ptr;","class":"lineCov","hits":"1","order":"366","possible_hits":"1",},
{"lineNum":" 1050","line":"            @memcpy(new_slice_ptr, this.str_slice);","class":"lineCov","hits":"2","order":"367","possible_hits":"2",},
{"lineNum":" 1051","line":"            new_slice_ptr += this.str_slice.len;","class":"lineCov","hits":"1","order":"368","possible_hits":"1",},
{"lineNum":" 1052","line":"            for (rest_slices) |s| {","class":"lineCov","hits":"3","order":"369","possible_hits":"3",},
{"lineNum":" 1053","line":"                @memcpy(new_slice_ptr, s);","class":"lineCov","hits":"3","order":"370","possible_hits":"3",},
{"lineNum":" 1054","line":"                new_slice_ptr += s.len;","class":"lineCov","hits":"3","order":"371","possible_hits":"3",},
{"lineNum":" 1055","line":"            }"},
{"lineNum":" 1056","line":"            return JStringUnmanaged{","class":"lineCov","hits":"1","order":"372","possible_hits":"1",},
{"lineNum":" 1057","line":"                .str_slice = new_slice,"},
{"lineNum":" 1058","line":"            };"},
{"lineNum":" 1059","line":"        }"},
{"lineNum":" 1060","line":"    }"},
{"lineNum":" 1061","line":""},
{"lineNum":" 1062","line":"    /// Concat jstrings by format with fmt & .{ data }. It is a shortcut for first creating tmp str from"},
{"lineNum":" 1063","line":"    /// JStringUnmanaged.newFromFormat then second this.concat(tmp str). (or below psudeo code)"},
{"lineNum":" 1064","line":"    ///"},
{"lineNum":" 1065","line":"    /// ```"},
{"lineNum":" 1066","line":"    /// var tmp_jstring = JStringUnmanaged.newFromFormat(allocator, fmt, rest_items);"},
{"lineNum":" 1067","line":"    /// defer tmp_jstring.deinit(allocator);"},
{"lineNum":" 1068","line":"    /// const tmp_jstrings = []JStringUnmanaged{ tmp_jstring };"},
{"lineNum":" 1069","line":"    /// this.concat(allocator, &tmp_jstrings);"},
{"lineNum":" 1070","line":"    /// ```"},
{"lineNum":" 1071","line":"    pub fn concatFormat(this: *const JStringUnmanaged, allocator: std.mem.Allocator, comptime fmt: []const u8, rest_items: anytype) anyerror!JStringUnmanaged {","class":"lineCov","hits":"2","order":"325","possible_hits":"2",},
{"lineNum":" 1072","line":"        const ArgsType = @TypeOf(rest_items);"},
{"lineNum":" 1073","line":"        const args_type_info = @typeInfo(ArgsType);"},
{"lineNum":" 1074","line":"        if (args_type_info != .Struct) {"},
{"lineNum":" 1075","line":"            @compileError(\"expected tuple or struct argument, found \" ++ @typeName(ArgsType));"},
{"lineNum":" 1076","line":"        }"},
{"lineNum":" 1077","line":""},
{"lineNum":" 1078","line":"        const fields_info = args_type_info.Struct.fields;"},
{"lineNum":" 1079","line":"        if (fields_info.len > @typeInfo(u32).Int.bits) {"},
{"lineNum":" 1080","line":"            @compileError(\"32 arguments max are supported per format call\");"},
{"lineNum":" 1081","line":"        }"},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"        if (rest_items.len == 0) {"},
{"lineNum":" 1084","line":"            return this.clone(allocator);"},
{"lineNum":" 1085","line":"        } else {"},
{"lineNum":" 1086","line":"            var rest_items_jstring = try JStringUnmanaged.newFromFormat(allocator, fmt, rest_items);","class":"lineCov","hits":"2","order":"326","possible_hits":"2",},
{"lineNum":" 1087","line":"            defer rest_items_jstring.deinit(allocator);","class":"lineCov","hits":"2","order":"329","possible_hits":"2",},
{"lineNum":" 1088","line":"            var rest_items_jstrings = [1]JStringUnmanaged{rest_items_jstring};","class":"lineCov","hits":"2","order":"327","possible_hits":"2",},
{"lineNum":" 1089","line":"            return this.concatMany(allocator, &rest_items_jstrings);","class":"lineCov","hits":"4","order":"328","possible_hits":"4",},
{"lineNum":" 1090","line":"        }"},
{"lineNum":" 1091","line":"    }"},
{"lineNum":" 1092","line":""},
{"lineNum":" 1093","line":"    /// Similar to concatFormat, but try to auto gen fmt from rest_items."},
{"lineNum":" 1094","line":"    pub fn concatTuple(this: *const JStringUnmanaged, allocator: std.mem.Allocator, rest_items: anytype) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"336","possible_hits":"1",},
{"lineNum":" 1095","line":"        const ArgsType = @TypeOf(rest_items);"},
{"lineNum":" 1096","line":"        const args_type_info = @typeInfo(ArgsType);"},
{"lineNum":" 1097","line":"        if (args_type_info != .Struct) {"},
{"lineNum":" 1098","line":"            @compileError(\"expected tuple or struct argument, found \" ++ @typeName(ArgsType));"},
{"lineNum":" 1099","line":"        }"},
{"lineNum":" 1100","line":""},
{"lineNum":" 1101","line":"        const fields_info = args_type_info.Struct.fields;"},
{"lineNum":" 1102","line":"        if (fields_info.len > @typeInfo(u32).Int.bits) {"},
{"lineNum":" 1103","line":"            @compileError(\"32 arguments max are supported per format call\");"},
{"lineNum":" 1104","line":"        }"},
{"lineNum":" 1105","line":""},
{"lineNum":" 1106","line":"        // max 32 arguments, and each of them will not have long (<8) specifier"},
{"lineNum":" 1107","line":"        comptime var fmt_buf: [8 * 32]u8 = undefined;"},
{"lineNum":" 1108","line":"        _ = &fmt_buf;"},
{"lineNum":" 1109","line":"        comptime var fmt_len: usize = 0;"},
{"lineNum":" 1110","line":"        comptime {"},
{"lineNum":" 1111","line":"            var fmt_print_slice: []u8 = fmt_buf[0..];"},
{"lineNum":" 1112","line":"            for (fields_info) |field_info| {"},
{"lineNum":" 1113","line":"                _bufPrintFmt(@typeInfo(field_info.type), &fmt_buf, &fmt_len, &fmt_print_slice);"},
{"lineNum":" 1114","line":"            }"},
{"lineNum":" 1115","line":"        }"},
{"lineNum":" 1116","line":"        // std.debug.print(\"\\n{s}\\n\", .{fmt_buf[0..fmt_len]});"},
{"lineNum":" 1117","line":"        return this.concatFormat(allocator, fmt_buf[0..fmt_len], rest_items);","class":"lineCov","hits":"1","order":"337","possible_hits":"1",},
{"lineNum":" 1118","line":"    }"},
{"lineNum":" 1119","line":""},
{"lineNum":" 1120","line":"    // ** endsWith"},
{"lineNum":" 1121","line":""},
{"lineNum":" 1122","line":"    pub inline fn endsWith(this: *const JStringUnmanaged, suffix: JStringUnmanaged) bool {"},
{"lineNum":" 1123","line":"        return this.endsWithSlice(suffix.str_slice);","class":"lineCov","hits":"2","order":"396","possible_hits":"2",},
{"lineNum":" 1124","line":"    }"},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"    pub fn endsWithSlice(this: *const JStringUnmanaged, suffix_slice: []const u8) bool {","class":"lineCov","hits":"1","order":"397","possible_hits":"1",},
{"lineNum":" 1127","line":"        if (this.len() < suffix_slice.len) {","class":"lineCov","hits":"2","order":"398","possible_hits":"2",},
{"lineNum":" 1128","line":"            return false;","class":"lineCov","hits":"1","order":"403","possible_hits":"1",},
{"lineNum":" 1129","line":"        }"},
{"lineNum":" 1130","line":"        return std.mem.eql(u8, this.str_slice[this.str_slice.len - suffix_slice.len ..], suffix_slice);","class":"linePartCov","hits":"1","order":"399","possible_hits":"2",},
{"lineNum":" 1131","line":"    }"},
{"lineNum":" 1132","line":""},
{"lineNum":" 1133","line":"    // ** fromCharCode"},
{"lineNum":" 1134","line":""},
{"lineNum":" 1135","line":"    /// zig supports utf-8 natively, use newFromSlice instead."},
{"lineNum":" 1136","line":"    pub fn fromCharCode() JStringUnmanaged {"},
{"lineNum":" 1137","line":"        @compileError(\"zig supports utf-8 natively, use newFromSlice instead.\");"},
{"lineNum":" 1138","line":"    }"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"    // ** fromCodePoint"},
{"lineNum":" 1141","line":""},
{"lineNum":" 1142","line":"    /// zig supports utf-8 natively, use newFromSlice instead."},
{"lineNum":" 1143","line":"    pub fn fromCodePoint() JStringUnmanaged {"},
{"lineNum":" 1144","line":"        @compileError(\"zig supports utf-8 natively, use newFromSlice instead.\");"},
{"lineNum":" 1145","line":"    }"},
{"lineNum":" 1146","line":""},
{"lineNum":" 1147","line":"    // ** includes"},
{"lineNum":" 1148","line":""},
{"lineNum":" 1149","line":"    pub inline fn includes(this: *const JStringUnmanaged, needle_slice: []const u8, pos: usize) bool {"},
{"lineNum":" 1150","line":"        return this._naive_indexOf(needle_slice, pos, false) >= 0;","class":"lineCov","hits":"3","order":"620","possible_hits":"3",},
{"lineNum":" 1151","line":"    }"},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"    pub inline fn fastIncludes(this: *const JStringUnmanaged, allocator: std.mem.Allocator, needle_slice: []const u8, pos: usize) bool {"},
{"lineNum":" 1154","line":"        const i = this._kmp_indexOf(allocator, needle_slice, pos, false) catch unreachable;","class":"lineCov","hits":"4","order":"676","possible_hits":"4",},
{"lineNum":" 1155","line":"        return i >= 0;","class":"lineCov","hits":"2","order":"677","possible_hits":"2",},
{"lineNum":" 1156","line":"    }"},
{"lineNum":" 1157","line":""},
{"lineNum":" 1158","line":"    // ** indexOf"},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"    /// The indexOf() method searches this string and returns the index of the first occurrence of the specified"},
{"lineNum":" 1161","line":"    /// substring. It takes an starting position and returns the first occurrence of the specified substring at an index"},
{"lineNum":" 1162","line":"    /// greater than or equal to the specified number."},
{"lineNum":" 1163","line":"    pub inline fn indexOf(this: *const JStringUnmanaged, needle_slice: []const u8, pos: usize) isize {"},
{"lineNum":" 1164","line":"        return this._naive_indexOf(needle_slice, pos, false);","class":"lineCov","hits":"12","order":"595","possible_hits":"12",},
{"lineNum":" 1165","line":"    }"},
{"lineNum":" 1166","line":""},
{"lineNum":" 1167","line":"    /// Fast version of indexOf as it uses KMP algorithm for searching. Will result in O(this.len+needle_slice.len) but"},
{"lineNum":" 1168","line":"    /// also requires allocator for creating KMP lookup table."},
{"lineNum":" 1169","line":"    pub inline fn fastIndexOf(this: *const JStringUnmanaged, allocator: std.mem.Allocator, needle_slice: []const u8, pos: usize) anyerror!isize {"},
{"lineNum":" 1170","line":"        return this._kmp_indexOf(allocator, needle_slice, pos, false);","class":"lineCov","hits":"9","order":"624","possible_hits":"9",},
{"lineNum":" 1171","line":"    }"},
{"lineNum":" 1172","line":""},
{"lineNum":" 1173","line":"    fn _naive_indexOf(this: *const JStringUnmanaged, needle_slice: []const u8, pos: usize, want_last: bool) isize {","class":"lineCov","hits":"1","order":"596","possible_hits":"1",},
{"lineNum":" 1174","line":"        if (needle_slice.len == 0) {","class":"lineCov","hits":"1","order":"597","possible_hits":"1",},
{"lineNum":" 1175","line":"            if (want_last) {","class":"lineCov","hits":"1","order":"614","possible_hits":"1",},
{"lineNum":" 1176","line":"                return @as(isize, @intCast(this.len() - 1));","class":"linePartCov","hits":"2","order":"617","possible_hits":"3",},
{"lineNum":" 1177","line":"            } else {"},
{"lineNum":" 1178","line":"                return @as(isize, @intCast(pos));","class":"lineCov","hits":"3","order":"598","possible_hits":"3",},
{"lineNum":" 1179","line":"            }"},
{"lineNum":" 1180","line":"        }"},
{"lineNum":" 1181","line":""},
{"lineNum":" 1182","line":"        if (this.str_slice.len < needle_slice.len) {","class":"lineCov","hits":"1","order":"599","possible_hits":"1",},
{"lineNum":" 1183","line":"            return -1;","class":"lineCov","hits":"1","order":"687","possible_hits":"1",},
{"lineNum":" 1184","line":"        }"},
{"lineNum":" 1185","line":""},
{"lineNum":" 1186","line":"        var occurence: isize = -1;","class":"lineCov","hits":"1","order":"600","possible_hits":"1",},
{"lineNum":" 1187","line":"        const haystack_slice = this.str_slice[pos..];","class":"lineCov","hits":"3","order":"601","possible_hits":"3",},
{"lineNum":" 1188","line":"        var k: usize = 0;","class":"lineCov","hits":"1","order":"602","possible_hits":"1",},
{"lineNum":" 1189","line":"        while (k < haystack_slice.len - needle_slice.len + 1) : (k += 1) {","class":"linePartCov","hits":"2","order":"603","possible_hits":"3",},
{"lineNum":" 1190","line":"            if (std.mem.eql(u8, haystack_slice[k .. k + needle_slice.len], needle_slice)) {","class":"linePartCov","hits":"1","order":"604","possible_hits":"2",},
{"lineNum":" 1191","line":"                occurence = @as(isize, @intCast(k));","class":"lineCov","hits":"3","order":"605","possible_hits":"3",},
{"lineNum":" 1192","line":"                if (!want_last) {","class":"lineCov","hits":"1","order":"606","possible_hits":"1",},
{"lineNum":" 1193","line":"                    return if (occurence >= 0) @as(isize, @intCast(pos)) + occurence else occurence;","class":"lineCov","hits":"3","order":"609","possible_hits":"3",},
{"lineNum":" 1194","line":"                }"},
{"lineNum":" 1195","line":"            } else continue;"},
{"lineNum":" 1196","line":"        }"},
{"lineNum":" 1197","line":"        return if (occurence >= 0) @as(isize, @intCast(pos)) + occurence else occurence;","class":"lineCov","hits":"2","order":"610","possible_hits":"2",},
{"lineNum":" 1198","line":"    }"},
{"lineNum":" 1199","line":""},
{"lineNum":" 1200","line":"    fn _kmp_indexOf(this: *const JStringUnmanaged, allocator: std.mem.Allocator, needle_slice: []const u8, pos: usize, want_last: bool) anyerror!isize {","class":"lineCov","hits":"1","order":"625","possible_hits":"1",},
{"lineNum":" 1201","line":"        if (needle_slice.len == 0) {","class":"lineCov","hits":"1","order":"626","possible_hits":"1",},
{"lineNum":" 1202","line":"            if (want_last) {","class":"lineCov","hits":"1","order":"670","possible_hits":"1",},
{"lineNum":" 1203","line":"                return @as(isize, @intCast(this.len() - 1));","class":"linePartCov","hits":"2","order":"673","possible_hits":"3",},
{"lineNum":" 1204","line":"            } else {"},
{"lineNum":" 1205","line":"                return @as(isize, @intCast(pos));","class":"lineCov","hits":"3","order":"627","possible_hits":"3",},
{"lineNum":" 1206","line":"            }"},
{"lineNum":" 1207","line":"        }"},
{"lineNum":" 1208","line":""},
{"lineNum":" 1209","line":"        if (pos >= this.len() or pos + needle_slice.len > this.len()) {","class":"lineCov","hits":"2","order":"628","possible_hits":"2",},
{"lineNum":" 1210","line":"            return -1;","class":"lineCov","hits":"1","order":"680","possible_hits":"1",},
{"lineNum":" 1211","line":"        }"},
{"lineNum":" 1212","line":""},
{"lineNum":" 1213","line":"        var occurence: isize = -1;","class":"lineCov","hits":"1","order":"629","possible_hits":"1",},
{"lineNum":" 1214","line":"        const haystack_slice = this.str_slice[pos..];","class":"lineCov","hits":"3","order":"630","possible_hits":"3",},
{"lineNum":" 1215","line":""},
{"lineNum":" 1216","line":"        const t = try _kmpBuildFailureTable(allocator, needle_slice);","class":"linePartCov","hits":"1","order":"631","possible_hits":"2",},
{"lineNum":" 1217","line":"        defer allocator.free(t);","class":"lineCov","hits":"1","order":"660","possible_hits":"1",},
{"lineNum":" 1218","line":""},
{"lineNum":" 1219","line":"        var j: usize = 0;","class":"lineCov","hits":"1","order":"647","possible_hits":"1",},
{"lineNum":" 1220","line":"        var k: usize = 0;","class":"lineCov","hits":"1","order":"648","possible_hits":"1",},
{"lineNum":" 1221","line":"        while (j < haystack_slice.len) {","class":"lineCov","hits":"1","order":"649","possible_hits":"1",},
{"lineNum":" 1222","line":"            if (needle_slice[k] == haystack_slice[j]) {","class":"lineCov","hits":"2","order":"650","possible_hits":"2",},
{"lineNum":" 1223","line":"                j += 1;","class":"linePartCov","hits":"1","order":"651","possible_hits":"2",},
{"lineNum":" 1224","line":"                k += 1;","class":"lineCov","hits":"1","order":"652","possible_hits":"1",},
{"lineNum":" 1225","line":"                if (k == needle_slice.len) {","class":"lineCov","hits":"1","order":"653","possible_hits":"1",},
{"lineNum":" 1226","line":"                    if (!want_last) {","class":"lineCov","hits":"1","order":"656","possible_hits":"1",},
{"lineNum":" 1227","line":"                        occurence = @as(isize, @intCast(j)) - @as(isize, @intCast(k));","class":"lineCov","hits":"2","order":"657","possible_hits":"2",},
{"lineNum":" 1228","line":"                        break;","class":"lineCov","hits":"1","order":"658","possible_hits":"1",},
{"lineNum":" 1229","line":"                    } else {"},
{"lineNum":" 1230","line":"                        occurence = @as(isize, @intCast(j)) - @as(isize, @intCast(k));","class":"lineCov","hits":"2","order":"663","possible_hits":"2",},
{"lineNum":" 1231","line":"                        k = if (t[k] >= 0) @as(usize, @intCast(t[k])) else unreachable;","class":"lineCov","hits":"3","order":"654","possible_hits":"3",},
{"lineNum":" 1232","line":"                    }"},
{"lineNum":" 1233","line":"                }"},
{"lineNum":" 1234","line":"            } else {"},
{"lineNum":" 1235","line":"                if (t[k] < 0) {","class":"lineCov","hits":"2","order":"664","possible_hits":"2",},
{"lineNum":" 1236","line":"                    j += 1;","class":"linePartCov","hits":"1","order":"665","possible_hits":"2",},
{"lineNum":" 1237","line":"                    k = @as(usize, @intCast(t[k] + 1));","class":"lineCov","hits":"1","order":"666","possible_hits":"1",},
{"lineNum":" 1238","line":"                } else {"},
{"lineNum":" 1239","line":"                    k = @as(usize, @intCast(t[k]));","class":"linePartCov","hits":"3","order":"655","possible_hits":"5",},
{"lineNum":" 1240","line":"                }"},
{"lineNum":" 1241","line":"            }"},
{"lineNum":" 1242","line":"        }"},
{"lineNum":" 1243","line":""},
{"lineNum":" 1244","line":"        return if (occurence >= 0) @as(isize, @intCast(pos)) + occurence else occurence;","class":"lineCov","hits":"2","order":"659","possible_hits":"2",},
{"lineNum":" 1245","line":"    }"},
{"lineNum":" 1246","line":""},
{"lineNum":" 1247","line":"    // ** isWellFormed"},
{"lineNum":" 1248","line":""},
{"lineNum":" 1249","line":"    /// similar to definition in javascript, but with difference that we are checking utf8."},
{"lineNum":" 1250","line":"    pub fn isWellFormed(this: *JStringUnmanaged) bool {","class":"lineCov","hits":"1","order":"1718","possible_hits":"1",},
{"lineNum":" 1251","line":"        _ = this.utf8Len() catch {","class":"lineCov","hits":"2","order":"1719","possible_hits":"2",},
{"lineNum":" 1252","line":"            return false;","class":"lineCov","hits":"1","order":"1720","possible_hits":"1",},
{"lineNum":" 1253","line":"        };"},
{"lineNum":" 1254","line":"        return true;","class":"lineCov","hits":"1","order":"1723","possible_hits":"1",},
{"lineNum":" 1255","line":"    }"},
{"lineNum":" 1256","line":""},
{"lineNum":" 1257","line":"    // ** lastIndexOf"},
{"lineNum":" 1258","line":""},
{"lineNum":" 1259","line":"    /// The lastIndexOf() method searches this string and returns the index of the last occurrence of the specified"},
{"lineNum":" 1260","line":"    /// substring. It takes an optional starting position and returns the last occurrence of the specified substring at"},
{"lineNum":" 1261","line":"    /// an index less than or equal to the specified number."},
{"lineNum":" 1262","line":"    pub inline fn lastIndexOf(this: *const JStringUnmanaged, needle_slice: []const u8, pos: usize) isize {"},
{"lineNum":" 1263","line":"        return this._naive_indexOf(needle_slice, pos, true);","class":"lineCov","hits":"4","order":"608","possible_hits":"4",},
{"lineNum":" 1264","line":"    }"},
{"lineNum":" 1265","line":""},
{"lineNum":" 1266","line":"    pub inline fn fastLastIndexOf(this: *const JStringUnmanaged, allocator: std.mem.Allocator, needle_slice: []const u8, pos: usize) anyerror!isize {"},
{"lineNum":" 1267","line":"        return this._kmp_indexOf(allocator, needle_slice, pos, true);","class":"lineCov","hits":"4","order":"662","possible_hits":"4",},
{"lineNum":" 1268","line":"    }"},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"    // ** localeCompare"},
{"lineNum":" 1271","line":""},
{"lineNum":" 1272","line":"    /// Not implemented! Does this method make sense in zig?"},
{"lineNum":" 1273","line":"    pub fn localeCompare(this: *const JStringUnmanaged) bool {"},
{"lineNum":" 1274","line":"        _ = this;"},
{"lineNum":" 1275","line":"        @compileError(\"Not implemented! Does localeCompare make sense in zig?\");"},
{"lineNum":" 1276","line":"    }"},
{"lineNum":" 1277","line":""},
{"lineNum":" 1278","line":"    // ** match"},
{"lineNum":" 1279","line":""},
{"lineNum":" 1280","line":"    /// Thin wrap of Regex\'s match against this.str_slice as search subject. The regex syntax used is pcre2, can read"},
{"lineNum":" 1281","line":"    /// here: https://pcre2project.github.io/pcre2/doc/html/pcre2pattern.html, or try it here: https://regex101.com/"},
{"lineNum":" 1282","line":"    pub inline fn match(this: *const JStringUnmanaged, allocator: std.mem.Allocator, pattern: []const u8, offset: usize, fetch_results: bool, regex_options: u32, match_options: u32) anyerror!RegexUnmanaged {"},
{"lineNum":" 1283","line":"        if (enable_pcre) {"},
{"lineNum":" 1284","line":"            var re = try RegexUnmanaged.init(allocator, pattern, regex_options);","class":"linePartCov","hits":"2","order":"1358","possible_hits":"4",},
{"lineNum":" 1285","line":"            try re.match(allocator, this.str_slice, offset, fetch_results, match_options);","class":"lineCov","hits":"2","order":"1359","possible_hits":"2",},
{"lineNum":" 1286","line":"            return re;","class":"lineCov","hits":"4","order":"1360","possible_hits":"4",},
{"lineNum":" 1287","line":"        } else {"},
{"lineNum":" 1288","line":"            @compileError(\"disabled by comptime var `enable_pcre`, set it true to enable.\");"},
{"lineNum":" 1289","line":"        }"},
{"lineNum":" 1290","line":"    }"},
{"lineNum":" 1291","line":""},
{"lineNum":" 1292","line":"    // ** matchAll"},
{"lineNum":" 1293","line":""},
{"lineNum":" 1294","line":"    /// Thin wrap of Regex\'s matchAll against this.str_slice as search subject. The regex syntax used is pcre2, can read"},
{"lineNum":" 1295","line":"    /// here: https://pcre2project.github.io/pcre2/doc/html/pcre2pattern.html, or try it here: https://regex101.com/"},
{"lineNum":" 1296","line":"    pub inline fn matchAll(this: *const JStringUnmanaged, allocator: std.mem.Allocator, pattern: []const u8, offset: usize, regex_options: u32, match_options: u32) anyerror!RegexUnmanaged {"},
{"lineNum":" 1297","line":"        if (enable_pcre) {"},
{"lineNum":" 1298","line":"            var re = try RegexUnmanaged.init(allocator, pattern, regex_options);","class":"linePartCov","hits":"2","order":"1382","possible_hits":"4",},
{"lineNum":" 1299","line":"            try re.matchAll(allocator, this.str_slice, offset, match_options);","class":"lineCov","hits":"2","order":"1383","possible_hits":"2",},
{"lineNum":" 1300","line":"            return re;","class":"lineCov","hits":"4","order":"1384","possible_hits":"4",},
{"lineNum":" 1301","line":"        } else {"},
{"lineNum":" 1302","line":"            @compileError(\"disabled by comptime var `enable_pcre`, set it true to enable.\");"},
{"lineNum":" 1303","line":"        }"},
{"lineNum":" 1304","line":"    }"},
{"lineNum":" 1305","line":""},
{"lineNum":" 1306","line":"    // ** normalize"},
{"lineNum":" 1307","line":""},
{"lineNum":" 1308","line":"    /// Not implemented! Does normalize make sense in zig?"},
{"lineNum":" 1309","line":"    pub fn normalize(this: *const JStringUnmanaged) JStringUnmanaged {"},
{"lineNum":" 1310","line":"        _ = this;"},
{"lineNum":" 1311","line":"        @compileError(\"Not implemented! Does normalize make sense in zig?\");"},
{"lineNum":" 1312","line":"    }"},
{"lineNum":" 1313","line":""},
{"lineNum":" 1314","line":"    // ** padEnd"},
{"lineNum":" 1315","line":""},
{"lineNum":" 1316","line":"    /// The padEnd method creates a new string by padding this string with a given slice (repeated, if needed) so that"},
{"lineNum":" 1317","line":"    /// the resulting string reaches a given length. The padding is applied from the end of this string. If padString is"},
{"lineNum":" 1318","line":"    /// too long to stay within targetLength, it will be truncated from the beginning."},
{"lineNum":" 1319","line":"    pub fn padEnd(this: *const JStringUnmanaged, allocator: std.mem.Allocator, wanted_len: usize, pad_slice: []const u8) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"566","possible_hits":"1",},
{"lineNum":" 1320","line":"        if (this.len() >= wanted_len) {","class":"lineCov","hits":"1","order":"567","possible_hits":"1",},
{"lineNum":" 1321","line":"            return this.clone(allocator);","class":"lineCov","hits":"2","order":"584","possible_hits":"2",},
{"lineNum":" 1322","line":"        }"},
{"lineNum":" 1323","line":""},
{"lineNum":" 1324","line":"        var wanted_slice = try allocator.alloc(u8, wanted_len);","class":"linePartCov","hits":"1","order":"568","possible_hits":"2",},
{"lineNum":" 1325","line":""},
{"lineNum":" 1326","line":"        const wanted_pad_len = wanted_len - this.len();","class":"lineCov","hits":"2","order":"569","possible_hits":"2",},
{"lineNum":" 1327","line":"        const count = @divTrunc(wanted_pad_len, pad_slice.len);","class":"lineCov","hits":"2","order":"570","possible_hits":"2",},
{"lineNum":" 1328","line":"        const residual_len = wanted_pad_len % pad_slice.len;","class":"lineCov","hits":"3","order":"571","possible_hits":"3",},
{"lineNum":" 1329","line":"        var target_slice = wanted_slice[0..this.str_slice.len];","class":"lineCov","hits":"3","order":"572","possible_hits":"3",},
{"lineNum":" 1330","line":"        @memcpy(target_slice, this.str_slice);","class":"lineCov","hits":"3","order":"573","possible_hits":"3",},
{"lineNum":" 1331","line":"        target_slice = wanted_slice[wanted_len - residual_len ..];","class":"linePartCov","hits":"2","order":"574","possible_hits":"3",},
{"lineNum":" 1332","line":"        @memcpy(target_slice, pad_slice[0..residual_len]);","class":"lineCov","hits":"3","order":"575","possible_hits":"3",},
{"lineNum":" 1333","line":"        for (0..count) |i| {","class":"lineCov","hits":"3","order":"576","possible_hits":"3",},
{"lineNum":" 1334","line":"            target_slice = wanted_slice[this.str_slice.len + i * pad_slice.len .. wanted_len - residual_len];","class":"linePartCov","hits":"2","order":"577","possible_hits":"3",},
{"lineNum":" 1335","line":"            @memcpy(target_slice, pad_slice);","class":"lineCov","hits":"4","order":"578","possible_hits":"4",},
{"lineNum":" 1336","line":"        }"},
{"lineNum":" 1337","line":"        return JStringUnmanaged{","class":"lineCov","hits":"1","order":"579","possible_hits":"1",},
{"lineNum":" 1338","line":"            .str_slice = wanted_slice,"},
{"lineNum":" 1339","line":"        };"},
{"lineNum":" 1340","line":"    }"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"    /// JString version of padEnd, accept pad_string (*const JStringUnmanaged) instead of slice."},
{"lineNum":" 1343","line":"    pub inline fn padEndJString(this: *const JStringUnmanaged, allocator: std.mem.Allocator, wanted_len: usize, pad_string: *const JStringUnmanaged) anyerror!JStringUnmanaged {"},
{"lineNum":" 1344","line":"        return this.padEnd(allocator, wanted_len, pad_string.str_slice);"},
{"lineNum":" 1345","line":"    }"},
{"lineNum":" 1346","line":""},
{"lineNum":" 1347","line":"    // ** padStart"},
{"lineNum":" 1348","line":""},
{"lineNum":" 1349","line":"    /// The padStart() method creates a new string by padding this string with another slice (multiple times, if needed)"},
{"lineNum":" 1350","line":"    /// until the resulting string reaches the given length. The padding is applied from the start of this string. If"},
{"lineNum":" 1351","line":"    /// pad_slice is too long to stay within the wanted_len, it will be truncated from the end."},
{"lineNum":" 1352","line":"    pub fn padStart(this: *const JStringUnmanaged, allocator: std.mem.Allocator, wanted_len: usize, pad_slice: []const u8) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"544","possible_hits":"1",},
{"lineNum":" 1353","line":"        if (this.len() >= wanted_len) {","class":"lineCov","hits":"1","order":"545","possible_hits":"1",},
{"lineNum":" 1354","line":"            return this.clone(allocator);","class":"lineCov","hits":"2","order":"562","possible_hits":"2",},
{"lineNum":" 1355","line":"        }"},
{"lineNum":" 1356","line":""},
{"lineNum":" 1357","line":"        var wanted_slice = try allocator.alloc(u8, wanted_len);","class":"linePartCov","hits":"1","order":"546","possible_hits":"2",},
{"lineNum":" 1358","line":""},
{"lineNum":" 1359","line":"        const wanted_pad_len = wanted_len - this.len();","class":"lineCov","hits":"2","order":"547","possible_hits":"2",},
{"lineNum":" 1360","line":"        const count = @divTrunc(wanted_pad_len, pad_slice.len);","class":"lineCov","hits":"2","order":"548","possible_hits":"2",},
{"lineNum":" 1361","line":"        const residual_len = wanted_pad_len % pad_slice.len;","class":"lineCov","hits":"3","order":"549","possible_hits":"3",},
{"lineNum":" 1362","line":"        var target_slice = wanted_slice[wanted_pad_len..];","class":"lineCov","hits":"3","order":"550","possible_hits":"3",},
{"lineNum":" 1363","line":"        @memcpy(target_slice, this.str_slice);","class":"lineCov","hits":"3","order":"551","possible_hits":"3",},
{"lineNum":" 1364","line":"        target_slice = wanted_slice[0..residual_len];","class":"lineCov","hits":"3","order":"552","possible_hits":"3",},
{"lineNum":" 1365","line":"        @memcpy(target_slice, pad_slice[pad_slice.len - residual_len ..]);","class":"linePartCov","hits":"2","order":"553","possible_hits":"3",},
{"lineNum":" 1366","line":"        for (0..count) |i| {","class":"lineCov","hits":"3","order":"554","possible_hits":"3",},
{"lineNum":" 1367","line":"            target_slice = wanted_slice[residual_len + i * pad_slice.len .. wanted_pad_len];","class":"linePartCov","hits":"2","order":"555","possible_hits":"3",},
{"lineNum":" 1368","line":"            @memcpy(target_slice, pad_slice);","class":"lineCov","hits":"4","order":"556","possible_hits":"4",},
{"lineNum":" 1369","line":"        }"},
{"lineNum":" 1370","line":""},
{"lineNum":" 1371","line":"        return JStringUnmanaged{","class":"lineCov","hits":"1","order":"557","possible_hits":"1",},
{"lineNum":" 1372","line":"            .str_slice = wanted_slice,"},
{"lineNum":" 1373","line":"        };"},
{"lineNum":" 1374","line":"    }"},
{"lineNum":" 1375","line":""},
{"lineNum":" 1376","line":"    /// JString version of padStart, accept pad_string (*const JStringUnmanaged) instead of slice."},
{"lineNum":" 1377","line":"    pub inline fn padStartJString(this: *const JStringUnmanaged, allocator: std.mem.Allocator, wanted_len: usize, pad_string: *const JStringUnmanaged) anyerror!JStringUnmanaged {"},
{"lineNum":" 1378","line":"        return this.padStart(allocator, wanted_len, pad_string.str_slice);"},
{"lineNum":" 1379","line":"    }"},
{"lineNum":" 1380","line":""},
{"lineNum":" 1381","line":"    // ** raw"},
{"lineNum":" 1382","line":""},
{"lineNum":" 1383","line":"    /// zig has no template literals like javascript, use newFromSlice/newFromFormat/newFromTuple instead."},
{"lineNum":" 1384","line":"    pub fn raw() JStringUnmanaged {"},
{"lineNum":" 1385","line":"        @compileError(\"zig has no template literals like javascript, use newFromSlice/newFromFormat/newFromTuple instead.\");"},
{"lineNum":" 1386","line":"    }"},
{"lineNum":" 1387","line":""},
{"lineNum":" 1388","line":"    // ** repeat"},
{"lineNum":" 1389","line":""},
{"lineNum":" 1390","line":"    /// repeat current string for `count` times and return as a new string."},
{"lineNum":" 1391","line":"    pub fn repeat(this: *const JStringUnmanaged, allocator: std.mem.Allocator, count: usize) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"695","possible_hits":"1",},
{"lineNum":" 1392","line":"        if (count == 0 or this.len() == 0) {","class":"lineCov","hits":"2","order":"696","possible_hits":"2",},
{"lineNum":" 1393","line":"            return JStringUnmanaged.newEmpty(allocator);","class":"lineCov","hits":"1","order":"706","possible_hits":"1",},
{"lineNum":" 1394","line":"        }"},
{"lineNum":" 1395","line":""},
{"lineNum":" 1396","line":"        const new_len = this.len() * count;","class":"linePartCov","hits":"2","order":"697","possible_hits":"3",},
{"lineNum":" 1397","line":"        const new_slice = try allocator.alloc(u8, new_len);","class":"lineCov","hits":"1","order":"698","possible_hits":"1",},
{"lineNum":" 1398","line":"        var target_slice: []u8 = undefined;","class":"lineCov","hits":"1","order":"699","possible_hits":"1",},
{"lineNum":" 1399","line":"        for (0..count) |i| {","class":"lineCov","hits":"3","order":"700","possible_hits":"3",},
{"lineNum":" 1400","line":"            target_slice = new_slice[i * this.len() .. (i + 1) * this.len()];","class":"linePartCov","hits":"4","order":"701","possible_hits":"5",},
{"lineNum":" 1401","line":"            @memcpy(target_slice, this.str_slice);","class":"lineCov","hits":"4","order":"702","possible_hits":"4",},
{"lineNum":" 1402","line":"        }"},
{"lineNum":" 1403","line":"        return JStringUnmanaged{","class":"lineCov","hits":"1","order":"703","possible_hits":"1",},
{"lineNum":" 1404","line":"            .str_slice = new_slice,"},
{"lineNum":" 1405","line":"        };"},
{"lineNum":" 1406","line":"    }"},
{"lineNum":" 1407","line":""},
{"lineNum":" 1408","line":"    // ** replace"},
{"lineNum":" 1409","line":""},
{"lineNum":" 1410","line":"    pub fn replace(this: *const JStringUnmanaged, allocator: std.mem.Allocator, pattern: []const u8, replacement_slice: []const u8) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"1575","possible_hits":"1",},
{"lineNum":" 1411","line":"        return this._replace(allocator, pattern, replacement_slice, false);","class":"lineCov","hits":"1","order":"1576","possible_hits":"1",},
{"lineNum":" 1412","line":"    }"},
{"lineNum":" 1413","line":""},
{"lineNum":" 1414","line":"    pub fn replaceByRegex(this: *const JStringUnmanaged, allocator: std.mem.Allocator, pattern: []const u8, replacement_slice: []const u8) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"1634","possible_hits":"1",},
{"lineNum":" 1415","line":"        return this._replaceByRegex(allocator, pattern, replacement_slice, false);","class":"lineCov","hits":"1","order":"1635","possible_hits":"1",},
{"lineNum":" 1416","line":"    }"},
{"lineNum":" 1417","line":""},
{"lineNum":" 1418","line":"    // ** replaceAll"},
{"lineNum":" 1419","line":""},
{"lineNum":" 1420","line":"    pub fn replaceAll(this: *const JStringUnmanaged, allocator: std.mem.Allocator, pattern: []const u8, replacement_slice: []const u8) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"1618","possible_hits":"1",},
{"lineNum":" 1421","line":"        return this._replace(allocator, pattern, replacement_slice, true);","class":"lineCov","hits":"1","order":"1619","possible_hits":"1",},
{"lineNum":" 1422","line":"    }"},
{"lineNum":" 1423","line":""},
{"lineNum":" 1424","line":"    pub fn replaceAllByRegex(this: *const JStringUnmanaged, allocator: std.mem.Allocator, pattern: []const u8, replacement_slice: []const u8) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"1661","possible_hits":"1",},
{"lineNum":" 1425","line":"        return this._replaceByRegex(allocator, pattern, replacement_slice, true);","class":"lineCov","hits":"1","order":"1662","possible_hits":"1",},
{"lineNum":" 1426","line":"    }"},
{"lineNum":" 1427","line":""},
{"lineNum":" 1428","line":"    fn _replace(this: *const JStringUnmanaged, allocator: std.mem.Allocator, pattern: []const u8, replacement_slice: []const u8, comptime match_all: bool) anyerror!JStringUnmanaged {","class":"lineCov","hits":"2","order":"1577","possible_hits":"2",},
{"lineNum":" 1429","line":"        const max_gap_count: usize = if (match_all) @divFloor(this.str_slice.len, pattern.len) else 1;","class":"lineCov","hits":"3","order":"1578","possible_hits":"3",},
{"lineNum":" 1430","line":"        var gaps = try allocator.alloc(_MatchedGapIterator.Gap, max_gap_count);","class":"linePartCov","hits":"2","order":"1579","possible_hits":"3",},
{"lineNum":" 1431","line":"        defer allocator.free(gaps);","class":"linePartCov","hits":"3","order":"1615","possible_hits":"4",},
{"lineNum":" 1432","line":"        var gap_count: usize = 0;","class":"lineCov","hits":"2","order":"1580","possible_hits":"2",},
{"lineNum":" 1433","line":"        var search_offset: usize = 0;","class":"lineCov","hits":"2","order":"1581","possible_hits":"2",},
{"lineNum":" 1434","line":"        var found: isize = 0;","class":"lineCov","hits":"2","order":"1582","possible_hits":"2",},
{"lineNum":" 1435","line":"        if (match_all) {","class":"lineCov","hits":"1","order":"1620","possible_hits":"1",},
{"lineNum":" 1436","line":"            while (true) {"},
{"lineNum":" 1437","line":"                found = this.indexOf(pattern, search_offset);","class":"lineCov","hits":"1","order":"1621","possible_hits":"1",},
{"lineNum":" 1438","line":"                if (found >= 0) {","class":"lineCov","hits":"1","order":"1622","possible_hits":"1",},
{"lineNum":" 1439","line":"                    gaps[gap_count] = _MatchedGapIterator.Gap{ .start = @as(usize, @intCast(found)), .len = pattern.len };","class":"lineCov","hits":"3","order":"1623","possible_hits":"3",},
{"lineNum":" 1440","line":"                    gap_count += 1;","class":"linePartCov","hits":"1","order":"1624","possible_hits":"2",},
{"lineNum":" 1441","line":"                    search_offset = @as(usize, @intCast(found)) + pattern.len;","class":"lineCov","hits":"3","order":"1625","possible_hits":"3",},
{"lineNum":" 1442","line":"                } else break;"},
{"lineNum":" 1443","line":"            }"},
{"lineNum":" 1444","line":"        } else {"},
{"lineNum":" 1445","line":"            found = this.indexOf(pattern, 0);","class":"lineCov","hits":"1","order":"1583","possible_hits":"1",},
{"lineNum":" 1446","line":"            if (found >= 0) {","class":"lineCov","hits":"1","order":"1584","possible_hits":"1",},
{"lineNum":" 1447","line":"                gaps[gap_count] = _MatchedGapIterator.Gap{ .start = @as(usize, @intCast(found)), .len = pattern.len };","class":"lineCov","hits":"3","order":"1585","possible_hits":"3",},
{"lineNum":" 1448","line":"                gap_count += 1;","class":"linePartCov","hits":"1","order":"1586","possible_hits":"2",},
{"lineNum":" 1449","line":"                search_offset = @as(usize, @intCast(found)) + pattern.len;","class":"lineCov","hits":"2","order":"1587","possible_hits":"2",},
{"lineNum":" 1450","line":"            }"},
{"lineNum":" 1451","line":"        }"},
{"lineNum":" 1452","line":"        if (gap_count == 0) {","class":"lineCov","hits":"2","order":"1588","possible_hits":"2",},
{"lineNum":" 1453","line":"            return this.clone(allocator);","class":"linePartCov","hits":"3","order":"1630","possible_hits":"6",},
{"lineNum":" 1454","line":"        } else {"},
{"lineNum":" 1455","line":"            return this._joinGapsWithSlice(allocator, gaps[0..gap_count], replacement_slice);","class":"lineCov","hits":"6","order":"1589","possible_hits":"6",},
{"lineNum":" 1456","line":"        }"},
{"lineNum":" 1457","line":"    }"},
{"lineNum":" 1458","line":""},
{"lineNum":" 1459","line":"    fn _replaceByRegex(this: *const JStringUnmanaged, allocator: std.mem.Allocator, pattern: []const u8, replacement_slice: []const u8, comptime match_all: bool) anyerror!JStringUnmanaged {","class":"lineCov","hits":"2","order":"1636","possible_hits":"2",},
{"lineNum":" 1460","line":"        if (enable_pcre) {"},
{"lineNum":" 1461","line":"            var re = try RegexUnmanaged.init(allocator, pattern, RegexUnmanaged.DefaultRegexOptions);","class":"lineCov","hits":"2","order":"1637","possible_hits":"2",},
{"lineNum":" 1462","line":"            if (match_all) {"},
{"lineNum":" 1463","line":"                try re.matchAll(allocator, this.str_slice, 0, RegexUnmanaged.DefaultMatchOptions);","class":"lineCov","hits":"1","order":"1663","possible_hits":"1",},
{"lineNum":" 1464","line":"            } else {"},
{"lineNum":" 1465","line":"                try re.match(allocator, this.str_slice, 0, true, RegexUnmanaged.DefaultMatchOptions);","class":"lineCov","hits":"1","order":"1638","possible_hits":"1",},
{"lineNum":" 1466","line":"            }"},
{"lineNum":" 1467","line":"            if (!re.succeed()) {","class":"lineCov","hits":"2","order":"1639","possible_hits":"2",},
{"lineNum":" 1468","line":"                return JStringError.RegexMatchFailed;","class":"linePartCov","hits":"1","order":"1684","possible_hits":"2",},
{"lineNum":" 1469","line":"            }"},
{"lineNum":" 1470","line":"            if (re.matchSucceed()) {","class":"lineCov","hits":"2","order":"1640","possible_hits":"2",},
{"lineNum":" 1471","line":"                var first_gap_start_from_zero = false;","class":"lineCov","hits":"2","order":"1641","possible_hits":"2",},
{"lineNum":" 1472","line":"                var last_gap_end_in_end = false;","class":"lineCov","hits":"2","order":"1642","possible_hits":"2",},
{"lineNum":" 1473","line":"                const gap_count = brk: {"},
{"lineNum":" 1474","line":"                    // stupid method, scan once to know how many gaps we have"},
{"lineNum":" 1475","line":"                    // but since this helps us to avoid allocation (just mem access)"},
{"lineNum":" 1476","line":"                    // probably it is also fast enough"},
{"lineNum":" 1477","line":"                    var gap_it = _MatchedGapIterator.init(&re, this.str_slice);","class":"lineCov","hits":"2","order":"1643","possible_hits":"2",},
{"lineNum":" 1478","line":"                    var count: usize = 0;","class":"lineCov","hits":"2","order":"1644","possible_hits":"2",},
{"lineNum":" 1479","line":"                    while (try gap_it.nextGap()) |g| {","class":"linePartCov","hits":"3","order":"1645","possible_hits":"4",},
{"lineNum":" 1480","line":"                        if (g.start == 0) {","class":"lineCov","hits":"2","order":"1646","possible_hits":"2",},
{"lineNum":" 1481","line":"                            // gap is not overlapping, so simply check every one,"},
{"lineNum":" 1482","line":"                            // there must be one at most start at 0"},
{"lineNum":" 1483","line":"                            first_gap_start_from_zero = true;","class":"linePartCov","hits":"1","order":"1664","possible_hits":"2",},
{"lineNum":" 1484","line":"                        }"},
{"lineNum":" 1485","line":"                        if (g.start + g.len == this.str_slice.len) {","class":"linePartCov","hits":"2","order":"1647","possible_hits":"4",},
{"lineNum":" 1486","line":"                            // same idea, must be at most one end at the end"},
{"lineNum":" 1487","line":"                            last_gap_end_in_end = true;","class":"linePartCov","hits":"1","order":"1648","possible_hits":"2",},
{"lineNum":" 1488","line":"                        }"},
{"lineNum":" 1489","line":"                        count += 1;","class":"linePartCov","hits":"6","order":"1649","possible_hits":"8",},
{"lineNum":" 1490","line":"                    }"},
{"lineNum":" 1491","line":"                    break :brk count;","class":"lineCov","hits":"2","order":"1650","possible_hits":"2",},
{"lineNum":" 1492","line":"                };"},
{"lineNum":" 1493","line":"                var gaps = try allocator.alloc(_MatchedGapIterator.Gap, gap_count);","class":"linePartCov","hits":"2","order":"1651","possible_hits":"4",},
{"lineNum":" 1494","line":"                defer allocator.free(gaps);","class":"linePartCov","hits":"2","order":"1658","possible_hits":"4",},
{"lineNum":" 1495","line":"                var gap_it = _MatchedGapIterator.init(&re, this.str_slice);","class":"lineCov","hits":"2","order":"1652","possible_hits":"2",},
{"lineNum":" 1496","line":"                var count: usize = 0;","class":"lineCov","hits":"2","order":"1653","possible_hits":"2",},
{"lineNum":" 1497","line":"                while (try gap_it.nextGap()) |g| {","class":"linePartCov","hits":"2","order":"1654","possible_hits":"6",},
{"lineNum":" 1498","line":"                    gaps[count] = _MatchedGapIterator.Gap{ .start = g.start, .len = g.len };","class":"lineCov","hits":"6","order":"1655","possible_hits":"6",},
{"lineNum":" 1499","line":"                    count += 1;","class":"linePartCov","hits":"6","order":"1656","possible_hits":"8",},
{"lineNum":" 1500","line":"                }"},
{"lineNum":" 1501","line":"                return this._joinGapsWithSlice(allocator, gaps, replacement_slice);","class":"lineCov","hits":"6","order":"1657","possible_hits":"6",},
{"lineNum":" 1502","line":"            } else return JStringError.RegexMatchFailed;","class":"linePartCov","hits":"1","order":"1667","possible_hits":"2",},
{"lineNum":" 1503","line":"        } else {"},
{"lineNum":" 1504","line":"            @compileError(\"disabled by comptime var `enable_pcre`, set it true to enable.\");"},
{"lineNum":" 1505","line":"        }"},
{"lineNum":" 1506","line":"    }"},
{"lineNum":" 1507","line":""},
{"lineNum":" 1508","line":"    fn _joinGapsWithSlice(this: *const JStringUnmanaged, allocator: std.mem.Allocator, gaps: []_MatchedGapIterator.Gap, replacement_slice: []const u8) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"1590","possible_hits":"1",},
{"lineNum":" 1509","line":"        var first_gap_start_from_zero = false;","class":"lineCov","hits":"1","order":"1591","possible_hits":"1",},
{"lineNum":" 1510","line":"        var last_gap_end_in_end = false;","class":"lineCov","hits":"1","order":"1592","possible_hits":"1",},
{"lineNum":" 1511","line":"        var total_gap_len: usize = 0;","class":"lineCov","hits":"1","order":"1593","possible_hits":"1",},
{"lineNum":" 1512","line":"        for (gaps) |g| {","class":"lineCov","hits":"3","order":"1594","possible_hits":"3",},
{"lineNum":" 1513","line":"            if (g.start == 0) {","class":"lineCov","hits":"1","order":"1595","possible_hits":"1",},
{"lineNum":" 1514","line":"                // gap is not overlapping, so simply check every one,"},
{"lineNum":" 1515","line":"                // there must be one at most start at 0"},
{"lineNum":" 1516","line":"                first_gap_start_from_zero = true;","class":"lineCov","hits":"1","order":"1626","possible_hits":"1",},
{"lineNum":" 1517","line":"            }"},
{"lineNum":" 1518","line":"            if (g.start + g.len == this.str_slice.len) {","class":"linePartCov","hits":"1","order":"1596","possible_hits":"2",},
{"lineNum":" 1519","line":"                // same idea, must be at most one end at the end"},
{"lineNum":" 1520","line":"                last_gap_end_in_end = true;","class":"lineCov","hits":"1","order":"1597","possible_hits":"1",},
{"lineNum":" 1521","line":"            }"},
{"lineNum":" 1522","line":"            total_gap_len += g.len;","class":"linePartCov","hits":"3","order":"1598","possible_hits":"4",},
{"lineNum":" 1523","line":"        }"},
{"lineNum":" 1524","line":"        const new_slice_len = this.str_slice.len - total_gap_len + replacement_slice.len * gaps.len;","class":"linePartCov","hits":"1","order":"1599","possible_hits":"2",},
{"lineNum":" 1525","line":"        var new_slice = try allocator.alloc(u8, new_slice_len);","class":"lineCov","hits":"1","order":"1600","possible_hits":"1",},
{"lineNum":" 1526","line":"        var copy_offset: usize = 0;","class":"lineCov","hits":"1","order":"1601","possible_hits":"1",},
{"lineNum":" 1527","line":"        var copy_len: usize = 0;","class":"lineCov","hits":"1","order":"1602","possible_hits":"1",},
{"lineNum":" 1528","line":"        var origin_offset: usize = 0;","class":"lineCov","hits":"1","order":"1603","possible_hits":"1",},
{"lineNum":" 1529","line":"        for (gaps) |g| {","class":"lineCov","hits":"3","order":"1604","possible_hits":"3",},
{"lineNum":" 1530","line":"            // |<gap>..<gap>..|, |..<gap>..<gap>| or |..<gap>..<gap>..<gap>..|"},
{"lineNum":" 1531","line":"            copy_len = g.start - origin_offset;","class":"linePartCov","hits":"1","order":"1605","possible_hits":"2",},
{"lineNum":" 1532","line":"            @memcpy(new_slice[copy_offset .. copy_offset + copy_len], this.str_slice[origin_offset .. origin_offset + copy_len]);","class":"lineCov","hits":"2","order":"1606","possible_hits":"2",},
{"lineNum":" 1533","line":"            copy_offset += copy_len;","class":"linePartCov","hits":"1","order":"1607","possible_hits":"2",},
{"lineNum":" 1534","line":"            origin_offset += copy_len;","class":"lineCov","hits":"1","order":"1608","possible_hits":"1",},
{"lineNum":" 1535","line":""},
{"lineNum":" 1536","line":"            copy_len = replacement_slice.len;","class":"lineCov","hits":"1","order":"1609","possible_hits":"1",},
{"lineNum":" 1537","line":"            @memcpy(new_slice[copy_offset .. copy_offset + copy_len], replacement_slice);","class":"lineCov","hits":"2","order":"1610","possible_hits":"2",},
{"lineNum":" 1538","line":"            copy_offset += copy_len;","class":"linePartCov","hits":"1","order":"1611","possible_hits":"2",},
{"lineNum":" 1539","line":"            origin_offset += g.len;","class":"lineCov","hits":"3","order":"1612","possible_hits":"3",},
{"lineNum":" 1540","line":"        }"},
{"lineNum":" 1541","line":"        if (!last_gap_end_in_end) {","class":"lineCov","hits":"1","order":"1613","possible_hits":"1",},
{"lineNum":" 1542","line":"            // |<gap>..<gap>..| or |..<gap>..<gap>..<gap>..|"},
{"lineNum":" 1543","line":"            @memcpy(new_slice[copy_offset..], this.str_slice[origin_offset..]);","class":"lineCov","hits":"1","order":"1627","possible_hits":"1",},
{"lineNum":" 1544","line":"        }"},
{"lineNum":" 1545","line":"        return JStringUnmanaged{","class":"lineCov","hits":"1","order":"1614","possible_hits":"1",},
{"lineNum":" 1546","line":"            .str_slice = new_slice,"},
{"lineNum":" 1547","line":"        };"},
{"lineNum":" 1548","line":"    }"},
{"lineNum":" 1549","line":""},
{"lineNum":" 1550","line":"    // ** search"},
{"lineNum":" 1551","line":""},
{"lineNum":" 1552","line":"    /// simple search algorithm is alias of indexOf"},
{"lineNum":" 1553","line":"    pub inline fn search(this: *const JStringUnmanaged, pattern: []const u8, offset: usize) isize {"},
{"lineNum":" 1554","line":"        return this.indexOf(pattern, offset);","class":"lineCov","hits":"2","order":"689","possible_hits":"2",},
{"lineNum":" 1555","line":"    }"},
{"lineNum":" 1556","line":""},
{"lineNum":" 1557","line":"    /// This function is searching by regex so it requires allocator. If the pattern is valid, will return first matched"},
{"lineNum":" 1558","line":"    /// start or -1 (when there is no match). Buf if the pattern itself has problem, will return"},
{"lineNum":" 1559","line":"    /// `JStringError.RegexMatchFailed`."},
{"lineNum":" 1560","line":"    pub fn searchByRegex(this: *const JStringUnmanaged, allocator: std.mem.Allocator, pattern: []const u8, offset: usize) anyerror!isize {","class":"lineCov","hits":"1","order":"1405","possible_hits":"1",},
{"lineNum":" 1561","line":"        if (enable_pcre) {"},
{"lineNum":" 1562","line":"            var re = try RegexUnmanaged.init(allocator, pattern, RegexUnmanaged.DefaultRegexOptions);","class":"lineCov","hits":"1","order":"1406","possible_hits":"1",},
{"lineNum":" 1563","line":"            try re.match(allocator, this.str_slice, offset, true, RegexUnmanaged.DefaultMatchOptions);","class":"lineCov","hits":"1","order":"1407","possible_hits":"1",},
{"lineNum":" 1564","line":"            defer re.deinit(allocator);","class":"lineCov","hits":"3","order":"1413","possible_hits":"3",},
{"lineNum":" 1565","line":"            if (!re.succeed()) {","class":"lineCov","hits":"1","order":"1408","possible_hits":"1",},
{"lineNum":" 1566","line":"                // This usually means there is a problem in the pattern, so we reports back instead of returning -1"},
{"lineNum":" 1567","line":"                return JStringError.RegexMatchFailed;","class":"lineCov","hits":"1","order":"1426","possible_hits":"1",},
{"lineNum":" 1568","line":"            }"},
{"lineNum":" 1569","line":"            if (re.matchSucceed()) {","class":"lineCov","hits":"1","order":"1409","possible_hits":"1",},
{"lineNum":" 1570","line":"                const maybe_results = re.getResults();","class":"lineCov","hits":"1","order":"1410","possible_hits":"1",},
{"lineNum":" 1571","line":"                if (maybe_results) |results| {","class":"lineCov","hits":"2","order":"1411","possible_hits":"2",},
{"lineNum":" 1572","line":"                    return @as(isize, @intCast(results[0].start));","class":"lineCov","hits":"3","order":"1412","possible_hits":"3",},
{"lineNum":" 1573","line":"                } else unreachable;"},
{"lineNum":" 1574","line":"            } else {"},
{"lineNum":" 1575","line":"                return -1;","class":"lineCov","hits":"1","order":"1418","possible_hits":"1",},
{"lineNum":" 1576","line":"            }"},
{"lineNum":" 1577","line":"        } else {"},
{"lineNum":" 1578","line":"            @compileError(\"disabled by comptime var `enable_pcre`, set it true to enable.\");"},
{"lineNum":" 1579","line":"        }"},
{"lineNum":" 1580","line":"    }"},
{"lineNum":" 1581","line":""},
{"lineNum":" 1582","line":"    // ** slice"},
{"lineNum":" 1583","line":""},
{"lineNum":" 1584","line":"    /// Slice part of current string and return a new copy with content `[index_start, index_end)`. Both `index_start`"},
{"lineNum":" 1585","line":"    /// and `index_end` can be positive or negative numbers. When is positive, means the forward location from string"},
{"lineNum":" 1586","line":"    /// beginning; when is negative, means the backward location from string ending. Example: if `s` contains `\"hello\"`,"},
{"lineNum":" 1587","line":"    /// `s.slice(allocator, 1, -1)` will return a new string with content `\"ell\"`."},
{"lineNum":" 1588","line":"    pub fn slice(this: *const JStringUnmanaged, allocator: std.mem.Allocator, index_start: isize, index_end: isize) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"714","possible_hits":"1",},
{"lineNum":" 1589","line":"        const uindex_start = brk: {"},
{"lineNum":" 1590","line":"            if (index_start >= 0) {","class":"lineCov","hits":"1","order":"715","possible_hits":"1",},
{"lineNum":" 1591","line":"                break :brk @as(usize, @intCast(index_start));","class":"lineCov","hits":"2","order":"716","possible_hits":"2",},
{"lineNum":" 1592","line":"            } else {"},
{"lineNum":" 1593","line":"                if (@as(usize, @intCast(-index_start)) > this.len()) {","class":"linePartCov","hits":"2","order":"730","possible_hits":"3",},
{"lineNum":" 1594","line":"                    return error.IndexOutOfBounds;","class":"lineCov","hits":"1","order":"735","possible_hits":"1",},
{"lineNum":" 1595","line":"                }"},
{"lineNum":" 1596","line":"                break :brk this.len() - @as(usize, @intCast(-index_start));","class":"lineCov","hits":"3","order":"717","possible_hits":"3",},
{"lineNum":" 1597","line":"            }"},
{"lineNum":" 1598","line":"        };"},
{"lineNum":" 1599","line":"        const uindex_end = brk: {"},
{"lineNum":" 1600","line":"            if (index_end >= 0) {","class":"lineCov","hits":"1","order":"718","possible_hits":"1",},
{"lineNum":" 1601","line":"                break :brk @as(usize, @intCast(index_end));","class":"lineCov","hits":"2","order":"719","possible_hits":"2",},
{"lineNum":" 1602","line":"            } else {"},
{"lineNum":" 1603","line":"                if (@as(usize, @intCast(-index_end)) > this.len()) {","class":"linePartCov","hits":"2","order":"738","possible_hits":"3",},
{"lineNum":" 1604","line":"                    return error.IndexOutOfBounds;","class":"lineCov","hits":"1","order":"739","possible_hits":"1",},
{"lineNum":" 1605","line":"                }"},
{"lineNum":" 1606","line":"                break :brk this.len() - @as(usize, @intCast(-index_end));","class":"lineCov","hits":"3","order":"720","possible_hits":"3",},
{"lineNum":" 1607","line":"            }"},
{"lineNum":" 1608","line":"        };"},
{"lineNum":" 1609","line":"        return this._slice(allocator, uindex_start, uindex_end);","class":"lineCov","hits":"2","order":"721","possible_hits":"2",},
{"lineNum":" 1610","line":"    }"},
{"lineNum":" 1611","line":""},
{"lineNum":" 1612","line":"    pub inline fn sliceWithStartOnly(this: *const JStringUnmanaged, allocator: std.mem.Allocator, index_start: isize) anyerror!JStringUnmanaged {"},
{"lineNum":" 1613","line":"        return this.slice(allocator, index_start, @as(isize, @intCast(this.len())));","class":"lineCov","hits":"11","order":"713","possible_hits":"11",},
{"lineNum":" 1614","line":"    }"},
{"lineNum":" 1615","line":""},
{"lineNum":" 1616","line":"    fn _slice(this: *const JStringUnmanaged, allocator: std.mem.Allocator, index_start: usize, index_end: usize) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"722","possible_hits":"1",},
{"lineNum":" 1617","line":"        if (index_start >= index_end or index_start >= this.len()) {","class":"lineCov","hits":"2","order":"723","possible_hits":"2",},
{"lineNum":" 1618","line":"            return JStringUnmanaged.newEmpty(allocator);","class":"lineCov","hits":"1","order":"742","possible_hits":"1",},
{"lineNum":" 1619","line":"        }"},
{"lineNum":" 1620","line":"        const valid_index_end = if (index_end > this.len()) this.len() else index_end;","class":"lineCov","hits":"2","order":"724","possible_hits":"2",},
{"lineNum":" 1621","line":"        return JStringUnmanaged.newFromSlice(allocator, this.str_slice[index_start..valid_index_end]);","class":"lineCov","hits":"2","order":"725","possible_hits":"2",},
{"lineNum":" 1622","line":"    }"},
{"lineNum":" 1623","line":""},
{"lineNum":" 1624","line":"    // ** split"},
{"lineNum":" 1625","line":""},
{"lineNum":" 1626","line":"    /// pay attention that this function will not consider spaces in non-ascii."},
{"lineNum":" 1627","line":"    fn _splitToUtf8Chars(this: *JStringUnmanaged, allocator: std.mem.Allocator, limit: usize, comptime with_spaces: bool) anyerror![]JStringUnmanaged {","class":"lineCov","hits":"2","order":"832","possible_hits":"2",},
{"lineNum":" 1628","line":"        if (limit == 0) {","class":"lineCov","hits":"2","order":"833","possible_hits":"2",},
{"lineNum":" 1629","line":"            return try allocator.alloc(JStringUnmanaged, 0);","class":"linePartCov","hits":"1","order":"864","possible_hits":"2",},
{"lineNum":" 1630","line":"        }"},
{"lineNum":" 1631","line":""},
{"lineNum":" 1632","line":"        var result_count: usize = 0;","class":"lineCov","hits":"2","order":"834","possible_hits":"2",},
{"lineNum":" 1633","line":"        const utf8_len = try this.utf8Len(); // force for a utf8_view","class":"linePartCov","hits":"2","order":"835","possible_hits":"4",},
{"lineNum":" 1634","line":"        const real_limit = if (limit < utf8_len) limit else utf8_len;","class":"linePartCov","hits":"3","order":"836","possible_hits":"4",},
{"lineNum":" 1635","line":"        var result_jstrings = try allocator.alloc(JStringUnmanaged, real_limit);","class":"linePartCov","hits":"2","order":"837","possible_hits":"4",},
{"lineNum":" 1636","line":"        var it = try this.utf8Iterator();","class":"linePartCov","hits":"2","order":"838","possible_hits":"4",},
{"lineNum":" 1637","line":"        while (it.nextCodepoint()) |code_point| {","class":"lineCov","hits":"4","order":"839","possible_hits":"4",},
{"lineNum":" 1638","line":"            if (with_spaces) {"},
{"lineNum":" 1639","line":"                result_jstrings[result_count] = try JStringUnmanaged.newFromFormat(allocator, \"{u}\", .{code_point});","class":"lineCov","hits":"2","order":"840","possible_hits":"2",},
{"lineNum":" 1640","line":"                result_count += 1;","class":"lineCov","hits":"1","order":"841","possible_hits":"1",},
{"lineNum":" 1641","line":"                if (result_count >= real_limit) {","class":"lineCov","hits":"1","order":"842","possible_hits":"1",},
{"lineNum":" 1642","line":"                    break;","class":"linePartCov","hits":"2","order":"843","possible_hits":"3",},
{"lineNum":" 1643","line":"                }"},
{"lineNum":" 1644","line":"            } else {"},
{"lineNum":" 1645","line":"                switch (code_point) {","class":"lineCov","hits":"2","order":"2100","possible_hits":"2",},
{"lineNum":" 1646","line":"                    \' \', \'\\t\', \'\\n\', \'\\r\' => continue,"},
{"lineNum":" 1647","line":"                    else => {"},
{"lineNum":" 1648","line":"                        result_jstrings[result_count] = try JStringUnmanaged.newFromFormat(allocator, \"{u}\", .{code_point});","class":"lineCov","hits":"2","order":"2101","possible_hits":"2",},
{"lineNum":" 1649","line":"                        result_count += 1;","class":"lineCov","hits":"1","order":"2102","possible_hits":"1",},
{"lineNum":" 1650","line":"                        if (result_count >= real_limit) {","class":"lineCov","hits":"1","order":"2103","possible_hits":"1",},
{"lineNum":" 1651","line":"                            break;","class":"lineCov","hits":"3","order":"2104","possible_hits":"3",},
{"lineNum":" 1652","line":"                        }"},
{"lineNum":" 1653","line":"                    },"},
{"lineNum":" 1654","line":"                }"},
{"lineNum":" 1655","line":"            }"},
{"lineNum":" 1656","line":"        }"},
{"lineNum":" 1657","line":""},
{"lineNum":" 1658","line":"        if (result_count == real_limit) {","class":"lineCov","hits":"2","order":"844","possible_hits":"2",},
{"lineNum":" 1659","line":"            return result_jstrings;","class":"linePartCov","hits":"1","order":"845","possible_hits":"2",},
{"lineNum":" 1660","line":"        } else {"},
{"lineNum":" 1661","line":"            defer allocator.free(result_jstrings);","class":"linePartCov","hits":"1","order":"2109","possible_hits":"4",},
{"lineNum":" 1662","line":"            var final_result_jstrings = try allocator.alloc(JStringUnmanaged, result_count);","class":"linePartCov","hits":"1","order":"2105","possible_hits":"4",},
{"lineNum":" 1663","line":"            _ = &final_result_jstrings;"},
{"lineNum":" 1664","line":"            if (result_count > 0) {","class":"linePartCov","hits":"1","order":"2106","possible_hits":"2",},
{"lineNum":" 1665","line":"                @memcpy(final_result_jstrings, result_jstrings[0..result_count]);","class":"linePartCov","hits":"1","order":"2107","possible_hits":"2",},
{"lineNum":" 1666","line":"            }"},
{"lineNum":" 1667","line":"            return final_result_jstrings;","class":"linePartCov","hits":"2","order":"2108","possible_hits":"4",},
{"lineNum":" 1668","line":"        }"},
{"lineNum":" 1669","line":"    }"},
{"lineNum":" 1670","line":""},
{"lineNum":" 1671","line":"    /// split by simple seperator([]const u8). If you need to split by white spaces, use `splitByWhiteSpace`, or"},
{"lineNum":" 1672","line":"    /// even more advanced `splitByRegex` (need to enable pcre support). Given limit negative value to split any many"},
{"lineNum":" 1673","line":"    /// as possible."},
{"lineNum":" 1674","line":"    pub fn split(this: *JStringUnmanaged, allocator: std.mem.Allocator, seperator: []const u8, limit: isize) anyerror![]JStringUnmanaged {","class":"lineCov","hits":"1","order":"794","possible_hits":"1",},
{"lineNum":" 1675","line":"        const real_limit = brk: {"},
{"lineNum":" 1676","line":"            if (limit < 0) {","class":"lineCov","hits":"1","order":"795","possible_hits":"1",},
{"lineNum":" 1677","line":"                break :brk this.str_slice.len;","class":"lineCov","hits":"1","order":"796","possible_hits":"1",},
{"lineNum":" 1678","line":"            } else {"},
{"lineNum":" 1679","line":"                break :brk @as(usize, @intCast(limit));","class":"lineCov","hits":"2","order":"797","possible_hits":"2",},
{"lineNum":" 1680","line":"            }"},
{"lineNum":" 1681","line":"        };"},
{"lineNum":" 1682","line":""},
{"lineNum":" 1683","line":"        if (seperator.len == 0) {","class":"lineCov","hits":"1","order":"798","possible_hits":"1",},
{"lineNum":" 1684","line":"            // Well this is quite stupid, but let us still try to cover it."},
{"lineNum":" 1685","line":"            return this._splitToUtf8Chars(allocator, if (real_limit < this.str_slice.len) real_limit else this.str_slice.len, true);","class":"lineCov","hits":"1","order":"831","possible_hits":"1",},
{"lineNum":" 1686","line":"        }"},
{"lineNum":" 1687","line":""},
{"lineNum":" 1688","line":"        var result_jstrings = try allocator.alloc(JStringUnmanaged, real_limit);","class":"linePartCov","hits":"1","order":"799","possible_hits":"2",},
{"lineNum":" 1689","line":"        var result_count: usize = 0;","class":"lineCov","hits":"1","order":"800","possible_hits":"1",},
{"lineNum":" 1690","line":"        var search_start: usize = 0;","class":"lineCov","hits":"1","order":"801","possible_hits":"1",},
{"lineNum":" 1691","line":"        var pos: isize = -1;","class":"lineCov","hits":"1","order":"802","possible_hits":"1",},
{"lineNum":" 1692","line":"        while (search_start < this.str_slice.len) {","class":"lineCov","hits":"1","order":"803","possible_hits":"1",},
{"lineNum":" 1693","line":"            pos = this.indexOf(seperator, search_start);","class":"lineCov","hits":"1","order":"804","possible_hits":"1",},
{"lineNum":" 1694","line":"            if (pos < 0) {","class":"lineCov","hits":"1","order":"805","possible_hits":"1",},
{"lineNum":" 1695","line":"                if (result_count > 0) {","class":"lineCov","hits":"1","order":"811","possible_hits":"1",},
{"lineNum":" 1696","line":"                    // have found one, the what\'s left is rest part"},
{"lineNum":" 1697","line":"                    result_jstrings[result_count] = try JStringUnmanaged.newFromSlice(allocator, this.str_slice[search_start..]);","class":"lineCov","hits":"2","order":"812","possible_hits":"2",},
{"lineNum":" 1698","line":"                    result_count += 1;","class":"linePartCov","hits":"1","order":"813","possible_hits":"2",},
{"lineNum":" 1699","line":"                }"},
{"lineNum":" 1700","line":"                break;","class":"lineCov","hits":"1","order":"814","possible_hits":"1",},
{"lineNum":" 1701","line":"            } else {"},
{"lineNum":" 1702","line":"                result_jstrings[result_count] = try JStringUnmanaged.newFromSlice(allocator, this.str_slice[search_start..@as(usize, @intCast(pos))]);","class":"lineCov","hits":"2","order":"806","possible_hits":"2",},
{"lineNum":" 1703","line":"                result_count += 1;","class":"lineCov","hits":"1","order":"807","possible_hits":"1",},
{"lineNum":" 1704","line":"                if (result_count >= real_limit) {","class":"lineCov","hits":"1","order":"808","possible_hits":"1",},
{"lineNum":" 1705","line":"                    break;","class":"lineCov","hits":"1","order":"825","possible_hits":"1",},
{"lineNum":" 1706","line":"                }"},
{"lineNum":" 1707","line":"                search_start = @as(usize, @intCast(pos)) + seperator.len;","class":"lineCov","hits":"2","order":"809","possible_hits":"2",},
{"lineNum":" 1708","line":"                continue;","class":"lineCov","hits":"3","order":"810","possible_hits":"3",},
{"lineNum":" 1709","line":"            }"},
{"lineNum":" 1710","line":"        }"},
{"lineNum":" 1711","line":""},
{"lineNum":" 1712","line":"        if (result_count == real_limit) {","class":"lineCov","hits":"1","order":"815","possible_hits":"1",},
{"lineNum":" 1713","line":"            // save the copy as all buf filled"},
{"lineNum":" 1714","line":"            return result_jstrings;","class":"lineCov","hits":"1","order":"826","possible_hits":"1",},
{"lineNum":" 1715","line":"        } else {"},
{"lineNum":" 1716","line":"            defer allocator.free(result_jstrings);","class":"linePartCov","hits":"1","order":"820","possible_hits":"2",},
{"lineNum":" 1717","line":"            var final_result_jstrings = try allocator.alloc(JStringUnmanaged, result_count);","class":"linePartCov","hits":"1","order":"816","possible_hits":"2",},
{"lineNum":" 1718","line":"            _ = &final_result_jstrings;"},
{"lineNum":" 1719","line":"            if (result_count > 0) {","class":"lineCov","hits":"1","order":"817","possible_hits":"1",},
{"lineNum":" 1720","line":"                @memcpy(final_result_jstrings, result_jstrings[0..result_count]);","class":"lineCov","hits":"1","order":"818","possible_hits":"1",},
{"lineNum":" 1721","line":"            }"},
{"lineNum":" 1722","line":"            return final_result_jstrings;","class":"lineCov","hits":"2","order":"819","possible_hits":"2",},
{"lineNum":" 1723","line":"        }"},
{"lineNum":" 1724","line":"    }"},
{"lineNum":" 1725","line":""},
{"lineNum":" 1726","line":"    /// Split by ascii whitespaces (\" \\t\\n\\r\"), or called explode in languages like PHP (which is the best language! :))"},
{"lineNum":" 1727","line":"    pub inline fn splitByWhiteSpace(this: *JStringUnmanaged, allocator: std.mem.Allocator, limit: isize) anyerror![]JStringUnmanaged {"},
{"lineNum":" 1728","line":"        return this.explode(allocator, limit);","class":"lineCov","hits":"2","order":"278","possible_hits":"2",},
{"lineNum":" 1729","line":"    }"},
{"lineNum":" 1730","line":""},
{"lineNum":" 1731","line":"    /// Split based on regex matching. With greate power comes great responsibility."},
{"lineNum":" 1732","line":"    pub fn splitByRegex(this: *JStringUnmanaged, allocator: std.mem.Allocator, pattern: []const u8, offset: usize, limit: isize) anyerror![]JStringUnmanaged {","class":"lineCov","hits":"1","order":"1432","possible_hits":"1",},
{"lineNum":" 1733","line":"        if (enable_pcre) {"},
{"lineNum":" 1734","line":"            const real_limit = brk: {"},
{"lineNum":" 1735","line":"                if (limit < 0) {","class":"lineCov","hits":"1","order":"1433","possible_hits":"1",},
{"lineNum":" 1736","line":"                    // most will be +1, like \"hello\".split(/./) => (6) [\'\', \'\', \'\', \'\', \'\', \'\']"},
{"lineNum":" 1737","line":"                    break :brk this.str_slice.len + 1;","class":"linePartCov","hits":"1","order":"1444","possible_hits":"2",},
{"lineNum":" 1738","line":"                } else {"},
{"lineNum":" 1739","line":"                    break :brk @as(usize, @intCast(limit));","class":"lineCov","hits":"3","order":"1434","possible_hits":"3",},
{"lineNum":" 1740","line":"                }"},
{"lineNum":" 1741","line":"            };"},
{"lineNum":" 1742","line":"            if (real_limit == 0) {","class":"lineCov","hits":"1","order":"1435","possible_hits":"1",},
{"lineNum":" 1743","line":"                return this._cloneAsArray(allocator);","class":"lineCov","hits":"1","order":"1436","possible_hits":"1",},
{"lineNum":" 1744","line":"            }"},
{"lineNum":" 1745","line":""},
{"lineNum":" 1746","line":"            var re = try RegexUnmanaged.init(allocator, pattern, RegexUnmanaged.DefaultRegexOptions);","class":"lineCov","hits":"2","order":"1445","possible_hits":"2",},
{"lineNum":" 1747","line":"            try re.matchAll(allocator, this.str_slice, offset, RegexUnmanaged.DefaultMatchOptions);","class":"lineCov","hits":"1","order":"1446","possible_hits":"1",},
{"lineNum":" 1748","line":"            if (re.succeed() and re.matchSucceed()) {","class":"lineCov","hits":"2","order":"1447","possible_hits":"2",},
{"lineNum":" 1749","line":"                var first_gap_start_from_zero = false;","class":"lineCov","hits":"1","order":"1448","possible_hits":"1",},
{"lineNum":" 1750","line":"                var last_gap_end_in_end = false;","class":"lineCov","hits":"1","order":"1449","possible_hits":"1",},
{"lineNum":" 1751","line":"                const gap_count = brk: {"},
{"lineNum":" 1752","line":"                    // stupid method, scan once to know how many gaps we have"},
{"lineNum":" 1753","line":"                    // but since this helps us to avoid allocation (just mem access)"},
{"lineNum":" 1754","line":"                    // probably it is also fast enough"},
{"lineNum":" 1755","line":"                    var gap_it = _MatchedGapIterator.init(&re, this.str_slice);","class":"lineCov","hits":"1","order":"1450","possible_hits":"1",},
{"lineNum":" 1756","line":"                    var count: usize = 0;","class":"lineCov","hits":"1","order":"1455","possible_hits":"1",},
{"lineNum":" 1757","line":"                    while (try gap_it.nextGap()) |g| {","class":"lineCov","hits":"2","order":"1456","possible_hits":"2",},
{"lineNum":" 1758","line":"                        if (g.start == 0) {","class":"lineCov","hits":"1","order":"1477","possible_hits":"1",},
{"lineNum":" 1759","line":"                            // gap is not overlapping, so simply check every one,"},
{"lineNum":" 1760","line":"                            // there must be one at most start at 0"},
{"lineNum":" 1761","line":"                            first_gap_start_from_zero = true;","class":"lineCov","hits":"1","order":"1506","possible_hits":"1",},
{"lineNum":" 1762","line":"                        }"},
{"lineNum":" 1763","line":"                        if (g.start + g.len == this.str_slice.len) {","class":"linePartCov","hits":"1","order":"1478","possible_hits":"2",},
{"lineNum":" 1764","line":"                            // same idea, must be at most one end at the end"},
{"lineNum":" 1765","line":"                            last_gap_end_in_end = true;","class":"lineCov","hits":"1","order":"1513","possible_hits":"1",},
{"lineNum":" 1766","line":"                        }"},
{"lineNum":" 1767","line":"                        count += 1;","class":"linePartCov","hits":"3","order":"1479","possible_hits":"4",},
{"lineNum":" 1768","line":"                    }"},
{"lineNum":" 1769","line":"                    break :brk count;","class":"lineCov","hits":"1","order":"1482","possible_hits":"1",},
{"lineNum":" 1770","line":"                };"},
{"lineNum":" 1771","line":"                const jstrings_count = brk2: {"},
{"lineNum":" 1772","line":"                    const count_by_gap = brk: {"},
{"lineNum":" 1773","line":"                        if (first_gap_start_from_zero and last_gap_end_in_end) {","class":"lineCov","hits":"2","order":"1483","possible_hits":"2",},
{"lineNum":" 1774","line":"                            // |<gap>..<gap>..<gap>|"},
{"lineNum":" 1775","line":"                            break :brk gap_count + 1;","class":"linePartCov","hits":"1","order":"1542","possible_hits":"2",},
{"lineNum":" 1776","line":"                        } else if (first_gap_start_from_zero) {","class":"lineCov","hits":"1","order":"1484","possible_hits":"1",},
{"lineNum":" 1777","line":"                            // |<gap>..<gap>..|"},
{"lineNum":" 1778","line":"                            break :brk gap_count + 1;","class":"linePartCov","hits":"1","order":"1507","possible_hits":"2",},
{"lineNum":" 1779","line":"                        } else if (last_gap_end_in_end) {","class":"lineCov","hits":"1","order":"1485","possible_hits":"1",},
{"lineNum":" 1780","line":"                            // |..<gap>..<gap>|"},
{"lineNum":" 1781","line":"                            break :brk gap_count;","class":"lineCov","hits":"1","order":"1514","possible_hits":"1",},
{"lineNum":" 1782","line":"                        } else {"},
{"lineNum":" 1783","line":"                            // |..<gap>..<gap>..<gap>..|"},
{"lineNum":" 1784","line":"                            break :brk gap_count + 1;","class":"lineCov","hits":"2","order":"1486","possible_hits":"2",},
{"lineNum":" 1785","line":"                        }"},
{"lineNum":" 1786","line":"                    };"},
{"lineNum":" 1787","line":"                    break :brk2 if (real_limit < count_by_gap) real_limit else count_by_gap;","class":"lineCov","hits":"3","order":"1487","possible_hits":"3",},
{"lineNum":" 1788","line":"                };"},
{"lineNum":" 1789","line":"                var result_jstrings = try allocator.alloc(JStringUnmanaged, jstrings_count);","class":"linePartCov","hits":"1","order":"1488","possible_hits":"2",},
{"lineNum":" 1790","line":"                var count: usize = 0;","class":"lineCov","hits":"1","order":"1489","possible_hits":"1",},
{"lineNum":" 1791","line":"                var slice_offset: usize = 0;","class":"lineCov","hits":"1","order":"1490","possible_hits":"1",},
{"lineNum":" 1792","line":"                var gap_it = _MatchedGapIterator.init(&re, this.str_slice);","class":"lineCov","hits":"1","order":"1491","possible_hits":"1",},
{"lineNum":" 1793","line":"                while (try gap_it.nextGap()) |g| {","class":"linePartCov","hits":"1","order":"1492","possible_hits":"2",},
{"lineNum":" 1794","line":"                    if (count >= jstrings_count) {","class":"lineCov","hits":"1","order":"1493","possible_hits":"1",},
{"lineNum":" 1795","line":"                        break;","class":"lineCov","hits":"1","order":"1558","possible_hits":"1",},
{"lineNum":" 1796","line":"                    }"},
{"lineNum":" 1797","line":"                    // |<gap>..<gap>..| or"},
{"lineNum":" 1798","line":"                    // |..<gap>..<gap>| or |..<gap>..<gap>..<gap>..|"},
{"lineNum":" 1799","line":"                    // no matter what, we can do this"},
{"lineNum":" 1800","line":"                    result_jstrings[count] = try JStringUnmanaged.newFromSlice(allocator, this.str_slice[slice_offset..g.start]);","class":"lineCov","hits":"2","order":"1494","possible_hits":"2",},
{"lineNum":" 1801","line":"                    slice_offset = g.start + g.len;","class":"lineCov","hits":"1","order":"1495","possible_hits":"1",},
{"lineNum":" 1802","line":"                    count += 1;","class":"lineCov","hits":"3","order":"1496","possible_hits":"3",},
{"lineNum":" 1803","line":"                }"},
{"lineNum":" 1804","line":"                if (count < jstrings_count) {","class":"lineCov","hits":"1","order":"1497","possible_hits":"1",},
{"lineNum":" 1805","line":"                    // |<gap>| or |..<gap>..<gap>..<gap>..| or |<gap>..<gap>..|"},
{"lineNum":" 1806","line":"                    // still missing one so get the last piece done"},
{"lineNum":" 1807","line":"                    result_jstrings[count] = try JStringUnmanaged.newFromSlice(allocator, this.str_slice[slice_offset..]);","class":"lineCov","hits":"1","order":"1498","possible_hits":"1",},
{"lineNum":" 1808","line":"                }"},
{"lineNum":" 1809","line":"                return result_jstrings;","class":"lineCov","hits":"1","order":"1499","possible_hits":"1",},
{"lineNum":" 1810","line":"            } else return JStringError.RegexMatchFailed;","class":"lineCov","hits":"1","order":"1568","possible_hits":"1",},
{"lineNum":" 1811","line":"        } else {"},
{"lineNum":" 1812","line":"            @compileError(\"disabled by comptime var `enable_pcre`, set it true to enable.\");"},
{"lineNum":" 1813","line":"        }"},
{"lineNum":" 1814","line":"    }"},
{"lineNum":" 1815","line":""},
{"lineNum":" 1816","line":"    // ** startsWith"},
{"lineNum":" 1817","line":""},
{"lineNum":" 1818","line":"    pub inline fn startsWith(this: *const JStringUnmanaged, prefix: JStringUnmanaged) bool {"},
{"lineNum":" 1819","line":"        return this.startsWithSlice(prefix.str_slice);","class":"lineCov","hits":"1","order":"386","possible_hits":"1",},
{"lineNum":" 1820","line":"    }"},
{"lineNum":" 1821","line":""},
{"lineNum":" 1822","line":"    pub fn startsWithSlice(this: *const JStringUnmanaged, prefix_slice: []const u8) bool {","class":"lineCov","hits":"1","order":"387","possible_hits":"1",},
{"lineNum":" 1823","line":"        if (this.len() < prefix_slice.len) {","class":"lineCov","hits":"2","order":"388","possible_hits":"2",},
{"lineNum":" 1824","line":"            return false;","class":"lineCov","hits":"1","order":"393","possible_hits":"1",},
{"lineNum":" 1825","line":"        }"},
{"lineNum":" 1826","line":"        return std.mem.eql(u8, this.str_slice[0..prefix_slice.len], prefix_slice);","class":"lineCov","hits":"2","order":"389","possible_hits":"2",},
{"lineNum":" 1827","line":"    }"},
{"lineNum":" 1828","line":""},
{"lineNum":" 1829","line":"    // ** toLocaleLowerCase"},
{"lineNum":" 1830","line":""},
{"lineNum":" 1831","line":"    pub fn toLocaleLowerCase(this: *const JStringUnmanaged, allocator: std.mem.Allocator) anyerror!JStringUnmanaged {"},
{"lineNum":" 1832","line":"        _ = this;"},
{"lineNum":" 1833","line":"        _ = allocator;"},
{"lineNum":" 1834","line":"        @compileError(\"TODO, not yet implemented!\");"},
{"lineNum":" 1835","line":"    }"},
{"lineNum":" 1836","line":""},
{"lineNum":" 1837","line":"    // ** toLocaleUpperCase"},
{"lineNum":" 1838","line":""},
{"lineNum":" 1839","line":"    pub fn toLocalUpperCase(this: *const JStringUnmanaged, allocator: std.mem.Allocator) anyerror!JStringUnmanaged {"},
{"lineNum":" 1840","line":"        _ = this;"},
{"lineNum":" 1841","line":"        _ = allocator;"},
{"lineNum":" 1842","line":"        @compileError(\"TODO, not yet implemented!\");"},
{"lineNum":" 1843","line":"    }"},
{"lineNum":" 1844","line":""},
{"lineNum":" 1845","line":"    // ** toLowerCase"},
{"lineNum":" 1846","line":""},
{"lineNum":" 1847","line":"    pub fn toLowerCase(this: *const JStringUnmanaged, allocator: std.mem.Allocator) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"770","possible_hits":"1",},
{"lineNum":" 1848","line":"        if (this.len() == 0) {","class":"lineCov","hits":"1","order":"771","possible_hits":"1",},
{"lineNum":" 1849","line":"            return JStringUnmanaged.newEmpty(allocator);","class":"lineCov","hits":"1","order":"787","possible_hits":"1",},
{"lineNum":" 1850","line":"        }"},
{"lineNum":" 1851","line":""},
{"lineNum":" 1852","line":"        var new_slice = try allocator.alloc(u8, this.str_slice.len);","class":"linePartCov","hits":"1","order":"772","possible_hits":"2",},
{"lineNum":" 1853","line":"        @memcpy(new_slice, this.str_slice);","class":"lineCov","hits":"2","order":"773","possible_hits":"2",},
{"lineNum":" 1854","line":"        var i: usize = 0;","class":"lineCov","hits":"1","order":"774","possible_hits":"1",},
{"lineNum":" 1855","line":"        while (i < new_slice.len) {","class":"lineCov","hits":"1","order":"775","possible_hits":"1",},
{"lineNum":" 1856","line":"            const size = try std.unicode.utf8ByteSequenceLength(new_slice[i]);","class":"lineCov","hits":"2","order":"776","possible_hits":"2",},
{"lineNum":" 1857","line":"            if (size == 1) {","class":"lineCov","hits":"1","order":"777","possible_hits":"1",},
{"lineNum":" 1858","line":"                new_slice[i] = std.ascii.toLower(new_slice[i]);","class":"lineCov","hits":"1","order":"778","possible_hits":"1",},
{"lineNum":" 1859","line":"            }"},
{"lineNum":" 1860","line":"            i += size;","class":"linePartCov","hits":"3","order":"779","possible_hits":"4",},
{"lineNum":" 1861","line":"        }"},
{"lineNum":" 1862","line":"        return JStringUnmanaged{","class":"lineCov","hits":"1","order":"780","possible_hits":"1",},
{"lineNum":" 1863","line":"            .str_slice = new_slice,"},
{"lineNum":" 1864","line":"        };"},
{"lineNum":" 1865","line":"    }"},
{"lineNum":" 1866","line":""},
{"lineNum":" 1867","line":"    // ** toUpperCase"},
{"lineNum":" 1868","line":""},
{"lineNum":" 1869","line":"    pub fn toUpperCase(this: *const JStringUnmanaged, allocator: std.mem.Allocator) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"757","possible_hits":"1",},
{"lineNum":" 1870","line":"        if (this.len() == 0) {","class":"lineCov","hits":"1","order":"758","possible_hits":"1",},
{"lineNum":" 1871","line":"            return JStringUnmanaged.newEmpty(allocator);","class":"lineCov","hits":"1","order":"784","possible_hits":"1",},
{"lineNum":" 1872","line":"        }"},
{"lineNum":" 1873","line":""},
{"lineNum":" 1874","line":"        var new_slice = try allocator.alloc(u8, this.str_slice.len);","class":"linePartCov","hits":"1","order":"759","possible_hits":"2",},
{"lineNum":" 1875","line":"        @memcpy(new_slice, this.str_slice);","class":"lineCov","hits":"2","order":"760","possible_hits":"2",},
{"lineNum":" 1876","line":"        var i: usize = 0;","class":"lineCov","hits":"1","order":"761","possible_hits":"1",},
{"lineNum":" 1877","line":"        while (i < new_slice.len) {","class":"lineCov","hits":"1","order":"762","possible_hits":"1",},
{"lineNum":" 1878","line":"            const size = try std.unicode.utf8ByteSequenceLength(new_slice[i]);","class":"lineCov","hits":"2","order":"763","possible_hits":"2",},
{"lineNum":" 1879","line":"            if (size == 1) {","class":"lineCov","hits":"1","order":"764","possible_hits":"1",},
{"lineNum":" 1880","line":"                new_slice[i] = std.ascii.toUpper(new_slice[i]);","class":"lineCov","hits":"1","order":"765","possible_hits":"1",},
{"lineNum":" 1881","line":"            }"},
{"lineNum":" 1882","line":"            i += size;","class":"linePartCov","hits":"3","order":"766","possible_hits":"4",},
{"lineNum":" 1883","line":"        }"},
{"lineNum":" 1884","line":"        return JStringUnmanaged{","class":"lineCov","hits":"1","order":"767","possible_hits":"1",},
{"lineNum":" 1885","line":"            .str_slice = new_slice,"},
{"lineNum":" 1886","line":"        };"},
{"lineNum":" 1887","line":"    }"},
{"lineNum":" 1888","line":""},
{"lineNum":" 1889","line":"    // ** toWellFormed"},
{"lineNum":" 1890","line":""},
{"lineNum":" 1891","line":"    /// toWellFormed does not make sense in zig as zig is u8/utf8 based. No need to use this."},
{"lineNum":" 1892","line":"    pub fn toWellFormed(this: *const JStringUnmanaged) void {"},
{"lineNum":" 1893","line":"        _ = this;"},
{"lineNum":" 1894","line":"        @compileError(\"toWellFormed does not make sense in zig as zig is u8/utf8 based. No need to use this.\");"},
{"lineNum":" 1895","line":"    }"},
{"lineNum":" 1896","line":""},
{"lineNum":" 1897","line":"    // ** trim"},
{"lineNum":" 1898","line":""},
{"lineNum":" 1899","line":"    /// essentially =trimStart(trimEnd()). All temp strings produced in steps are deinited."},
{"lineNum":" 1900","line":"    pub fn trim(this: *const JStringUnmanaged, allocator: std.mem.Allocator) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"447","possible_hits":"1",},
{"lineNum":" 1901","line":"        const str1 = try this.trimStart(allocator);","class":"lineCov","hits":"1","order":"448","possible_hits":"1",},
{"lineNum":" 1902","line":"        if (str1.len() == 0) {","class":"lineCov","hits":"1","order":"449","possible_hits":"1",},
{"lineNum":" 1903","line":"            return str1;","class":"lineCov","hits":"1","order":"459","possible_hits":"1",},
{"lineNum":" 1904","line":"        }"},
{"lineNum":" 1905","line":"        const str2 = try str1.trimEnd(allocator);","class":"linePartCov","hits":"1","order":"450","possible_hits":"2",},
{"lineNum":" 1906","line":"        defer str1.deinit(allocator);","class":"lineCov","hits":"1","order":"452","possible_hits":"1",},
{"lineNum":" 1907","line":"        return str2;","class":"lineCov","hits":"2","order":"451","possible_hits":"2",},
{"lineNum":" 1908","line":"    }"},
{"lineNum":" 1909","line":""},
{"lineNum":" 1910","line":"    // ** trimEnd"},
{"lineNum":" 1911","line":""},
{"lineNum":" 1912","line":"    /// trim blank chars(\' \', \'\\t\', \'\\n\' and \'\\r\') from the end. If there is nothing to trim it will return a clone of"},
{"lineNum":" 1913","line":"    /// original string."},
{"lineNum":" 1914","line":"    pub fn trimEnd(this: *const JStringUnmanaged, allocator: std.mem.Allocator) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"426","possible_hits":"1",},
{"lineNum":" 1915","line":"        const first_nonblank = brk: {"},
{"lineNum":" 1916","line":"            var i = this.str_slice.len - 1;","class":"linePartCov","hits":"1","order":"427","possible_hits":"2",},
{"lineNum":" 1917","line":"            while (i >= 0) {"},
{"lineNum":" 1918","line":"                switch (this.str_slice[i]) {","class":"lineCov","hits":"2","order":"428","possible_hits":"2",},
{"lineNum":" 1919","line":"                    \' \', \'\\t\', \'\\n\', \'\\r\' => {"},
{"lineNum":" 1920","line":"                        if (i > 0) {","class":"lineCov","hits":"1","order":"429","possible_hits":"1",},
{"lineNum":" 1921","line":"                            i -= 1;","class":"linePartCov","hits":"1","order":"430","possible_hits":"2",},
{"lineNum":" 1922","line":"                            continue;","class":"lineCov","hits":"1","order":"431","possible_hits":"1",},
{"lineNum":" 1923","line":"                        } else {"},
{"lineNum":" 1924","line":"                            break :brk 0;","class":"lineCov","hits":"4","order":"432","possible_hits":"4",},
{"lineNum":" 1925","line":"                        }"},
{"lineNum":" 1926","line":"                    },"},
{"lineNum":" 1927","line":"                    else => break :brk i,"},
{"lineNum":" 1928","line":"                }"},
{"lineNum":" 1929","line":"            }"},
{"lineNum":" 1930","line":"            break :brk 0;"},
{"lineNum":" 1931","line":"        };"},
{"lineNum":" 1932","line":"        if (first_nonblank == this.str_slice.len - 1) {","class":"linePartCov","hits":"1","order":"433","possible_hits":"2",},
{"lineNum":" 1933","line":"            return this.clone(allocator);","class":"lineCov","hits":"3","order":"439","possible_hits":"3",},
{"lineNum":" 1934","line":"        } else if (first_nonblank == 0) {","class":"lineCov","hits":"1","order":"434","possible_hits":"1",},
{"lineNum":" 1935","line":"            return JStringUnmanaged.newEmpty(allocator);","class":"lineCov","hits":"2","order":"443","possible_hits":"2",},
{"lineNum":" 1936","line":"        } else {"},
{"lineNum":" 1937","line":"            const new_slice = this.str_slice[0 .. first_nonblank + 1];","class":"linePartCov","hits":"2","order":"435","possible_hits":"3",},
{"lineNum":" 1938","line":"            return JStringUnmanaged.newFromSlice(allocator, new_slice);","class":"lineCov","hits":"2","order":"436","possible_hits":"2",},
{"lineNum":" 1939","line":"        }"},
{"lineNum":" 1940","line":"    }"},
{"lineNum":" 1941","line":""},
{"lineNum":" 1942","line":"    // ** trimStart"},
{"lineNum":" 1943","line":""},
{"lineNum":" 1944","line":"    /// trim blank chars(\' \', \'\\t\', \'\\n\' and \'\\r\') from beginning. If there is nothing to trim it will return a clone"},
{"lineNum":" 1945","line":"    /// of original string."},
{"lineNum":" 1946","line":"    pub fn trimStart(this: *const JStringUnmanaged, allocator: std.mem.Allocator) anyerror!JStringUnmanaged {","class":"lineCov","hits":"1","order":"409","possible_hits":"1",},
{"lineNum":" 1947","line":"        const first_nonblank = brk: {","class":"lineCov","hits":"1","order":"410","possible_hits":"1",},
{"lineNum":" 1948","line":"            for (this.str_slice, 0..) |char, i| {","class":"lineCov","hits":"3","order":"411","possible_hits":"3",},
{"lineNum":" 1949","line":"                switch (char) {","class":"lineCov","hits":"2","order":"412","possible_hits":"2",},
{"lineNum":" 1950","line":"                    \' \', \'\\t\', \'\\n\', \'\\r\' => continue,"},
{"lineNum":" 1951","line":"                    else => break :brk i,"},
{"lineNum":" 1952","line":"                }"},
{"lineNum":" 1953","line":"            }"},
{"lineNum":" 1954","line":"            break :brk this.len();","class":"lineCov","hits":"1","order":"422","possible_hits":"1",},
{"lineNum":" 1955","line":"        };"},
{"lineNum":" 1956","line":"        if (first_nonblank == 0) {","class":"lineCov","hits":"1","order":"413","possible_hits":"1",},
{"lineNum":" 1957","line":"            return this.clone(allocator);","class":"lineCov","hits":"3","order":"418","possible_hits":"3",},
{"lineNum":" 1958","line":"        } else {"},
{"lineNum":" 1959","line":"            const new_slice = this.str_slice[first_nonblank..];","class":"lineCov","hits":"3","order":"414","possible_hits":"3",},
{"lineNum":" 1960","line":"            return JStringUnmanaged.newFromSlice(allocator, new_slice);","class":"lineCov","hits":"2","order":"415","possible_hits":"2",},
{"lineNum":" 1961","line":"        }"},
{"lineNum":" 1962","line":"    }"},
{"lineNum":" 1963","line":""},
{"lineNum":" 1964","line":"    // ** valueOf"},
{"lineNum":" 1965","line":""},
{"lineNum":" 1966","line":"    pub inline fn valueOf(this: *const JStringUnmanaged) []const u8 {"},
{"lineNum":" 1967","line":"        return this.str_slice;","class":"lineCov","hits":"1","order":"1730","possible_hits":"1",},
{"lineNum":" 1968","line":"    }"},
{"lineNum":" 1969","line":"};"},
{"lineNum":" 1970","line":""},
{"lineNum":" 1971","line":"// util functions"},
{"lineNum":" 1972","line":""},
{"lineNum":" 1973","line":"pub inline fn freeJStringArray(a: []JString) void {"},
{"lineNum":" 1974","line":"    if (a.len > 0) {","class":"lineCov","hits":"1","order":"1706","possible_hits":"1",},
{"lineNum":" 1975","line":"        const allocator = a[0].allocator;","class":"lineCov","hits":"3","order":"1707","possible_hits":"3",},
{"lineNum":" 1976","line":"        for (0..a.len) |i| a[i].deinit();","class":"lineCov","hits":"2","order":"1708","possible_hits":"2",},
{"lineNum":" 1977","line":"        allocator.free(a);","class":"linePartCov","hits":"1","order":"1711","possible_hits":"2",},
{"lineNum":" 1978","line":"    }"},
{"lineNum":" 1979","line":"}"},
{"lineNum":" 1980","line":""},
{"lineNum":" 1981","line":"pub fn freeJStringUnmanagedArray(allocator: std.mem.Allocator, a: []JStringUnmanaged) void {","class":"lineCov","hits":"1","order":"1691","possible_hits":"1",},
{"lineNum":" 1982","line":"    if (a.len > 0) {","class":"lineCov","hits":"2","order":"1692","possible_hits":"2",},
{"lineNum":" 1983","line":"        for (0..a.len) |i| a[i].deinit(allocator);","class":"lineCov","hits":"5","order":"1693","possible_hits":"5",},
{"lineNum":" 1984","line":"        allocator.free(a);","class":"linePartCov","hits":"1","order":"1694","possible_hits":"2",},
{"lineNum":" 1985","line":"    }"},
{"lineNum":" 1986","line":"}"},
{"lineNum":" 1987","line":""},
{"lineNum":" 1988","line":"// optional components"},
{"lineNum":" 1989","line":""},
{"lineNum":" 1990","line":"fn defineArenaAllocator(comptime enable: bool) type {"},
{"lineNum":" 1991","line":"    if (enable) {"},
{"lineNum":" 1992","line":"        // A copy of zig\'s std.heap.ArenaAllocator for possibility to optimise for string usage."},
{"lineNum":" 1993","line":"        // This allocator takes an existing allocator, wraps it, and provides an"},
{"lineNum":" 1994","line":"        // interface where you can allocate without freeing, and then free it all"},
{"lineNum":" 1995","line":"        // together."},
{"lineNum":" 1996","line":"        return struct {"},
{"lineNum":" 1997","line":"            const Self = @This();"},
{"lineNum":" 1998","line":""},
{"lineNum":" 1999","line":"            child_allocator: std.mem.Allocator,"},
{"lineNum":" 2000","line":"            state: State,"},
{"lineNum":" 2001","line":""},
{"lineNum":" 2002","line":"            /// Inner state of ArenaAllocator. Can be stored rather than the entire ArenaAllocator"},
{"lineNum":" 2003","line":"            /// as a memory-saving optimization."},
{"lineNum":" 2004","line":"            pub const State = struct {"},
{"lineNum":" 2005","line":"                buffer_list: std.SinglyLinkedList(usize) = .{},"},
{"lineNum":" 2006","line":"                end_index: usize = 0, // the next addr to write in cur_buf"},
{"lineNum":" 2007","line":""},
{"lineNum":" 2008","line":"                pub fn promote(self: State, child_allocator: std.mem.Allocator) Self {","class":"lineCov","hits":"1","order":"5","possible_hits":"1",},
{"lineNum":" 2009","line":"                    return .{","class":"lineCov","hits":"1","order":"6","possible_hits":"1",},
{"lineNum":" 2010","line":"                        .child_allocator = child_allocator,"},
{"lineNum":" 2011","line":"                        .state = self,"},
{"lineNum":" 2012","line":"                    };"},
{"lineNum":" 2013","line":"                }"},
{"lineNum":" 2014","line":"            };"},
{"lineNum":" 2015","line":""},
{"lineNum":" 2016","line":"            pub fn allocator(self: *Self) std.mem.Allocator {","class":"lineCov","hits":"1","order":"34","possible_hits":"1",},
{"lineNum":" 2017","line":"                return .{","class":"lineCov","hits":"1","order":"35","possible_hits":"1",},
{"lineNum":" 2018","line":"                    .ptr = self,"},
{"lineNum":" 2019","line":"                    .vtable = &.{"},
{"lineNum":" 2020","line":"                        .alloc = alloc,"},
{"lineNum":" 2021","line":"                        .resize = resize,"},
{"lineNum":" 2022","line":"                        .free = free,"},
{"lineNum":" 2023","line":"                    },"},
{"lineNum":" 2024","line":"                };"},
{"lineNum":" 2025","line":"            }"},
{"lineNum":" 2026","line":""},
{"lineNum":" 2027","line":"            const BufNode = std.SinglyLinkedList(usize).Node;"},
{"lineNum":" 2028","line":""},
{"lineNum":" 2029","line":"            pub fn init(child_allocator: std.mem.Allocator) Self {","class":"lineCov","hits":"2","order":"3","possible_hits":"2",},
{"lineNum":" 2030","line":"                return (State{}).promote(child_allocator);","class":"lineCov","hits":"1","order":"4","possible_hits":"1",},
{"lineNum":" 2031","line":"            }"},
{"lineNum":" 2032","line":""},
{"lineNum":" 2033","line":"            pub fn deinit(self: *Self) void {","class":"lineCov","hits":"1","order":"23","possible_hits":"1",},
{"lineNum":" 2034","line":"                // NOTE: When changing this, make sure `reset()` is adjusted accordingly!"},
{"lineNum":" 2035","line":"                var it = self.state.buffer_list.first;","class":"lineCov","hits":"1","order":"24","possible_hits":"1",},
{"lineNum":" 2036","line":"                while (it) |node| {","class":"lineCov","hits":"2","order":"25","possible_hits":"2",},
{"lineNum":" 2037","line":"                    // this has to occur before the free because the free frees node"},
{"lineNum":" 2038","line":"                    const next_it = node.next;","class":"lineCov","hits":"1","order":"99","possible_hits":"1",},
{"lineNum":" 2039","line":"                    const align_bits = std.math.log2_int(usize, @alignOf(BufNode));","class":"lineCov","hits":"1","order":"100","possible_hits":"1",},
{"lineNum":" 2040","line":"                    const alloc_buf = @as([*]u8, @ptrCast(node))[0..node.data];","class":"lineCov","hits":"3","order":"101","possible_hits":"3",},
{"lineNum":" 2041","line":"                    self.child_allocator.rawFree(alloc_buf, align_bits, @returnAddress());","class":"lineCov","hits":"1","order":"102","possible_hits":"1",},
{"lineNum":" 2042","line":"                    it = next_it;","class":"lineCov","hits":"4","order":"26","possible_hits":"4",},
{"lineNum":" 2043","line":"                }"},
{"lineNum":" 2044","line":"            }"},
{"lineNum":" 2045","line":""},
{"lineNum":" 2046","line":"            pub const ResetMode = union(enum) {"},
{"lineNum":" 2047","line":"                /// Releases all allocated memory in the arena."},
{"lineNum":" 2048","line":"                free_all,"},
{"lineNum":" 2049","line":"                /// This will pre-heat the arena for future allocations by allocating a"},
{"lineNum":" 2050","line":"                /// large enough buffer for all previously done allocations."},
{"lineNum":" 2051","line":"                /// Preheating will speed up the allocation process by invoking the"},
{"lineNum":" 2052","line":"                /// backing allocator less often than before. If `reset()` is used in a"},
{"lineNum":" 2053","line":"                /// loop, this means that after the biggest operation, no memory"},
{"lineNum":" 2054","line":"                /// allocations are performed anymore."},
{"lineNum":" 2055","line":"                retain_capacity,"},
{"lineNum":" 2056","line":"                /// This is the same as `retain_capacity`, but the memory will be shrunk"},
{"lineNum":" 2057","line":"                /// to this value if it exceeds the limit."},
{"lineNum":" 2058","line":"                retain_with_limit: usize,"},
{"lineNum":" 2059","line":"            };"},
{"lineNum":" 2060","line":""},
{"lineNum":" 2061","line":"            /// Queries the current memory use of this arena."},
{"lineNum":" 2062","line":"            /// This will **not** include the storage required for internal keeping."},
{"lineNum":" 2063","line":"            pub fn queryCapacity(self: Self) usize {","class":"lineCov","hits":"2","order":"16","possible_hits":"2",},
{"lineNum":" 2064","line":"                var size: usize = 0;","class":"lineCov","hits":"1","order":"17","possible_hits":"1",},
{"lineNum":" 2065","line":"                var it = self.state.buffer_list.first;","class":"lineCov","hits":"1","order":"18","possible_hits":"1",},
{"lineNum":" 2066","line":"                while (it) |node| : (it = node.next) {","class":"lineCov","hits":"3","order":"19","possible_hits":"3",},
{"lineNum":" 2067","line":"                    // Compute the actually allocated size excluding the"},
{"lineNum":" 2068","line":"                    // linked list node."},
{"lineNum":" 2069","line":"                    size += node.data - @sizeOf(BufNode);","class":"linePartCov","hits":"1","order":"73","possible_hits":"2",},
{"lineNum":" 2070","line":"                }"},
{"lineNum":" 2071","line":"                return size;","class":"lineCov","hits":"1","order":"20","possible_hits":"1",},
{"lineNum":" 2072","line":"            }"},
{"lineNum":" 2073","line":""},
{"lineNum":" 2074","line":"            /// Resets the arena allocator and frees all allocated memory."},
{"lineNum":" 2075","line":"            ///"},
{"lineNum":" 2076","line":"            /// `mode` defines how the currently allocated memory is handled."},
{"lineNum":" 2077","line":"            /// See the variant documentation for `ResetMode` for the effects of each mode."},
{"lineNum":" 2078","line":"            ///"},
{"lineNum":" 2079","line":"            /// The function will return whether the reset operation was successful or not."},
{"lineNum":" 2080","line":"            /// If the reallocation  failed `false` is returned. The arena will still be fully"},
{"lineNum":" 2081","line":"            /// functional in that case, all memory is released. Future allocations just might"},
{"lineNum":" 2082","line":"            /// be slower."},
{"lineNum":" 2083","line":"            ///"},
{"lineNum":" 2084","line":"            /// NOTE: If `mode` is `free_all`, the function will always return `true`."},
{"lineNum":" 2085","line":"            pub fn reset(self: *Self, mode: ResetMode) bool {","class":"lineCov","hits":"1","order":"13","possible_hits":"1",},
{"lineNum":" 2086","line":"                // Some words on the implementation:"},
{"lineNum":" 2087","line":"                // The reset function can be implemented with two basic approaches:"},
{"lineNum":" 2088","line":"                // - Counting how much bytes were allocated since the last reset, and storing that"},
{"lineNum":" 2089","line":"                //   information in State. This will make reset fast and alloc only a teeny tiny bit"},
{"lineNum":" 2090","line":"                //   slower."},
{"lineNum":" 2091","line":""},
{"lineNum":" 2092","line":"                // - Counting how much bytes were allocated by iterating the chunk linked list. This"},
{"lineNum":" 2093","line":"                //   will make reset slower, but alloc() keeps the same speed when reset() as if reset()"},
{"lineNum":" 2094","line":"                //   would not exist."},
{"lineNum":" 2095","line":"                //"},
{"lineNum":" 2096","line":""},
{"lineNum":" 2097","line":"                // The second variant was chosen for implementation, as with more and more calls to reset(),"},
{"lineNum":" 2098","line":"                // the function will get faster and faster. At one point, the complexity of the function"},
{"lineNum":" 2099","line":"                // will drop to amortized O(1), as we\'re only ever having a single chunk that will not be"},
{"lineNum":" 2100","line":"                // reallocated, and we\'re not even touching the backing allocator anymore."},
{"lineNum":" 2101","line":"                //"},
{"lineNum":" 2102","line":""},
{"lineNum":" 2103","line":"                // Thus, only the first hand full of calls to reset() will actually need to iterate the linked"},
{"lineNum":" 2104","line":"                // list, all future calls are just taking the first node, and only resetting the `end_index`"},
{"lineNum":" 2105","line":"                // value."},
{"lineNum":" 2106","line":""},
{"lineNum":" 2107","line":"                const requested_capacity = switch (mode) {","class":"linePartCov","hits":"1","order":"14","possible_hits":"2",},
{"lineNum":" 2108","line":"                    .retain_capacity => self.queryCapacity(),","class":"lineCov","hits":"1","order":"15","possible_hits":"1",},
{"lineNum":" 2109","line":"                    .retain_with_limit => |limit| @min(limit, self.queryCapacity()),","class":"lineCov","hits":"1","order":"109","possible_hits":"1",},
{"lineNum":" 2110","line":"                    .free_all => 0,"},
{"lineNum":" 2111","line":"                };"},
{"lineNum":" 2112","line":""},
{"lineNum":" 2113","line":"                if (requested_capacity == 0) {","class":"lineCov","hits":"1","order":"21","possible_hits":"1",},
{"lineNum":" 2114","line":"                    // just reset when we don\'t have anything to reallocate"},
{"lineNum":" 2115","line":"                    self.deinit();","class":"lineCov","hits":"1","order":"22","possible_hits":"1",},
{"lineNum":" 2116","line":"                    self.state = State{};","class":"lineCov","hits":"1","order":"27","possible_hits":"1",},
{"lineNum":" 2117","line":"                    return true;","class":"lineCov","hits":"1","order":"28","possible_hits":"1",},
{"lineNum":" 2118","line":"                }"},
{"lineNum":" 2119","line":""},
{"lineNum":" 2120","line":"                const total_size = requested_capacity + @sizeOf(BufNode);","class":"linePartCov","hits":"1","order":"74","possible_hits":"2",},
{"lineNum":" 2121","line":"                const align_bits = std.math.log2_int(usize, @alignOf(BufNode));","class":"lineCov","hits":"1","order":"75","possible_hits":"1",},
{"lineNum":" 2122","line":"                // Free all nodes except for the last one"},
{"lineNum":" 2123","line":""},
{"lineNum":" 2124","line":"                var it = self.state.buffer_list.first;","class":"lineCov","hits":"1","order":"76","possible_hits":"1",},
{"lineNum":" 2125","line":"                const maybe_first_node = while (it) |node| {","class":"lineCov","hits":"3","order":"77","possible_hits":"3",},
{"lineNum":" 2126","line":"                    // this has to occur before the free because the free frees node"},
{"lineNum":" 2127","line":"                    const next_it = node.next;","class":"lineCov","hits":"1","order":"78","possible_hits":"1",},
{"lineNum":" 2128","line":"                    if (next_it == null)","class":"lineCov","hits":"2","order":"79","possible_hits":"2",},
{"lineNum":" 2129","line":"                        break node;"},
{"lineNum":" 2130","line":"                    const alloc_buf = @as([*]u8, @ptrCast(node))[0..node.data];","class":"lineCov","hits":"3","order":"80","possible_hits":"3",},
{"lineNum":" 2131","line":"                    self.child_allocator.rawFree(alloc_buf, align_bits, @returnAddress());","class":"lineCov","hits":"1","order":"81","possible_hits":"1",},
{"lineNum":" 2132","line":"                    it = next_it;","class":"linePartCov","hits":"3","order":"82","possible_hits":"4",},
{"lineNum":" 2133","line":"                } else null;"},
{"lineNum":" 2134","line":"                std.debug.assert(maybe_first_node == null or maybe_first_node.?.next == null);","class":"linePartCov","hits":"2","order":"83","possible_hits":"3",},
{"lineNum":" 2135","line":"                // reset the state before we try resizing the buffers, so we definitely have reset the arena to 0."},
{"lineNum":" 2136","line":""},
{"lineNum":" 2137","line":"                self.state.end_index = 0;","class":"lineCov","hits":"1","order":"84","possible_hits":"1",},
{"lineNum":" 2138","line":"                if (maybe_first_node) |first_node| {","class":"lineCov","hits":"2","order":"85","possible_hits":"2",},
{"lineNum":" 2139","line":"                    self.state.buffer_list.first = first_node;","class":"lineCov","hits":"1","order":"86","possible_hits":"1",},
{"lineNum":" 2140","line":"                    // perfect, no need to invoke the child_allocator"},
{"lineNum":" 2141","line":"                    if (first_node.data == total_size)","class":"lineCov","hits":"1","order":"87","possible_hits":"1",},
{"lineNum":" 2142","line":"                        return true;","class":"lineCov","hits":"1","order":"97","possible_hits":"1",},
{"lineNum":" 2143","line":"                    const first_alloc_buf = @as([*]u8, @ptrCast(first_node))[0..first_node.data];","class":"lineCov","hits":"3","order":"88","possible_hits":"3",},
{"lineNum":" 2144","line":"                    if (self.child_allocator.rawResize(first_alloc_buf, align_bits, total_size, @returnAddress())) {","class":"lineCov","hits":"1","order":"89","possible_hits":"1",},
{"lineNum":" 2145","line":"                        // successful resize"},
{"lineNum":" 2146","line":"                        first_node.data = total_size;","class":"lineCov","hits":"1","order":"110","possible_hits":"1",},
{"lineNum":" 2147","line":"                    } else {"},
{"lineNum":" 2148","line":"                        // manual realloc"},
{"lineNum":" 2149","line":"                        const new_ptr = self.child_allocator.rawAlloc(total_size, align_bits, @returnAddress()) orelse {","class":"lineCov","hits":"1","order":"90","possible_hits":"1",},
{"lineNum":" 2150","line":"                            // we failed to preheat the arena properly, signal this to the user."},
{"lineNum":" 2151","line":"                            return false;","class":"linePartCov","hits":"1","order":"91","possible_hits":"2",},
{"lineNum":" 2152","line":"                        };"},
{"lineNum":" 2153","line":"                        self.child_allocator.rawFree(first_alloc_buf, align_bits, @returnAddress());","class":"lineCov","hits":"1","order":"92","possible_hits":"1",},
{"lineNum":" 2154","line":"                        const node: *BufNode = @ptrCast(@alignCast(new_ptr));","class":"lineCov","hits":"3","order":"93","possible_hits":"3",},
{"lineNum":" 2155","line":"                        node.* = .{ .data = total_size };","class":"lineCov","hits":"1","order":"94","possible_hits":"1",},
{"lineNum":" 2156","line":"                        self.state.buffer_list.first = node;","class":"linePartCov","hits":"2","order":"95","possible_hits":"3",},
{"lineNum":" 2157","line":"                    }"},
{"lineNum":" 2158","line":"                }"},
{"lineNum":" 2159","line":"                return true;","class":"lineCov","hits":"1","order":"96","possible_hits":"1",},
{"lineNum":" 2160","line":"            }"},
{"lineNum":" 2161","line":""},
{"lineNum":" 2162","line":"            inline fn curAllocBuf(cur_node: *BufNode) []u8 {"},
{"lineNum":" 2163","line":"                return @as([*]u8, @ptrCast(cur_node))[0..cur_node.data];","class":"lineCov","hits":"8","order":"55","possible_hits":"8",},
{"lineNum":" 2164","line":"            }"},
{"lineNum":" 2165","line":""},
{"lineNum":" 2166","line":"            inline fn curBuf(cur_alloc_buf: []u8) []u8 {"},
{"lineNum":" 2167","line":"                return cur_alloc_buf[@sizeOf(BufNode)..];","class":"lineCov","hits":"9","order":"57","possible_hits":"9",},
{"lineNum":" 2168","line":"            }"},
{"lineNum":" 2169","line":""},
{"lineNum":" 2170","line":"            inline fn actualMinSize(minimum_size: usize) usize {"},
{"lineNum":" 2171","line":"                // seems each node is layed out as"},
{"lineNum":" 2172","line":"                //    |BufNode struct| data buf (minimum_size)|"},
{"lineNum":" 2173","line":"                // so calculate size"},
{"lineNum":" 2174","line":"                return minimum_size + @sizeOf(BufNode);","class":"linePartCov","hits":"2","order":"44","possible_hits":"3",},
{"lineNum":" 2175","line":"            }"},
{"lineNum":" 2176","line":""},
{"lineNum":" 2177","line":"            fn createNode(self: *Self, prev_len: usize, minimum_size: usize) ?*BufNode {","class":"lineCov","hits":"1","order":"42","possible_hits":"1",},
{"lineNum":" 2178","line":"                const actual_min_size = actualMinSize(minimum_size);","class":"lineCov","hits":"1","order":"43","possible_hits":"1",},
{"lineNum":" 2179","line":"                const len = prev_len + actual_min_size;","class":"lineCov","hits":"1","order":"45","possible_hits":"1",},
{"lineNum":" 2180","line":"                const log2_align = comptime std.math.log2_int(usize, @alignOf(BufNode));","class":"lineCov","hits":"1","order":"46","possible_hits":"1",},
{"lineNum":" 2181","line":"                const ptr = self.child_allocator.rawAlloc(len, log2_align, @returnAddress()) orelse","class":"lineCov","hits":"1","order":"47","possible_hits":"1",},
{"lineNum":" 2182","line":"                    return null;","class":"linePartCov","hits":"1","order":"48","possible_hits":"2",},
{"lineNum":" 2183","line":"                const buf_node: *BufNode = @ptrCast(@alignCast(ptr));","class":"lineCov","hits":"3","order":"49","possible_hits":"3",},
{"lineNum":" 2184","line":"                buf_node.* = .{ .data = len };","class":"lineCov","hits":"1","order":"50","possible_hits":"1",},
{"lineNum":" 2185","line":"                self.state.buffer_list.prepend(buf_node);","class":"lineCov","hits":"1","order":"51","possible_hits":"1",},
{"lineNum":" 2186","line":"                self.state.end_index = 0;","class":"lineCov","hits":"1","order":"52","possible_hits":"1",},
{"lineNum":" 2187","line":"                return buf_node;","class":"lineCov","hits":"1","order":"53","possible_hits":"1",},
{"lineNum":" 2188","line":"            }"},
{"lineNum":" 2189","line":""},
{"lineNum":" 2190","line":"            fn alloc(ctx: *anyopaque, n: usize, log2_ptr_align: u8, ra: usize) ?[*]u8 {","class":"lineCov","hits":"1","order":"36","possible_hits":"1",},
{"lineNum":" 2191","line":"                const self: *Self = @ptrCast(@alignCast(ctx));","class":"lineCov","hits":"2","order":"38","possible_hits":"2",},
{"lineNum":" 2192","line":"                _ = ra;"},
{"lineNum":" 2193","line":""},
{"lineNum":" 2194","line":"                const ptr_align = @as(usize, 1) << @as(std.mem.Allocator.Log2Align, @intCast(log2_ptr_align));","class":"lineCov","hits":"3","order":"39","possible_hits":"3",},
{"lineNum":" 2195","line":"                var cur_node = if (self.state.buffer_list.first) |first_node|","class":"lineCov","hits":"2","order":"40","possible_hits":"2",},
{"lineNum":" 2196","line":"                    first_node"},
{"lineNum":" 2197","line":"                else"},
{"lineNum":" 2198","line":"                    (self.createNode(0, n + ptr_align) orelse return null);","class":"lineCov","hits":"2","order":"41","possible_hits":"2",},
{"lineNum":" 2199","line":"                while (true) {"},
{"lineNum":" 2200","line":"                    const cur_alloc_buf = curAllocBuf(cur_node);","class":"lineCov","hits":"1","order":"54","possible_hits":"1",},
{"lineNum":" 2201","line":"                    const cur_buf = curBuf(cur_alloc_buf);","class":"lineCov","hits":"1","order":"56","possible_hits":"1",},
{"lineNum":" 2202","line":""},
{"lineNum":" 2203","line":"                    // find new_end_index as follows"},
{"lineNum":" 2204","line":"                    //    Memory Layout"},
{"lineNum":" 2205","line":"                    //    |--------------------|-----------------------|------------------->"},
{"lineNum":" 2206","line":"                    //    ^cur ptr+end_index   ^cur ptr_aligned addr   ^next ptr+end_index (+n)"},
{"lineNum":" 2207","line":"                    //         ^addr            ^adjusted_addr"},
{"lineNum":" 2208","line":"                    //         ^----------------^"},
{"lineNum":" 2209","line":"                    //          ^delta"},
{"lineNum":" 2210","line":"                    //          so: new_end_index = end_index + delta"},
{"lineNum":" 2211","line":"                    const addr = @intFromPtr(cur_buf.ptr) + self.state.end_index;","class":"linePartCov","hits":"1","order":"58","possible_hits":"2",},
{"lineNum":" 2212","line":"                    const adjusted_addr = std.mem.alignForward(usize, addr, ptr_align);","class":"lineCov","hits":"1","order":"59","possible_hits":"1",},
{"lineNum":" 2213","line":"                    const adjusted_index = self.state.end_index + (adjusted_addr - addr);","class":"lineCov","hits":"1","order":"60","possible_hits":"1",},
{"lineNum":" 2214","line":"                    const new_end_index = adjusted_index + n;","class":"lineCov","hits":"1","order":"61","possible_hits":"1",},
{"lineNum":" 2215","line":""},
{"lineNum":" 2216","line":"                    if (new_end_index <= cur_buf.len) {","class":"lineCov","hits":"1","order":"62","possible_hits":"1",},
{"lineNum":" 2217","line":"                        const result = cur_buf[adjusted_index..new_end_index];","class":"lineCov","hits":"3","order":"63","possible_hits":"3",},
{"lineNum":" 2218","line":"                        self.state.end_index = new_end_index;","class":"lineCov","hits":"1","order":"64","possible_hits":"1",},
{"lineNum":" 2219","line":"                        return result.ptr;","class":"lineCov","hits":"2","order":"65","possible_hits":"2",},
{"lineNum":" 2220","line":"                    }"},
{"lineNum":" 2221","line":""},
{"lineNum":" 2222","line":"                    const bigger_buf_size = actualMinSize(new_end_index);","class":"lineCov","hits":"1","order":"69","possible_hits":"1",},
{"lineNum":" 2223","line":"                    const log2_align = comptime std.math.log2_int(usize, @alignOf(BufNode));","class":"lineCov","hits":"1","order":"70","possible_hits":"1",},
{"lineNum":" 2224","line":"                    if (self.child_allocator.rawResize(cur_alloc_buf, log2_align, bigger_buf_size, @returnAddress())) {","class":"lineCov","hits":"2","order":"37","possible_hits":"2",},
{"lineNum":" 2225","line":"                        cur_node.data = bigger_buf_size;","class":"lineCov","hits":"1","order":"71","possible_hits":"1",},
{"lineNum":" 2226","line":"                    } else {"},
{"lineNum":" 2227","line":"                        // Allocate a new node if that\'s not possible"},
{"lineNum":" 2228","line":"                        cur_node = self.createNode(cur_buf.len, n + ptr_align) orelse return null;","class":"lineCov","hits":"2","order":"72","possible_hits":"2",},
{"lineNum":" 2229","line":"                    }"},
{"lineNum":" 2230","line":"                }"},
{"lineNum":" 2231","line":"            }"},
{"lineNum":" 2232","line":""},
{"lineNum":" 2233","line":"            fn resize(ctx: *anyopaque, buf: []u8, log2_buf_align: u8, new_len: usize, ret_addr: usize) bool {","class":"lineCov","hits":"1","order":"116","possible_hits":"1",},
{"lineNum":" 2234","line":"                const self: *Self = @ptrCast(@alignCast(ctx));","class":"lineCov","hits":"2","order":"117","possible_hits":"2",},
{"lineNum":" 2235","line":"                _ = log2_buf_align;"},
{"lineNum":" 2236","line":"                _ = ret_addr;"},
{"lineNum":" 2237","line":""},
{"lineNum":" 2238","line":"                const cur_node = self.state.buffer_list.first orelse return false;","class":"lineCov","hits":"3","order":"118","possible_hits":"3",},
{"lineNum":" 2239","line":"                const cur_buf = curBuf(curAllocBuf(cur_node));","class":"lineCov","hits":"1","order":"119","possible_hits":"1",},
{"lineNum":" 2240","line":"                if (@intFromPtr(cur_buf.ptr) + self.state.end_index != @intFromPtr(buf.ptr) + buf.len) {","class":"linePartCov","hits":"1","order":"120","possible_hits":"2",},
{"lineNum":" 2241","line":"                    // It\'s not the most recent allocation, so it cannot be expanded or shrinked"},
{"lineNum":" 2242","line":"                    return false;","class":"lineCov","hits":"1","order":"169","possible_hits":"1",},
{"lineNum":" 2243","line":"                }"},
{"lineNum":" 2244","line":""},
{"lineNum":" 2245","line":"                if (buf.len >= new_len) {","class":"lineCov","hits":"1","order":"121","possible_hits":"1",},
{"lineNum":" 2246","line":"                    self.state.end_index -= buf.len - new_len;","class":"linePartCov","hits":"1","order":"122","possible_hits":"2",},
{"lineNum":" 2247","line":"                    return true;","class":"lineCov","hits":"1","order":"123","possible_hits":"1",},
{"lineNum":" 2248","line":"                } else if (cur_buf.len - self.state.end_index >= new_len - buf.len) {","class":"linePartCov","hits":"1","order":"126","possible_hits":"2",},
{"lineNum":" 2249","line":"                    self.state.end_index += new_len - buf.len;","class":"linePartCov","hits":"1","order":"127","possible_hits":"2",},
{"lineNum":" 2250","line":"                    return true;","class":"lineCov","hits":"3","order":"128","possible_hits":"3",},
{"lineNum":" 2251","line":"                }"},
{"lineNum":" 2252","line":""},
{"lineNum":" 2253","line":"                return false;","class":"lineCov","hits":"1","order":"181","possible_hits":"1",},
{"lineNum":" 2254","line":"            }"},
{"lineNum":" 2255","line":""},
{"lineNum":" 2256","line":"            fn free(ctx: *anyopaque, buf: []u8, log2_buf_align: u8, ret_addr: usize) void {","class":"lineCov","hits":"1","order":"170","possible_hits":"1",},
{"lineNum":" 2257","line":"                _ = log2_buf_align;"},
{"lineNum":" 2258","line":"                _ = ret_addr;"},
{"lineNum":" 2259","line":"                const self: *Self = @ptrCast(@alignCast(ctx));","class":"lineCov","hits":"2","order":"171","possible_hits":"2",},
{"lineNum":" 2260","line":"                const cur_node = self.state.buffer_list.first orelse return;","class":"lineCov","hits":"3","order":"172","possible_hits":"3",},
{"lineNum":" 2261","line":"                const cur_buf = curBuf(curAllocBuf(cur_node));","class":"lineCov","hits":"1","order":"173","possible_hits":"1",},
{"lineNum":" 2262","line":"                if (@intFromPtr(cur_buf.ptr) + self.state.end_index == @intFromPtr(buf.ptr) + buf.len) {","class":"linePartCov","hits":"1","order":"174","possible_hits":"2",},
{"lineNum":" 2263","line":"                    // It is the most recent allocation...just shirnk the end_index?"},
{"lineNum":" 2264","line":"                    self.state.end_index -= buf.len;","class":"lineCov","hits":"2","order":"175","possible_hits":"2",},
{"lineNum":" 2265","line":"                }"},
{"lineNum":" 2266","line":"            }"},
{"lineNum":" 2267","line":"        };"},
{"lineNum":" 2268","line":"    } else {"},
{"lineNum":" 2269","line":"        return struct {"},
{"lineNum":" 2270","line":"            const Self = @This();"},
{"lineNum":" 2271","line":""},
{"lineNum":" 2272","line":"            pub fn init(child_allocator: std.mem.Allocator) Self {"},
{"lineNum":" 2273","line":"                _ = child_allocator;"},
{"lineNum":" 2274","line":"                @compileError(\"disabled by comptime var `enable_arena_allocator`, set it true to enable.\");"},
{"lineNum":" 2275","line":"            }"},
{"lineNum":" 2276","line":"        };"},
{"lineNum":" 2277","line":"    }"},
{"lineNum":" 2278","line":"}"},
{"lineNum":" 2279","line":""},
{"lineNum":" 2280","line":"fn defineRegex(comptime with_pcre: bool) type {"},
{"lineNum":" 2281","line":"    if (with_pcre) {"},
{"lineNum":" 2282","line":"        return struct {"},
{"lineNum":" 2283","line":"            const Self = @This();"},
{"lineNum":" 2284","line":""},
{"lineNum":" 2285","line":"            allocator: std.mem.Allocator,"},
{"lineNum":" 2286","line":"            unmanaged: RegexUnmanaged,"},
{"lineNum":" 2287","line":""},
{"lineNum":" 2288","line":"            const MatchedResultsList = RegexUnmanaged.MatchedResultsList;"},
{"lineNum":" 2289","line":"            const MatchedGroupResultsList = RegexUnmanaged.MatchedGroupResultsList;"},
{"lineNum":" 2290","line":""},
{"lineNum":" 2291","line":"            pub const MatchedResultIterator = RegexUnmanaged.MatchedResultIterator;"},
{"lineNum":" 2292","line":"            pub const MatchedGroupResultIterator = RegexUnmanaged.MatchedGroupResultIterator;"},
{"lineNum":" 2293","line":"            pub const DefaultRegexOptions = RegexUnmanaged.DefaultRegexOptions;"},
{"lineNum":" 2294","line":"            pub const DefaultMatchOptions = RegexUnmanaged.DefaultMatchOptions;"},
{"lineNum":" 2295","line":""},
{"lineNum":" 2296","line":"            pub fn init(allocator: std.mem.Allocator, pattern: []const u8, regex_options: u32) anyerror!Self {","class":"lineCov","hits":"1","order":"2026","possible_hits":"1",},
{"lineNum":" 2297","line":"                return Self.initWithExtraRegexOptions(allocator, pattern, regex_options, 0);","class":"lineCov","hits":"1","order":"2027","possible_hits":"1",},
{"lineNum":" 2298","line":"            }"},
{"lineNum":" 2299","line":""},
{"lineNum":" 2300","line":"            pub fn initWithExtraRegexOptions(allocator: std.mem.Allocator, pattern: []const u8, regex_options: u32, regex_extra_options: u32) anyerror!Self {","class":"lineCov","hits":"1","order":"2028","possible_hits":"1",},
{"lineNum":" 2301","line":"                return Self{","class":"lineCov","hits":"1","order":"2030","possible_hits":"1",},
{"lineNum":" 2302","line":"                    .allocator = allocator,"},
{"lineNum":" 2303","line":"                    .unmanaged = try RegexUnmanaged.initWithExtraRegexOptions(allocator, pattern, regex_options, regex_extra_options),","class":"lineCov","hits":"1","order":"2029","possible_hits":"1",},
{"lineNum":" 2304","line":"                };"},
{"lineNum":" 2305","line":"            }"},
{"lineNum":" 2306","line":""},
{"lineNum":" 2307","line":"            pub inline fn matchSucceed(this: *const Self) bool {"},
{"lineNum":" 2308","line":"                return this.unmanaged.matchSucceed();","class":"lineCov","hits":"2","order":"1987","possible_hits":"2",},
{"lineNum":" 2309","line":"            }"},
{"lineNum":" 2310","line":""},
{"lineNum":" 2311","line":"            pub inline fn succeed(this: *const Self) bool {"},
{"lineNum":" 2312","line":"                return this.unmanaged.succeed();","class":"lineCov","hits":"1","order":"2032","possible_hits":"1",},
{"lineNum":" 2313","line":"            }"},
{"lineNum":" 2314","line":""},
{"lineNum":" 2315","line":"            pub inline fn errorNumber(this: *const Self) usize {"},
{"lineNum":" 2316","line":"                return this.unmanaged.errorNumber();","class":"lineCov","hits":"1","order":"2034","possible_hits":"1",},
{"lineNum":" 2317","line":"            }"},
{"lineNum":" 2318","line":""},
{"lineNum":" 2319","line":"            pub inline fn errorOffset(this: *const Self) usize {"},
{"lineNum":" 2320","line":"                return this.unmanaged.errorOffset();","class":"lineCov","hits":"1","order":"2036","possible_hits":"1",},
{"lineNum":" 2321","line":"            }"},
{"lineNum":" 2322","line":""},
{"lineNum":" 2323","line":"            pub inline fn errorMessage(this: *const Self) []const u8 {"},
{"lineNum":" 2324","line":"                return this.unmanaged.errorMessage();","class":"lineCov","hits":"1","order":"2038","possible_hits":"1",},
{"lineNum":" 2325","line":"            }"},
{"lineNum":" 2326","line":""},
{"lineNum":" 2327","line":"            pub inline fn getResults(this: *const Self) ?[]pcre.RegexMatchResult {"},
{"lineNum":" 2328","line":"                return this.unmanaged.getResults();","class":"lineCov","hits":"2","order":"2045","possible_hits":"2",},
{"lineNum":" 2329","line":"            }"},
{"lineNum":" 2330","line":""},
{"lineNum":" 2331","line":"            pub inline fn getResultsIterator(this: *Self, subject: []const u8) MatchedResultIterator {"},
{"lineNum":" 2332","line":"                return this.unmanaged.getResultsIterator(subject);","class":"lineCov","hits":"2","order":"1990","possible_hits":"2",},
{"lineNum":" 2333","line":"            }"},
{"lineNum":" 2334","line":""},
{"lineNum":" 2335","line":"            pub inline fn getGroupResults(this: *const Self) ?[]pcre.RegexGroupResult {"},
{"lineNum":" 2336","line":"                return this.unmanaged.getGroupResults();","class":"lineCov","hits":"2","order":"2051","possible_hits":"2",},
{"lineNum":" 2337","line":"            }"},
{"lineNum":" 2338","line":""},
{"lineNum":" 2339","line":"            pub inline fn getGroupResultByIndex(this: *const Self, index: usize) ?pcre.RegexGroupResult {"},
{"lineNum":" 2340","line":"                return this.unmanaged.getGroupResultByIndex(index);","class":"lineCov","hits":"1","order":"2068","possible_hits":"1",},
{"lineNum":" 2341","line":"            }"},
{"lineNum":" 2342","line":""},
{"lineNum":" 2343","line":"            pub inline fn getGroupResultByName(this: *const Self, name: []const u8) ?pcre.RegexGroupResult {"},
{"lineNum":" 2344","line":"                return this.unmanaged.getGroupResultByName(name);","class":"lineCov","hits":"1","order":"2065","possible_hits":"1",},
{"lineNum":" 2345","line":"            }"},
{"lineNum":" 2346","line":""},
{"lineNum":" 2347","line":"            pub inline fn getGroupResultsIterator(this: *Self, subject: []const u8) MatchedGroupResultIterator {"},
{"lineNum":" 2348","line":"                return this.unmanaged.getGroupResultsIterator(subject);","class":"lineCov","hits":"2","order":"2071","possible_hits":"2",},
{"lineNum":" 2349","line":"            }"},
{"lineNum":" 2350","line":""},
{"lineNum":" 2351","line":"            pub inline fn deinit(this: *Self) void {"},
{"lineNum":" 2352","line":"                this.unmanaged.deinit(this.allocator);","class":"lineCov","hits":"1","order":"2040","possible_hits":"1",},
{"lineNum":" 2353","line":"            }"},
{"lineNum":" 2354","line":""},
{"lineNum":" 2355","line":"            pub inline fn reset(this: *Self) anyerror!void {"},
{"lineNum":" 2356","line":"                return this.unmanaged.reset(this.allocator);","class":"lineCov","hits":"1","order":"2060","possible_hits":"1",},
{"lineNum":" 2357","line":"            }"},
{"lineNum":" 2358","line":""},
{"lineNum":" 2359","line":"            pub inline fn match(this: *Self, subject_slice: []const u8, offset_pos: usize, fetch_results: bool, match_options: u32) anyerror!void {"},
{"lineNum":" 2360","line":"                return this.unmanaged.match(this.allocator, subject_slice, offset_pos, fetch_results, match_options);","class":"lineCov","hits":"3","order":"2063","possible_hits":"3",},
{"lineNum":" 2361","line":"            }"},
{"lineNum":" 2362","line":""},
{"lineNum":" 2363","line":"            pub inline fn getNextOffset(this: *Self, subject_slice: []const u8) anyerror!usize {"},
{"lineNum":" 2364","line":"                return this.unmanaged.getNextOffset(subject_slice);","class":"lineCov","hits":"3","order":"2075","possible_hits":"3",},
{"lineNum":" 2365","line":"            }"},
{"lineNum":" 2366","line":""},
{"lineNum":" 2367","line":"            pub inline fn fetchResults(this: *Self) anyerror!void {"},
{"lineNum":" 2368","line":"                try this.unmanaged.fetchResults(this.allocator);","class":"lineCov","hits":"1","order":"2081","possible_hits":"1",},
{"lineNum":" 2369","line":"            }"},
{"lineNum":" 2370","line":""},
{"lineNum":" 2371","line":"            pub inline fn matchAll(this: *Self, subject_slice: []const u8, offset_pos: usize, match_options: u32) anyerror!void {"},
{"lineNum":" 2372","line":"                try this.unmanaged.matchAll(this.allocator, subject_slice, offset_pos, match_options);","class":"lineCov","hits":"1","order":"2043","possible_hits":"1",},
{"lineNum":" 2373","line":"            }"},
{"lineNum":" 2374","line":"        };"},
{"lineNum":" 2375","line":"    } else {"},
{"lineNum":" 2376","line":"        return struct {"},
{"lineNum":" 2377","line":"            const Self = @This();"},
{"lineNum":" 2378","line":""},
{"lineNum":" 2379","line":"            pub fn init(allocator: std.mem.Allocator, pattern: []const u8, regex_options: u32, match_options: u32) anyerror!Self {"},
{"lineNum":" 2380","line":"                _ = allocator;"},
{"lineNum":" 2381","line":"                _ = pattern;"},
{"lineNum":" 2382","line":"                _ = regex_options;"},
{"lineNum":" 2383","line":"                _ = match_options;"},
{"lineNum":" 2384","line":"                @compileError(\"disabled by comptime var `enable_pcre`, set it true to enable.\");"},
{"lineNum":" 2385","line":"            }"},
{"lineNum":" 2386","line":"        };"},
{"lineNum":" 2387","line":"    }"},
{"lineNum":" 2388","line":"}"},
{"lineNum":" 2389","line":""},
{"lineNum":" 2390","line":"fn defineRegexUnmanaged(comptime with_pcre: bool) type {"},
{"lineNum":" 2391","line":"    if (with_pcre) {"},
{"lineNum":" 2392","line":"        // The RegexUnmanaged is THE struct used for regex matching. It integrates with PCRE2 (if enabled). The regex"},
{"lineNum":" 2393","line":"        // syntax used is pcre2, can read here: https://pcre2project.github.io/pcre2/doc/html/pcre2pattern.html, or"},
{"lineNum":" 2394","line":"        // try it here: https://regex101.com/"},
{"lineNum":" 2395","line":"        return struct {"},
{"lineNum":" 2396","line":"            const Self = @This();"},
{"lineNum":" 2397","line":"            const MatchedResultsList = std.SinglyLinkedList([]pcre.RegexMatchResult);"},
{"lineNum":" 2398","line":"            const MatchedGroupResultsList = std.SinglyLinkedList([]pcre.RegexGroupResult);"},
{"lineNum":" 2399","line":""},
{"lineNum":" 2400","line":"            pub const MatchedResultIterator = struct {"},
{"lineNum":" 2401","line":"                const Result = struct {"},
{"lineNum":" 2402","line":"                    start: usize,"},
{"lineNum":" 2403","line":"                    len: usize,"},
{"lineNum":" 2404","line":"                    value: []const u8,"},
{"lineNum":" 2405","line":"                };"},
{"lineNum":" 2406","line":""},
{"lineNum":" 2407","line":"                maybe_matched_results: ?[]pcre.RegexMatchResult,"},
{"lineNum":" 2408","line":"                cur_pos: usize = 0,"},
{"lineNum":" 2409","line":"                subject_slice: []const u8,"},
{"lineNum":" 2410","line":""},
{"lineNum":" 2411","line":"                pub fn init(regex: *Self, subject: []const u8) MatchedResultIterator {","class":"lineCov","hits":"1","order":"1364","possible_hits":"1",},
{"lineNum":" 2412","line":"                    return MatchedResultIterator{","class":"lineCov","hits":"2","order":"1365","possible_hits":"2",},
{"lineNum":" 2413","line":"                        .maybe_matched_results = regex.getResults(),","class":"lineCov","hits":"1","order":"1366","possible_hits":"1",},
{"lineNum":" 2414","line":"                        .subject_slice = subject,"},
{"lineNum":" 2415","line":"                    };"},
{"lineNum":" 2416","line":"                }"},
{"lineNum":" 2417","line":""},
{"lineNum":" 2418","line":"                pub fn nextResult(this: *MatchedResultIterator) ?Result {","class":"lineCov","hits":"1","order":"1368","possible_hits":"1",},
{"lineNum":" 2419","line":"                    if (this.maybe_matched_results) |matched_results| {","class":"lineCov","hits":"1","order":"1369","possible_hits":"1",},
{"lineNum":" 2420","line":"                        if (this.cur_pos < matched_results.len) {","class":"lineCov","hits":"1","order":"1370","possible_hits":"1",},
{"lineNum":" 2421","line":"                            const start = matched_results[this.cur_pos].start;","class":"lineCov","hits":"3","order":"1371","possible_hits":"3",},
{"lineNum":" 2422","line":"                            const len = matched_results[this.cur_pos].len;","class":"lineCov","hits":"3","order":"1372","possible_hits":"3",},
{"lineNum":" 2423","line":"                            this.cur_pos += 1;","class":"linePartCov","hits":"1","order":"1373","possible_hits":"2",},
{"lineNum":" 2424","line":"                            return Result{","class":"lineCov","hits":"2","order":"1374","possible_hits":"2",},
{"lineNum":" 2425","line":"                                .start = start,"},
{"lineNum":" 2426","line":"                                .len = len,"},
{"lineNum":" 2427","line":"                                .value = this.subject_slice[start .. start + len],","class":"lineCov","hits":"2","order":"1375","possible_hits":"2",},
{"lineNum":" 2428","line":"                            };"},
{"lineNum":" 2429","line":"                        } else return null;","class":"lineCov","hits":"1","order":"1398","possible_hits":"1",},
{"lineNum":" 2430","line":"                    } else return null;","class":"lineCov","hits":"1","order":"2116","possible_hits":"1",},
{"lineNum":" 2431","line":"                }"},
{"lineNum":" 2432","line":"            };"},
{"lineNum":" 2433","line":""},
{"lineNum":" 2434","line":"            pub const MatchedGroupResultIterator = struct {"},
{"lineNum":" 2435","line":"                const Result = struct {"},
{"lineNum":" 2436","line":"                    start: usize,"},
{"lineNum":" 2437","line":"                    len: usize,"},
{"lineNum":" 2438","line":"                    name: []const u8,"},
{"lineNum":" 2439","line":"                    value: []const u8,"},
{"lineNum":" 2440","line":"                };"},
{"lineNum":" 2441","line":""},
{"lineNum":" 2442","line":"                maybe_group_results: ?[]pcre.RegexGroupResult,"},
{"lineNum":" 2443","line":"                cur_pos: usize = 0,"},
{"lineNum":" 2444","line":"                subject_slice: []const u8,"},
{"lineNum":" 2445","line":""},
{"lineNum":" 2446","line":"                pub fn init(regex: *Self, subject: []const u8) MatchedGroupResultIterator {","class":"lineCov","hits":"1","order":"1224","possible_hits":"1",},
{"lineNum":" 2447","line":"                    return MatchedGroupResultIterator{","class":"lineCov","hits":"2","order":"1225","possible_hits":"2",},
{"lineNum":" 2448","line":"                        .maybe_group_results = regex.getGroupResults(),","class":"lineCov","hits":"1","order":"1226","possible_hits":"1",},
{"lineNum":" 2449","line":"                        .subject_slice = subject,"},
{"lineNum":" 2450","line":"                    };"},
{"lineNum":" 2451","line":"                }"},
{"lineNum":" 2452","line":""},
{"lineNum":" 2453","line":"                pub fn nextResult(this: *MatchedGroupResultIterator) ?Result {","class":"lineCov","hits":"1","order":"1228","possible_hits":"1",},
{"lineNum":" 2454","line":"                    if (this.maybe_group_results) |group_results| {","class":"lineCov","hits":"1","order":"1229","possible_hits":"1",},
{"lineNum":" 2455","line":"                        if (this.cur_pos < group_results.len) {","class":"lineCov","hits":"1","order":"1230","possible_hits":"1",},
{"lineNum":" 2456","line":"                            const start = group_results[this.cur_pos].start;","class":"lineCov","hits":"3","order":"1231","possible_hits":"3",},
{"lineNum":" 2457","line":"                            const len = group_results[this.cur_pos].len;","class":"lineCov","hits":"3","order":"1232","possible_hits":"3",},
{"lineNum":" 2458","line":"                            const name_len = group_results[this.cur_pos].name_len;","class":"lineCov","hits":"3","order":"1233","possible_hits":"3",},
{"lineNum":" 2459","line":"                            const name = if (name_len > 0) group_results[this.cur_pos].name[0..group_results[this.cur_pos].name_len] else \"\";","class":"lineCov","hits":"3","order":"1234","possible_hits":"3",},
{"lineNum":" 2460","line":"                            this.cur_pos += 1;","class":"linePartCov","hits":"1","order":"1235","possible_hits":"2",},
{"lineNum":" 2461","line":"                            return Result{","class":"lineCov","hits":"2","order":"1236","possible_hits":"2",},
{"lineNum":" 2462","line":"                                .start = start,"},
{"lineNum":" 2463","line":"                                .len = len,"},
{"lineNum":" 2464","line":"                                .name = name,"},
{"lineNum":" 2465","line":"                                .value = this.subject_slice[start .. start + len],","class":"lineCov","hits":"2","order":"1237","possible_hits":"2",},
{"lineNum":" 2466","line":"                            };"},
{"lineNum":" 2467","line":"                        } else return null;","class":"lineCov","hits":"1","order":"1529","possible_hits":"1",},
{"lineNum":" 2468","line":"                    } else return null;","class":"lineCov","hits":"1","order":"1463","possible_hits":"1",},
{"lineNum":" 2469","line":"                }"},
{"lineNum":" 2470","line":"            };"},
{"lineNum":" 2471","line":""},
{"lineNum":" 2472","line":"            pub const DefaultRegexOptions: u32 = 0;"},
{"lineNum":" 2473","line":"            pub const DefaultMatchOptions: u32 = 0;"},
{"lineNum":" 2474","line":""},
{"lineNum":" 2475","line":"            context_: *pcre.RegexContext = undefined,"},
{"lineNum":" 2476","line":""},
{"lineNum":" 2477","line":"            matched_results_list: MatchedResultsList = undefined,"},
{"lineNum":" 2478","line":"            matched_group_results_list: MatchedGroupResultsList = undefined,"},
{"lineNum":" 2479","line":"            total_matched_results: usize = 0,"},
{"lineNum":" 2480","line":"            total_matched_group_results: usize = 0,"},
{"lineNum":" 2481","line":""},
{"lineNum":" 2482","line":"            matched_results: []pcre.RegexMatchResult = undefined,"},
{"lineNum":" 2483","line":"            matched_group_results: []pcre.RegexGroupResult = undefined,"},
{"lineNum":" 2484","line":""},
{"lineNum":" 2485","line":"            /// This just means the pcre2 match action has not gone wrong. If want to be sure that there are results,"},
{"lineNum":" 2486","line":"            /// combine it with `matchSucceed`."},
{"lineNum":" 2487","line":"            pub inline fn succeed(this: *const Self) bool {"},
{"lineNum":" 2488","line":"                // PCRE error code 100 == success"},
{"lineNum":" 2489","line":"                return this.context_.error_number == 100;","class":"lineCov","hits":"8","order":"918","possible_hits":"8",},
{"lineNum":" 2490","line":"            }"},
{"lineNum":" 2491","line":""},
{"lineNum":" 2492","line":"            pub inline fn matchSucceed(this: *const Self) bool {"},
{"lineNum":" 2493","line":"                return this.context_.rc > 0 or this.total_matched_results > 0;","class":"linePartCov","hits":"19","order":"958","possible_hits":"22",},
{"lineNum":" 2494","line":"            }"},
{"lineNum":" 2495","line":""},
{"lineNum":" 2496","line":"            pub inline fn errorNumber(this: *const Self) usize {"},
{"lineNum":" 2497","line":"                return @as(usize, @intCast(this.context_.error_number));","class":"lineCov","hits":"10","order":"920","possible_hits":"10",},
{"lineNum":" 2498","line":"            }"},
{"lineNum":" 2499","line":""},
{"lineNum":" 2500","line":"            pub inline fn errorOffset(this: *const Self) usize {"},
{"lineNum":" 2501","line":"                return this.context_.error_offset;","class":"lineCov","hits":"2","order":"922","possible_hits":"2",},
{"lineNum":" 2502","line":"            }"},
{"lineNum":" 2503","line":""},
{"lineNum":" 2504","line":"            pub inline fn errorMessage(this: *const Self) []const u8 {"},
{"lineNum":" 2505","line":"                return this.context_.error_message[0..this.context_.error_message_len];","class":"lineCov","hits":"4","order":"924","possible_hits":"4",},
{"lineNum":" 2506","line":"            }"},
{"lineNum":" 2507","line":""},
{"lineNum":" 2508","line":"            pub inline fn getResults(this: *const Self) ?[]pcre.RegexMatchResult {"},
{"lineNum":" 2509","line":"                if (this.total_matched_results > 0) {","class":"lineCov","hits":"10","order":"1059","possible_hits":"10",},
{"lineNum":" 2510","line":"                    return this.matched_results;","class":"lineCov","hits":"10","order":"1060","possible_hits":"10",},
{"lineNum":" 2511","line":"                } else return null;","class":"linePartCov","hits":"10","order":"1061","possible_hits":"19",},
{"lineNum":" 2512","line":"            }"},
{"lineNum":" 2513","line":""},
{"lineNum":" 2514","line":"            pub inline fn getResultsIterator(this: *Self, subject: []const u8) MatchedResultIterator {"},
{"lineNum":" 2515","line":"                return MatchedResultIterator.init(this, subject);","class":"lineCov","hits":"5","order":"1363","possible_hits":"5",},
{"lineNum":" 2516","line":"            }"},
{"lineNum":" 2517","line":""},
{"lineNum":" 2518","line":"            pub inline fn getGroupResults(this: *const Self) ?[]pcre.RegexGroupResult {"},
{"lineNum":" 2519","line":"                if (this.total_matched_group_results > 0) {","class":"lineCov","hits":"7","order":"1068","possible_hits":"7",},
{"lineNum":" 2520","line":"                    return this.matched_group_results;","class":"lineCov","hits":"7","order":"1069","possible_hits":"7",},
{"lineNum":" 2521","line":"                } else return null;","class":"linePartCov","hits":"8","order":"1070","possible_hits":"13",},
{"lineNum":" 2522","line":"            }"},
{"lineNum":" 2523","line":""},
{"lineNum":" 2524","line":"            pub inline fn getGroupResultsIterator(this: *Self, subject: []const u8) MatchedGroupResultIterator {"},
{"lineNum":" 2525","line":"                return MatchedGroupResultIterator.init(this, subject);","class":"lineCov","hits":"3","order":"1223","possible_hits":"3",},
{"lineNum":" 2526","line":"            }"},
{"lineNum":" 2527","line":""},
{"lineNum":" 2528","line":"            pub fn getGroupResultByIndex(this: *const Self, index: usize) ?pcre.RegexGroupResult {","class":"lineCov","hits":"1","order":"1285","possible_hits":"1",},
{"lineNum":" 2529","line":"                if (this.total_matched_group_results > 0) {","class":"lineCov","hits":"1","order":"1286","possible_hits":"1",},
{"lineNum":" 2530","line":"                    for (this.matched_group_results[0..this.total_matched_group_results]) |gr| {","class":"lineCov","hits":"4","order":"1287","possible_hits":"4",},
{"lineNum":" 2531","line":"                        if (gr.index == index) {","class":"lineCov","hits":"1","order":"1288","possible_hits":"1",},
{"lineNum":" 2532","line":"                            return gr;","class":"lineCov","hits":"2","order":"1294","possible_hits":"2",},
{"lineNum":" 2533","line":"                        }"},
{"lineNum":" 2534","line":"                    }"},
{"lineNum":" 2535","line":"                    return null;","class":"lineCov","hits":"1","order":"1295","possible_hits":"1",},
{"lineNum":" 2536","line":"                } else return null;","class":"lineCov","hits":"1","order":"1301","possible_hits":"1",},
{"lineNum":" 2537","line":"            }"},
{"lineNum":" 2538","line":""},
{"lineNum":" 2539","line":"            pub fn getGroupResultByName(this: *const Self, name: []const u8) ?pcre.RegexGroupResult {","class":"lineCov","hits":"1","order":"1271","possible_hits":"1",},
{"lineNum":" 2540","line":"                if (name.len == 0) {","class":"lineCov","hits":"1","order":"1272","possible_hits":"1",},
{"lineNum":" 2541","line":"                    @panic(\"name for getGroupResultByName must not be empty!\");"},
{"lineNum":" 2542","line":"                }"},
{"lineNum":" 2543","line":"                if (this.total_matched_group_results > 0) {","class":"lineCov","hits":"2","order":"1273","possible_hits":"2",},
{"lineNum":" 2544","line":"                    for (this.matched_group_results[0..this.total_matched_group_results]) |gr| {","class":"lineCov","hits":"4","order":"1274","possible_hits":"4",},
{"lineNum":" 2545","line":"                        if (gr.name_len > 0 and std.mem.eql(u8, gr.name[0..gr.name_len], name)) {","class":"lineCov","hits":"2","order":"1275","possible_hits":"2",},
{"lineNum":" 2546","line":"                            return gr;","class":"lineCov","hits":"3","order":"1276","possible_hits":"3",},
{"lineNum":" 2547","line":"                        }"},
{"lineNum":" 2548","line":"                    }"},
{"lineNum":" 2549","line":"                    return null;","class":"lineCov","hits":"1","order":"1282","possible_hits":"1",},
{"lineNum":" 2550","line":"                } else return null;","class":"lineCov","hits":"1","order":"1298","possible_hits":"1",},
{"lineNum":" 2551","line":"            }"},
{"lineNum":" 2552","line":""},
{"lineNum":" 2553","line":"            pub fn init(allocator: std.mem.Allocator, pattern: []const u8, regex_options: u32) anyerror!Self {","class":"lineCov","hits":"1","order":"870","possible_hits":"1",},
{"lineNum":" 2554","line":"                // last 0 means no extra regex options, which should be used 99% of time, unless you know"},
{"lineNum":" 2555","line":"                // this doc well: https://pcre.org/current/doc/html/pcre2api.html"},
{"lineNum":" 2556","line":"                return Self.initWithExtraRegexOptions(allocator, pattern, regex_options, 0);","class":"lineCov","hits":"1","order":"871","possible_hits":"1",},
{"lineNum":" 2557","line":"            }"},
{"lineNum":" 2558","line":""},
{"lineNum":" 2559","line":"            pub fn initWithExtraRegexOptions(allocator: std.mem.Allocator, pattern: []const u8, regex_options: u32, regex_extra_options: u32) anyerror!Self {","class":"lineCov","hits":"1","order":"872","possible_hits":"1",},
{"lineNum":" 2560","line":"                if (pattern.len == 0) {","class":"lineCov","hits":"1","order":"873","possible_hits":"1",},
{"lineNum":" 2561","line":"                    return JStringError.RegexBadPattern;","class":"lineCov","hits":"1","order":"874","possible_hits":"1",},
{"lineNum":" 2562","line":"                }"},
{"lineNum":" 2563","line":"                var context_ = try allocator.create(pcre.RegexContext);","class":"linePartCov","hits":"1","order":"877","possible_hits":"2",},
{"lineNum":" 2564","line":"                context_.regex_options = regex_options;","class":"lineCov","hits":"1","order":"878","possible_hits":"1",},
{"lineNum":" 2565","line":"                context_.regex_extra_options = regex_extra_options;","class":"lineCov","hits":"1","order":"879","possible_hits":"1",},
{"lineNum":" 2566","line":"                const result = pcre.compile(context_, pattern[0..].ptr);","class":"lineCov","hits":"2","order":"880","possible_hits":"2",},
{"lineNum":" 2567","line":"                if (result == 0) {","class":"lineCov","hits":"1","order":"911","possible_hits":"1",},
{"lineNum":" 2568","line":"                    pcre.get_last_error_message(context_);","class":"lineCov","hits":"1","order":"912","possible_hits":"1",},
{"lineNum":" 2569","line":"                } else {"},
{"lineNum":" 2570","line":"                    if (context_.matched_group_capacity > 0) {","class":"lineCov","hits":"1","order":"932","possible_hits":"1",},
{"lineNum":" 2571","line":"                        var mgrs = try allocator.alloc(pcre.RegexGroupResult, @as(usize, @intCast(context_.matched_group_capacity)));","class":"linePartCov","hits":"1","order":"1027","possible_hits":"2",},
{"lineNum":" 2572","line":"                        context_.matched_group_results = mgrs[0..].ptr;","class":"lineCov","hits":"3","order":"933","possible_hits":"3",},
{"lineNum":" 2573","line":"                    }"},
{"lineNum":" 2574","line":"                }"},
{"lineNum":" 2575","line":"                return Self{","class":"lineCov","hits":"1","order":"916","possible_hits":"1",},
{"lineNum":" 2576","line":"                    .context_ = context_,"},
{"lineNum":" 2577","line":"                    .matched_results_list = MatchedResultsList{},"},
{"lineNum":" 2578","line":"                    .matched_group_results_list = MatchedGroupResultsList{},"},
{"lineNum":" 2579","line":"                };"},
{"lineNum":" 2580","line":"            }"},
{"lineNum":" 2581","line":""},
{"lineNum":" 2582","line":"            pub fn deinit(this: *Self, allocator: std.mem.Allocator) void {","class":"lineCov","hits":"1","order":"993","possible_hits":"1",},
{"lineNum":" 2583","line":"                defer allocator.destroy(this.context_);","class":"lineCov","hits":"1","order":"1009","possible_hits":"1",},
{"lineNum":" 2584","line":"                if (this.total_matched_results > 0) {","class":"lineCov","hits":"1","order":"994","possible_hits":"1",},
{"lineNum":" 2585","line":"                    allocator.free(this.matched_results);","class":"lineCov","hits":"1","order":"995","possible_hits":"1",},
{"lineNum":" 2586","line":"                }"},
{"lineNum":" 2587","line":"                if (this.total_matched_group_results > 0) {","class":"lineCov","hits":"1","order":"996","possible_hits":"1",},
{"lineNum":" 2588","line":"                    allocator.free(this.matched_group_results);","class":"lineCov","hits":"1","order":"1141","possible_hits":"1",},
{"lineNum":" 2589","line":"                }"},
{"lineNum":" 2590","line":"                if (this.context_.matched_group_capacity > 0) {","class":"lineCov","hits":"1","order":"997","possible_hits":"1",},
{"lineNum":" 2591","line":"                    const c = @as(usize, @intCast(this.context_.matched_group_capacity));","class":"lineCov","hits":"1","order":"1142","possible_hits":"1",},
{"lineNum":" 2592","line":"                    allocator.free(this.context_.matched_group_results[0..c]);","class":"lineCov","hits":"1","order":"1143","possible_hits":"1",},
{"lineNum":" 2593","line":"                }"},
{"lineNum":" 2594","line":"                // this must be at last as it will reset context_ from c code"},
{"lineNum":" 2595","line":"                pcre.free_context(this.context_);","class":"lineCov","hits":"1","order":"998","possible_hits":"1",},
{"lineNum":" 2596","line":"            }"},
{"lineNum":" 2597","line":""},
{"lineNum":" 2598","line":"            /// reset regex for next new match. This will only reset matched_results & matched_group_results & free"},
{"lineNum":" 2599","line":"            /// pcre underlying match object."},
{"lineNum":" 2600","line":"            pub fn reset(this: *Self, allocator: std.mem.Allocator) anyerror!void {","class":"lineCov","hits":"1","order":"1079","possible_hits":"1",},
{"lineNum":" 2601","line":"                if (this.total_matched_results > 0) {","class":"lineCov","hits":"1","order":"1080","possible_hits":"1",},
{"lineNum":" 2602","line":"                    allocator.free(this.matched_results);","class":"lineCov","hits":"1","order":"1212","possible_hits":"1",},
{"lineNum":" 2603","line":"                    this.total_matched_results = 0;","class":"lineCov","hits":"1","order":"1213","possible_hits":"1",},
{"lineNum":" 2604","line":"                }"},
{"lineNum":" 2605","line":"                if (this.total_matched_group_results > 0) {","class":"lineCov","hits":"1","order":"1081","possible_hits":"1",},
{"lineNum":" 2606","line":"                    allocator.free(this.matched_group_results);","class":"lineCov","hits":"1","order":"1214","possible_hits":"1",},
{"lineNum":" 2607","line":"                    this.total_matched_group_results = 0;","class":"lineCov","hits":"1","order":"1215","possible_hits":"1",},
{"lineNum":" 2608","line":"                }"},
{"lineNum":" 2609","line":"                // order is important, must do after free matched_results & matched_group_results"},
{"lineNum":" 2610","line":"                // as pcre.free_for_next_match will reset them"},
{"lineNum":" 2611","line":"                pcre.free_for_next_match(this.context_);","class":"lineCov","hits":"1","order":"1082","possible_hits":"1",},
{"lineNum":" 2612","line":"            }"},
{"lineNum":" 2613","line":""},
{"lineNum":" 2614","line":"            /// if not fetch_results, this.context_.next_offset is not set, need to manually do"},
{"lineNum":" 2615","line":"            /// `this.getNextOffset(subject)` for it. The regex syntax used is pcre2, can read"},
{"lineNum":" 2616","line":"            /// here: https://pcre2project.github.io/pcre2/doc/html/pcre2pattern.html, or try it here:"},
{"lineNum":" 2617","line":"            /// https://regex101.com/"},
{"lineNum":" 2618","line":"            pub fn match(this: *Self, allocator: std.mem.Allocator, subject_slice: []const u8, offset_pos: usize, fetch_results: bool, match_options: u32) anyerror!void {","class":"lineCov","hits":"1","order":"935","possible_hits":"1",},
{"lineNum":" 2619","line":"                this.context_.match_options = match_options;","class":"lineCov","hits":"1","order":"936","possible_hits":"1",},
{"lineNum":" 2620","line":"                const m = pcre.match(this.context_, subject_slice[0..].ptr, subject_slice.len, offset_pos);","class":"lineCov","hits":"2","order":"937","possible_hits":"2",},
{"lineNum":" 2621","line":"                if (m > 0) {","class":"lineCov","hits":"1","order":"953","possible_hits":"1",},
{"lineNum":" 2622","line":"                    if (fetch_results) {","class":"lineCov","hits":"1","order":"954","possible_hits":"1",},
{"lineNum":" 2623","line":"                        try this.fetchResults(allocator);","class":"linePartCov","hits":"1","order":"955","possible_hits":"2",},
{"lineNum":" 2624","line":"                        pcre.get_next_offset(this.context_, subject_slice[0..].ptr, subject_slice.len);","class":"lineCov","hits":"4","order":"979","possible_hits":"4",},
{"lineNum":" 2625","line":"                    }"},
{"lineNum":" 2626","line":"                }"},
{"lineNum":" 2627","line":"            }"},
{"lineNum":" 2628","line":""},
{"lineNum":" 2629","line":"            /// must call after successful match, otherwise error"},
{"lineNum":" 2630","line":"            pub fn getNextOffset(this: *Self, subject_slice: []const u8) anyerror!usize {","class":"lineCov","hits":"1","order":"1305","possible_hits":"1",},
{"lineNum":" 2631","line":"                if (this.context_.with_match_result == 1) {","class":"lineCov","hits":"1","order":"1306","possible_hits":"1",},
{"lineNum":" 2632","line":"                    if (this.matchSucceed()) {","class":"lineCov","hits":"1","order":"1310","possible_hits":"1",},
{"lineNum":" 2633","line":"                        pcre.get_next_offset(this.context_, subject_slice[0..].ptr, subject_slice.len);","class":"lineCov","hits":"3","order":"1311","possible_hits":"3",},
{"lineNum":" 2634","line":"                        return this.context_.next_offset;","class":"lineCov","hits":"1","order":"1312","possible_hits":"1",},
{"lineNum":" 2635","line":"                    } else {"},
{"lineNum":" 2636","line":"                        return this.context_.origin_offset;","class":"lineCov","hits":"1","order":"1316","possible_hits":"1",},
{"lineNum":" 2637","line":"                    }"},
{"lineNum":" 2638","line":"                } else {"},
{"lineNum":" 2639","line":"                    return JStringError.RegexFetchBeforeMatch;","class":"lineCov","hits":"1","order":"1307","possible_hits":"1",},
{"lineNum":" 2640","line":"                }"},
{"lineNum":" 2641","line":"            }"},
{"lineNum":" 2642","line":""},
{"lineNum":" 2643","line":"            /// only for single match fetchResults lazily. For matchAll it will always fetch while match."},
{"lineNum":" 2644","line":"            pub fn fetchResults(this: *Self, allocator: std.mem.Allocator) anyerror!void {","class":"lineCov","hits":"1","order":"956","possible_hits":"1",},
{"lineNum":" 2645","line":"                if (this.matchSucceed()) {","class":"lineCov","hits":"1","order":"957","possible_hits":"1",},
{"lineNum":" 2646","line":"                    pcre.fetch_match_results(this.context_);","class":"lineCov","hits":"1","order":"959","possible_hits":"1",},
{"lineNum":" 2647","line":"                    if (this.context_.matched_count > 0) {","class":"lineCov","hits":"1","order":"973","possible_hits":"1",},
{"lineNum":" 2648","line":"                        this.matched_results = try allocator.alloc(pcre.RegexMatchResult, this.context_.matched_count);","class":"linePartCov","hits":"1","order":"974","possible_hits":"2",},
{"lineNum":" 2649","line":"                        this.matched_results[0] = this.context_.matched_result;","class":"lineCov","hits":"2","order":"975","possible_hits":"2",},
{"lineNum":" 2650","line":"                        this.total_matched_results = 1;","class":"linePartCov","hits":"1","order":"976","possible_hits":"2",},
{"lineNum":" 2651","line":"                    }"},
{"lineNum":" 2652","line":"                    if (this.context_.matched_group_count > 0) {","class":"lineCov","hits":"1","order":"977","possible_hits":"1",},
{"lineNum":" 2653","line":"                        this.matched_group_results = try allocator.alloc(pcre.RegexGroupResult, this.context_.matched_group_count);","class":"linePartCov","hits":"1","order":"1055","possible_hits":"2",},
{"lineNum":" 2654","line":"                        for (0..this.context_.matched_group_count) |i| {","class":"lineCov","hits":"3","order":"1056","possible_hits":"3",},
{"lineNum":" 2655","line":"                            this.matched_group_results[i] = this.context_.matched_group_results[i];","class":"lineCov","hits":"2","order":"1057","possible_hits":"2",},
{"lineNum":" 2656","line":"                        }"},
{"lineNum":" 2657","line":"                        this.total_matched_group_results = this.context_.matched_group_count;","class":"linePartCov","hits":"4","order":"978","possible_hits":"5",},
{"lineNum":" 2658","line":"                    }"},
{"lineNum":" 2659","line":"                }"},
{"lineNum":" 2660","line":"            }"},
{"lineNum":" 2661","line":""},
{"lineNum":" 2662","line":"            /// matchAll will do `fetchResults` in anyway. The regex syntax used is pcre2, can read"},
{"lineNum":" 2663","line":"            /// here: https://pcre2project.github.io/pcre2/doc/html/pcre2pattern.html, or try it here:"},
{"lineNum":" 2664","line":"            /// https://regex101.com/."},
{"lineNum":" 2665","line":"            pub fn matchAll(this: *Self, allocator: std.mem.Allocator, subject_slice: []const u8, offset_pos: usize, match_options: u32) anyerror!void {","class":"lineCov","hits":"1","order":"1029","possible_hits":"1",},
{"lineNum":" 2666","line":"                this.context_.match_options = match_options;","class":"lineCov","hits":"1","order":"1030","possible_hits":"1",},
{"lineNum":" 2667","line":"                var m: i64 = 0;","class":"lineCov","hits":"1","order":"1031","possible_hits":"1",},
{"lineNum":" 2668","line":"                var offset: usize = offset_pos;","class":"lineCov","hits":"1","order":"1032","possible_hits":"1",},
{"lineNum":" 2669","line":"                var matched_result_count: usize = 0;","class":"lineCov","hits":"1","order":"1033","possible_hits":"1",},
{"lineNum":" 2670","line":"                var matched_group_result_count: usize = 0;","class":"lineCov","hits":"1","order":"1034","possible_hits":"1",},
{"lineNum":" 2671","line":"                while (offset < subject_slice.len) {","class":"lineCov","hits":"1","order":"1035","possible_hits":"1",},
{"lineNum":" 2672","line":"                    m = pcre.match(this.context_, subject_slice[0..].ptr, subject_slice.len, offset);","class":"lineCov","hits":"3","order":"1036","possible_hits":"3",},
{"lineNum":" 2673","line":"                    if (m > 0) {","class":"lineCov","hits":"1","order":"1037","possible_hits":"1",},
{"lineNum":" 2674","line":"                        try this.fetchResults(allocator);","class":"linePartCov","hits":"1","order":"1038","possible_hits":"2",},
{"lineNum":" 2675","line":"                        if (this.getResults()) |matched_results| {","class":"lineCov","hits":"1","order":"1058","possible_hits":"1",},
{"lineNum":" 2676","line":"                            const n = try allocator.create(MatchedResultsList.Node);","class":"linePartCov","hits":"1","order":"1062","possible_hits":"2",},
{"lineNum":" 2677","line":"                            n.data = matched_results;","class":"lineCov","hits":"1","order":"1063","possible_hits":"1",},
{"lineNum":" 2678","line":"                            this.matched_results_list.prepend(n);","class":"lineCov","hits":"1","order":"1064","possible_hits":"1",},
{"lineNum":" 2679","line":"                            matched_result_count += matched_results.len;","class":"lineCov","hits":"1","order":"1065","possible_hits":"1",},
{"lineNum":" 2680","line":"                            // set total_matched_results = 0 so later in reset it will not be freed"},
{"lineNum":" 2681","line":"                            this.total_matched_results = 0;","class":"linePartCov","hits":"1","order":"1066","possible_hits":"2",},
{"lineNum":" 2682","line":"                        }"},
{"lineNum":" 2683","line":"                        if (this.getGroupResults()) |group_results| {","class":"lineCov","hits":"1","order":"1067","possible_hits":"1",},
{"lineNum":" 2684","line":"                            const n = try allocator.create(MatchedGroupResultsList.Node);","class":"linePartCov","hits":"1","order":"1071","possible_hits":"2",},
{"lineNum":" 2685","line":"                            n.data = group_results;","class":"lineCov","hits":"1","order":"1072","possible_hits":"1",},
{"lineNum":" 2686","line":"                            this.matched_group_results_list.prepend(n);","class":"lineCov","hits":"1","order":"1073","possible_hits":"1",},
{"lineNum":" 2687","line":"                            matched_group_result_count += group_results.len;","class":"lineCov","hits":"1","order":"1074","possible_hits":"1",},
{"lineNum":" 2688","line":"                            // set total_matched_group_results = 0 so later in reset it will not be freed"},
{"lineNum":" 2689","line":"                            this.total_matched_group_results = 0;","class":"lineCov","hits":"2","order":"1075","possible_hits":"2",},
{"lineNum":" 2690","line":"                        }"},
{"lineNum":" 2691","line":"                        pcre.get_next_offset(this.context_, subject_slice[0..].ptr, subject_slice.len);","class":"lineCov","hits":"3","order":"1076","possible_hits":"3",},
{"lineNum":" 2692","line":"                        offset = this.context_.next_offset;","class":"lineCov","hits":"1","order":"1077","possible_hits":"1",},
{"lineNum":" 2693","line":"                        try this.reset(allocator);","class":"linePartCov","hits":"5","order":"1078","possible_hits":"6",},
{"lineNum":" 2694","line":"                    } else break;"},
{"lineNum":" 2695","line":"                }"},
{"lineNum":" 2696","line":""},
{"lineNum":" 2697","line":"                try this._mergeMatchedResults(allocator, matched_result_count);","class":"linePartCov","hits":"1","order":"1100","possible_hits":"2",},
{"lineNum":" 2698","line":"                try this._mergeMatchedGroupResults(allocator, matched_group_result_count);","class":"lineCov","hits":"1","order":"1120","possible_hits":"1",},
{"lineNum":" 2699","line":"            }"},
{"lineNum":" 2700","line":""},
{"lineNum":" 2701","line":"            fn _mergeMatchedResults(this: *Self, allocator: std.mem.Allocator, matched_count: usize) anyerror!void {","class":"lineCov","hits":"1","order":"1101","possible_hits":"1",},
{"lineNum":" 2702","line":"                if (this.total_matched_results > 0) {","class":"lineCov","hits":"1","order":"1102","possible_hits":"1",},
{"lineNum":" 2703","line":"                    @panic(\"must not enter this function before reset\");"},
{"lineNum":" 2704","line":"                }"},
{"lineNum":" 2705","line":"                this.total_matched_results = matched_count;","class":"lineCov","hits":"1","order":"1103","possible_hits":"1",},
{"lineNum":" 2706","line":"                if (matched_count == 0) {","class":"lineCov","hits":"1","order":"1104","possible_hits":"1",},
{"lineNum":" 2707","line":"                    return;","class":"lineCov","hits":"1","order":"1567","possible_hits":"1",},
{"lineNum":" 2708","line":"                } else {"},
{"lineNum":" 2709","line":"                    var merged_matched_results: []pcre.RegexMatchResult = undefined;","class":"lineCov","hits":"1","order":"1105","possible_hits":"1",},
{"lineNum":" 2710","line":"                    merged_matched_results = try allocator.alloc(pcre.RegexMatchResult, matched_count);","class":"lineCov","hits":"1","order":"1106","possible_hits":"1",},
{"lineNum":" 2711","line":"                    var offset: usize = merged_matched_results.len - 1;","class":"lineCov","hits":"1","order":"1107","possible_hits":"1",},
{"lineNum":" 2712","line":"                    brk: {","class":"lineCov","hits":"1","order":"1108","possible_hits":"1",},
{"lineNum":" 2713","line":"                        while (this.matched_results_list.popFirst()) |n| {","class":"lineCov","hits":"2","order":"1109","possible_hits":"2",},
{"lineNum":" 2714","line":"                            for (1..n.data.len + 1) |i| {","class":"linePartCov","hits":"3","order":"1110","possible_hits":"5",},
{"lineNum":" 2715","line":"                                merged_matched_results[offset] = n.data[n.data.len - i];","class":"lineCov","hits":"2","order":"1111","possible_hits":"2",},
{"lineNum":" 2716","line":"                                if (offset == 0) {","class":"lineCov","hits":"1","order":"1112","possible_hits":"1",},
{"lineNum":" 2717","line":"                                    allocator.free(n.data);","class":"lineCov","hits":"1","order":"1116","possible_hits":"1",},
{"lineNum":" 2718","line":"                                    allocator.destroy(n);","class":"lineCov","hits":"1","order":"1117","possible_hits":"1",},
{"lineNum":" 2719","line":"                                    break :brk;","class":"lineCov","hits":"1","order":"1118","possible_hits":"1",},
{"lineNum":" 2720","line":"                                }"},
{"lineNum":" 2721","line":"                                offset -= 1;","class":"linePartCov","hits":"3","order":"1113","possible_hits":"4",},
{"lineNum":" 2722","line":"                            }"},
{"lineNum":" 2723","line":"                            allocator.free(n.data);","class":"lineCov","hits":"1","order":"1114","possible_hits":"1",},
{"lineNum":" 2724","line":"                            allocator.destroy(n);","class":"linePartCov","hits":"2","order":"1115","possible_hits":"4",},
{"lineNum":" 2725","line":"                        }"},
{"lineNum":" 2726","line":"                    }"},
{"lineNum":" 2727","line":"                    this.matched_results = merged_matched_results;","class":"lineCov","hits":"2","order":"1119","possible_hits":"2",},
{"lineNum":" 2728","line":"                }"},
{"lineNum":" 2729","line":"            }"},
{"lineNum":" 2730","line":""},
{"lineNum":" 2731","line":"            fn _mergeMatchedGroupResults(this: *Self, allocator: std.mem.Allocator, matched_group_count: usize) anyerror!void {","class":"lineCov","hits":"1","order":"1121","possible_hits":"1",},
{"lineNum":" 2732","line":"                if (this.total_matched_group_results > 0) {","class":"lineCov","hits":"1","order":"1122","possible_hits":"1",},
{"lineNum":" 2733","line":"                    @panic(\"must not enter this function before reset\");"},
{"lineNum":" 2734","line":"                }"},
{"lineNum":" 2735","line":"                this.total_matched_group_results = matched_group_count;","class":"lineCov","hits":"1","order":"1123","possible_hits":"1",},
{"lineNum":" 2736","line":"                if (matched_group_count == 0) {","class":"lineCov","hits":"1","order":"1124","possible_hits":"1",},
{"lineNum":" 2737","line":"                    return;","class":"lineCov","hits":"1","order":"1161","possible_hits":"1",},
{"lineNum":" 2738","line":"                } else {"},
{"lineNum":" 2739","line":"                    var merged_matched_group_results: []pcre.RegexGroupResult = undefined;","class":"lineCov","hits":"1","order":"1125","possible_hits":"1",},
{"lineNum":" 2740","line":"                    merged_matched_group_results = try allocator.alloc(pcre.RegexGroupResult, matched_group_count);","class":"lineCov","hits":"1","order":"1126","possible_hits":"1",},
{"lineNum":" 2741","line":"                    var offset: usize = merged_matched_group_results.len - 1;","class":"lineCov","hits":"1","order":"1127","possible_hits":"1",},
{"lineNum":" 2742","line":"                    brk: {","class":"lineCov","hits":"1","order":"1128","possible_hits":"1",},
{"lineNum":" 2743","line":"                        while (this.matched_group_results_list.popFirst()) |n| {","class":"lineCov","hits":"2","order":"1129","possible_hits":"2",},
{"lineNum":" 2744","line":"                            for (1..n.data.len + 1) |i| {","class":"linePartCov","hits":"3","order":"1130","possible_hits":"5",},
{"lineNum":" 2745","line":"                                merged_matched_group_results[offset] = n.data[n.data.len - i];","class":"lineCov","hits":"2","order":"1131","possible_hits":"2",},
{"lineNum":" 2746","line":"                                if (offset == 0) {","class":"lineCov","hits":"1","order":"1132","possible_hits":"1",},
{"lineNum":" 2747","line":"                                    allocator.free(n.data);","class":"lineCov","hits":"1","order":"1136","possible_hits":"1",},
{"lineNum":" 2748","line":"                                    allocator.destroy(n);","class":"lineCov","hits":"1","order":"1137","possible_hits":"1",},
{"lineNum":" 2749","line":"                                    break :brk;","class":"lineCov","hits":"1","order":"1138","possible_hits":"1",},
{"lineNum":" 2750","line":"                                }"},
{"lineNum":" 2751","line":"                                offset -= 1;","class":"linePartCov","hits":"3","order":"1133","possible_hits":"4",},
{"lineNum":" 2752","line":"                            }"},
{"lineNum":" 2753","line":"                            allocator.free(n.data);","class":"lineCov","hits":"1","order":"1134","possible_hits":"1",},
{"lineNum":" 2754","line":"                            allocator.destroy(n);","class":"linePartCov","hits":"2","order":"1135","possible_hits":"4",},
{"lineNum":" 2755","line":"                        }"},
{"lineNum":" 2756","line":"                    }"},
{"lineNum":" 2757","line":"                    this.matched_group_results = merged_matched_group_results;","class":"lineCov","hits":"2","order":"1139","possible_hits":"2",},
{"lineNum":" 2758","line":"                }"},
{"lineNum":" 2759","line":"            }"},
{"lineNum":" 2760","line":"        };"},
{"lineNum":" 2761","line":"    } else {"},
{"lineNum":" 2762","line":"        return struct {"},
{"lineNum":" 2763","line":"            const Self = @This();"},
{"lineNum":" 2764","line":""},
{"lineNum":" 2765","line":"            pub fn init(allocator: std.mem.Allocator, pattern: []const u8, regex_options: u32, match_options: u32) anyerror!Self {"},
{"lineNum":" 2766","line":"                _ = allocator;"},
{"lineNum":" 2767","line":"                _ = pattern;"},
{"lineNum":" 2768","line":"                _ = regex_options;"},
{"lineNum":" 2769","line":"                _ = match_options;"},
{"lineNum":" 2770","line":"                @compileError(\"disabled by comptime var `enable_pcre`, set it true to enable.\");"},
{"lineNum":" 2771","line":"            }"},
{"lineNum":" 2772","line":"        };"},
{"lineNum":" 2773","line":"    }"},
{"lineNum":" 2774","line":"}"},
{"lineNum":" 2775","line":""},
{"lineNum":" 2776","line":"// >>> internal functions"},
{"lineNum":" 2777","line":""},
{"lineNum":" 2778","line":"fn _bufPrintFmt(comptime type_info: std.builtin.Type, comptime fmt_buf: []u8, comptime fmt_len_: *usize, comptime fmt_print_slice_: *[]u8) void {"},
{"lineNum":" 2779","line":"    var printed_fmt = try std.fmt.bufPrint(fmt_print_slice_.*, \"{{\", .{});"},
{"lineNum":" 2780","line":"    fmt_len_.* = fmt_len_.* + printed_fmt.len;"},
{"lineNum":" 2781","line":"    fmt_print_slice_.* = fmt_buf[fmt_len_.*..];"},
{"lineNum":" 2782","line":""},
{"lineNum":" 2783","line":"    _bufPrintSpecifier(type_info, fmt_buf, fmt_len_, fmt_print_slice_);"},
{"lineNum":" 2784","line":""},
{"lineNum":" 2785","line":"    printed_fmt = try std.fmt.bufPrint(fmt_print_slice_.*, \"}}\", .{});"},
{"lineNum":" 2786","line":"    fmt_len_.* = fmt_len_.* + printed_fmt.len;"},
{"lineNum":" 2787","line":"    fmt_print_slice_.* = fmt_buf[fmt_len_.*..];"},
{"lineNum":" 2788","line":"}"},
{"lineNum":" 2789","line":""},
{"lineNum":" 2790","line":"fn _bufPrintSpecifier(comptime type_info: std.builtin.Type, comptime fmt_buf: []u8, comptime fmt_len_: *usize, comptime fmt_print_slice_: *[]u8) void {"},
{"lineNum":" 2791","line":"    var printed_fmt: []u8 = undefined;"},
{"lineNum":" 2792","line":"    switch (type_info) {"},
{"lineNum":" 2793","line":"        .Array => {"},
{"lineNum":" 2794","line":"            printed_fmt = try std.fmt.bufPrint(fmt_print_slice_.*, \"any\", .{});"},
{"lineNum":" 2795","line":"            fmt_len_.* = fmt_len_.* + printed_fmt.len;"},
{"lineNum":" 2796","line":"            fmt_print_slice_.* = fmt_buf[fmt_len_.*..];"},
{"lineNum":" 2797","line":"        },"},
{"lineNum":" 2798","line":"        .Pointer => |ptr_info| switch (ptr_info.size) {"},
{"lineNum":" 2799","line":"            .One, .Many, .C => {"},
{"lineNum":" 2800","line":"                printed_fmt = try std.fmt.bufPrint(fmt_print_slice_.*, \"s\", .{});"},
{"lineNum":" 2801","line":"                fmt_len_.* = fmt_len_.* + printed_fmt.len;"},
{"lineNum":" 2802","line":"                fmt_print_slice_.* = fmt_buf[fmt_len_.*..];"},
{"lineNum":" 2803","line":"            },"},
{"lineNum":" 2804","line":"            .Slice => {"},
{"lineNum":" 2805","line":"                printed_fmt = try std.fmt.bufPrint(fmt_print_slice_.*, \"any\", .{});"},
{"lineNum":" 2806","line":"                fmt_len_.* = fmt_len_.* + printed_fmt.len;"},
{"lineNum":" 2807","line":"                fmt_print_slice_.* = fmt_buf[fmt_len_.*..];"},
{"lineNum":" 2808","line":"            },"},
{"lineNum":" 2809","line":"        },"},
{"lineNum":" 2810","line":"        .Optional => |info| {"},
{"lineNum":" 2811","line":"            printed_fmt = try std.fmt.bufPrint(fmt_print_slice_.*, \"?\", .{});"},
{"lineNum":" 2812","line":"            fmt_len_.* = fmt_len_.* + printed_fmt.len;"},
{"lineNum":" 2813","line":"            fmt_print_slice_.* = fmt_buf[fmt_len_.*..];"},
{"lineNum":" 2814","line":"            _bufPrintSpecifier(@typeInfo(info.child), fmt_buf, fmt_len_, fmt_print_slice_);"},
{"lineNum":" 2815","line":"        },"},
{"lineNum":" 2816","line":"        .ErrorUnion => |info| {"},
{"lineNum":" 2817","line":"            printed_fmt = try std.fmt.bufPrint(fmt_print_slice_.*, \"!\", .{});"},
{"lineNum":" 2818","line":"            fmt_len_.* = fmt_len_.* + printed_fmt.len;"},
{"lineNum":" 2819","line":"            fmt_print_slice_.* = fmt_buf[fmt_len_.*..];"},
{"lineNum":" 2820","line":"            _bufPrintSpecifier(@typeInfo(info.payload), fmt_buf, fmt_len_, fmt_print_slice_);"},
{"lineNum":" 2821","line":"        },"},
{"lineNum":" 2822","line":"        else => {"},
{"lineNum":" 2823","line":"            printed_fmt = try std.fmt.bufPrint(fmt_print_slice_.*, \"\", .{});"},
{"lineNum":" 2824","line":"            fmt_len_.* = fmt_len_.* + printed_fmt.len;"},
{"lineNum":" 2825","line":"            fmt_print_slice_.* = fmt_buf[fmt_len_.*..];"},
{"lineNum":" 2826","line":"        },"},
{"lineNum":" 2827","line":"    }"},
{"lineNum":" 2828","line":"}"},
{"lineNum":" 2829","line":""},
{"lineNum":" 2830","line":"// take advantage of both matched results and group matched results are sorted based on start when taking out of pcre,"},
{"lineNum":" 2831","line":"// do a merge algorithm here"},
{"lineNum":" 2832","line":"const _MatchedGapIterator = struct {"},
{"lineNum":" 2833","line":"    const Gap = struct {"},
{"lineNum":" 2834","line":"        start: usize,"},
{"lineNum":" 2835","line":"        len: usize,"},
{"lineNum":" 2836","line":"    };"},
{"lineNum":" 2837","line":""},
{"lineNum":" 2838","line":"    it: RegexUnmanaged.MatchedResultIterator,"},
{"lineNum":" 2839","line":"    it_should_fetch: bool = true,"},
{"lineNum":" 2840","line":"    group_it: RegexUnmanaged.MatchedGroupResultIterator,"},
{"lineNum":" 2841","line":"    group_it_should_fetch: bool = true,"},
{"lineNum":" 2842","line":"    maybe_result: ?RegexUnmanaged.MatchedResultIterator.Result = null,"},
{"lineNum":" 2843","line":"    maybe_group_result: ?RegexUnmanaged.MatchedGroupResultIterator.Result = null,"},
{"lineNum":" 2844","line":"    last_start: usize = 0,"},
{"lineNum":" 2845","line":"    last_len: usize = 0,"},
{"lineNum":" 2846","line":""},
{"lineNum":" 2847","line":"    pub fn init(re: *RegexUnmanaged, subject_slice: []const u8) _MatchedGapIterator {","class":"lineCov","hits":"1","order":"1451","possible_hits":"1",},
{"lineNum":" 2848","line":"        return _MatchedGapIterator{","class":"lineCov","hits":"2","order":"1452","possible_hits":"2",},
{"lineNum":" 2849","line":"            .it = re.getResultsIterator(subject_slice),","class":"lineCov","hits":"1","order":"1453","possible_hits":"1",},
{"lineNum":" 2850","line":"            .group_it = re.getGroupResultsIterator(subject_slice),","class":"lineCov","hits":"1","order":"1454","possible_hits":"1",},
{"lineNum":" 2851","line":"        };"},
{"lineNum":" 2852","line":"    }"},
{"lineNum":" 2853","line":""},
{"lineNum":" 2854","line":"    pub fn nextGap(this: *_MatchedGapIterator) anyerror!?Gap {","class":"lineCov","hits":"1","order":"1457","possible_hits":"1",},
{"lineNum":" 2855","line":"        if (this.it_should_fetch) {","class":"lineCov","hits":"1","order":"1458","possible_hits":"1",},
{"lineNum":" 2856","line":"            this.maybe_result = this.it.nextResult();","class":"lineCov","hits":"1","order":"1459","possible_hits":"1",},
{"lineNum":" 2857","line":"            this.it_should_fetch = false;","class":"lineCov","hits":"1","order":"1460","possible_hits":"1",},
{"lineNum":" 2858","line":"        }"},
{"lineNum":" 2859","line":"        if (this.group_it_should_fetch) {","class":"lineCov","hits":"1","order":"1461","possible_hits":"1",},
{"lineNum":" 2860","line":"            this.maybe_group_result = this.group_it.nextResult();","class":"lineCov","hits":"1","order":"1462","possible_hits":"1",},
{"lineNum":" 2861","line":"            this.group_it_should_fetch = false;","class":"lineCov","hits":"1","order":"1464","possible_hits":"1",},
{"lineNum":" 2862","line":"        }"},
{"lineNum":" 2863","line":"        if (this.maybe_result) |r| {","class":"lineCov","hits":"2","order":"1465","possible_hits":"2",},
{"lineNum":" 2864","line":"            if (this.maybe_group_result) |gr| {","class":"lineCov","hits":"2","order":"1466","possible_hits":"2",},
{"lineNum":" 2865","line":"                if (r.start <= gr.start) {","class":"lineCov","hits":"1","order":"1521","possible_hits":"1",},
{"lineNum":" 2866","line":"                    return this._nextGapFromIt(r);","class":"lineCov","hits":"2","order":"1522","possible_hits":"2",},
{"lineNum":" 2867","line":"                } else {"},
{"lineNum":" 2868","line":"                    return this._nextGapFromGroupIt(gr);","class":"lineCov","hits":"2","order":"1523","possible_hits":"2",},
{"lineNum":" 2869","line":"                }"},
{"lineNum":" 2870","line":"            } else {"},
{"lineNum":" 2871","line":"                return this._nextGapFromIt(r);","class":"lineCov","hits":"3","order":"1467","possible_hits":"3",},
{"lineNum":" 2872","line":"            }"},
{"lineNum":" 2873","line":"        }"},
{"lineNum":" 2874","line":"        if (this.maybe_group_result) |gr| {","class":"lineCov","hits":"2","order":"1480","possible_hits":"2",},
{"lineNum":" 2875","line":"            // this.maybe_result must be null if we reach here, no need to check it"},
{"lineNum":" 2876","line":"            return this._nextGapFromGroupIt(gr);","class":"lineCov","hits":"1","order":"1528","possible_hits":"1",},
{"lineNum":" 2877","line":"        }"},
{"lineNum":" 2878","line":"        return null;","class":"lineCov","hits":"1","order":"1481","possible_hits":"1",},
{"lineNum":" 2879","line":"    }"},
{"lineNum":" 2880","line":""},
{"lineNum":" 2881","line":"    fn _nextGapFromIt(this: *_MatchedGapIterator, r: RegexUnmanaged.MatchedResultIterator.Result) anyerror!?Gap {","class":"lineCov","hits":"1","order":"1468","possible_hits":"1",},
{"lineNum":" 2882","line":"        this.it_should_fetch = true;","class":"lineCov","hits":"1","order":"1469","possible_hits":"1",},
{"lineNum":" 2883","line":"        if (this.last_start == r.start and this.last_len == r.len) {","class":"lineCov","hits":"1","order":"1470","possible_hits":"1",},
{"lineNum":" 2884","line":"            // can never reach here because we can reach here either"},
{"lineNum":" 2885","line":"            // 1. in front other other group result"},
{"lineNum":" 2886","line":"            // 2. or when move to next single match result"},
{"lineNum":" 2887","line":"            //"},
{"lineNum":" 2888","line":"            // for case 2, impossible to meet the condition, as match results will not overlap, and next match"},
{"lineNum":" 2889","line":"            //   result will never overlap last match\'s group result"},
{"lineNum":" 2890","line":"            // for case 1, impossible too, because either this is first match result, or we just move from last"},
{"lineNum":" 2891","line":"            //   match, so reduce to case 2"},
{"lineNum":" 2892","line":"            //"},
{"lineNum":" 2893","line":"            // return this.nextGap();"},
{"lineNum":" 2894","line":"            unreachable;"},
{"lineNum":" 2895","line":"        } else if (this.last_start + this.last_len > r.start) {","class":"lineCov","hits":"1","order":"1471","possible_hits":"1",},
{"lineNum":" 2896","line":"            // see above, this is impossible too."},
{"lineNum":" 2897","line":"            //"},
{"lineNum":" 2898","line":"            // return JStringError.RegexMatchOverlapped;"},
{"lineNum":" 2899","line":"            unreachable;"},
{"lineNum":" 2900","line":"        } else {"},
{"lineNum":" 2901","line":"            this.last_start = r.start;","class":"lineCov","hits":"1","order":"1472","possible_hits":"1",},
{"lineNum":" 2902","line":"            this.last_len = r.len;","class":"lineCov","hits":"1","order":"1473","possible_hits":"1",},
{"lineNum":" 2903","line":"            return Gap{","class":"lineCov","hits":"1","order":"1476","possible_hits":"1",},
{"lineNum":" 2904","line":"                .start = r.start,","class":"lineCov","hits":"1","order":"1474","possible_hits":"1",},
{"lineNum":" 2905","line":"                .len = r.len,","class":"lineCov","hits":"1","order":"1475","possible_hits":"1",},
{"lineNum":" 2906","line":"            };"},
{"lineNum":" 2907","line":"        }"},
{"lineNum":" 2908","line":"    }"},
{"lineNum":" 2909","line":""},
{"lineNum":" 2910","line":"    fn _nextGapFromGroupIt(this: *_MatchedGapIterator, gr: RegexUnmanaged.MatchedGroupResultIterator.Result) anyerror!?Gap {","class":"lineCov","hits":"1","order":"1524","possible_hits":"1",},
{"lineNum":" 2911","line":"        this.group_it_should_fetch = true;","class":"lineCov","hits":"1","order":"1525","possible_hits":"1",},
{"lineNum":" 2912","line":"        if (this.last_start == gr.start and this.last_len == gr.len) {","class":"lineCov","hits":"1","order":"1526","possible_hits":"1",},
{"lineNum":" 2913","line":"            return this.nextGap();","class":"lineCov","hits":"2","order":"1527","possible_hits":"2",},
{"lineNum":" 2914","line":"        } else if (this.last_start + this.last_len > gr.start) {","class":"linePartCov","hits":"1","order":"1537","possible_hits":"2",},
{"lineNum":" 2915","line":"            return JStringError.RegexMatchOverlapped;","class":"lineCov","hits":"1","order":"1538","possible_hits":"1",},
{"lineNum":" 2916","line":"        } else {"},
{"lineNum":" 2917","line":"            // originally I wrote down:"},
{"lineNum":" 2918","line":"            //"},
{"lineNum":" 2919","line":"            // this.last_start = gr.start;"},
{"lineNum":" 2920","line":"            // this.last_len = gr.len;"},
{"lineNum":" 2921","line":"            // return Gap{"},
{"lineNum":" 2922","line":"            //     .start = gr.start,"},
{"lineNum":" 2923","line":"            //     .len = gr.len,"},
{"lineNum":" 2924","line":"            // };"},
{"lineNum":" 2925","line":"            //"},
{"lineNum":" 2926","line":"            // but this can never happen, because if we reach here, means we find a group result outside of"},
{"lineNum":" 2927","line":"            // 1. all match results"},
{"lineNum":" 2928","line":"            // 2. all other group results"},
{"lineNum":" 2929","line":"            // where 2. be always true (as groups are not overlapping), but for 1., at least one match result must"},
{"lineNum":" 2930","line":"            // cover our group (as how pcre works). So, we can never reach here."},
{"lineNum":" 2931","line":"            //"},
{"lineNum":" 2932","line":"            unreachable;"},
{"lineNum":" 2933","line":"        }"},
{"lineNum":" 2934","line":"    }"},
{"lineNum":" 2935","line":"};"},
{"lineNum":" 2936","line":""},
{"lineNum":" 2937","line":"/// very unsafe, you have been warned to know what you are doing"},
{"lineNum":" 2938","line":"fn _sliceAt(comptime T: type, haystack: []const T, index: isize) T {","class":"lineCov","hits":"1","order":"2091","possible_hits":"1",},
{"lineNum":" 2939","line":"    if (index >= 0) {","class":"lineCov","hits":"1","order":"2092","possible_hits":"1",},
{"lineNum":" 2940","line":"        return haystack[@as(usize, @intCast(index))];","class":"lineCov","hits":"2","order":"2093","possible_hits":"2",},
{"lineNum":" 2941","line":"    } else {"},
{"lineNum":" 2942","line":"        return haystack[@as(usize, @intCast(@as(isize, @intCast(haystack.len)) + index))];","class":"lineCov","hits":"2","order":"2095","possible_hits":"2",},
{"lineNum":" 2943","line":"    }"},
{"lineNum":" 2944","line":"}"},
{"lineNum":" 2945","line":""},
{"lineNum":" 2946","line":"fn _kmpBuildFailureTable(allocator: std.mem.Allocator, needle_slice: []const u8) anyerror![]isize {","class":"lineCov","hits":"1","order":"632","possible_hits":"1",},
{"lineNum":" 2947","line":"    const t = try allocator.alloc(isize, (needle_slice.len + 1));","class":"lineCov","hits":"1","order":"633","possible_hits":"1",},
{"lineNum":" 2948","line":"    @memset(t, 0);","class":"lineCov","hits":"1","order":"634","possible_hits":"1",},
{"lineNum":" 2949","line":""},
{"lineNum":" 2950","line":"    t[0] = -1;","class":"lineCov","hits":"2","order":"635","possible_hits":"2",},
{"lineNum":" 2951","line":"    var pos: usize = 1;","class":"lineCov","hits":"1","order":"636","possible_hits":"1",},
{"lineNum":" 2952","line":"    var cnd: isize = 0;","class":"lineCov","hits":"1","order":"637","possible_hits":"1",},
{"lineNum":" 2953","line":"    while (pos < needle_slice.len) {","class":"lineCov","hits":"1","order":"638","possible_hits":"1",},
{"lineNum":" 2954","line":"        if (needle_slice[pos] == needle_slice[@as(usize, @intCast(cnd))]) {","class":"lineCov","hits":"2","order":"639","possible_hits":"2",},
{"lineNum":" 2955","line":"            t[pos] = t[@as(usize, @intCast(cnd))];","class":"lineCov","hits":"2","order":"684","possible_hits":"2",},
{"lineNum":" 2956","line":"        } else {"},
{"lineNum":" 2957","line":"            t[pos] = cnd;","class":"lineCov","hits":"2","order":"640","possible_hits":"2",},
{"lineNum":" 2958","line":"            while (cnd >= 0 and needle_slice[pos] != needle_slice[@as(usize, @intCast(cnd))]) {","class":"lineCov","hits":"2","order":"641","possible_hits":"2",},
{"lineNum":" 2959","line":"                cnd = t[@as(usize, @intCast(cnd))];","class":"lineCov","hits":"3","order":"642","possible_hits":"3",},
{"lineNum":" 2960","line":"            }"},
{"lineNum":" 2961","line":"        }"},
{"lineNum":" 2962","line":"        pos += 1;","class":"linePartCov","hits":"1","order":"643","possible_hits":"2",},
{"lineNum":" 2963","line":"        cnd += 1;","class":"lineCov","hits":"3","order":"644","possible_hits":"3",},
{"lineNum":" 2964","line":"    }"},
{"lineNum":" 2965","line":"    t[pos] = cnd;","class":"lineCov","hits":"3","order":"645","possible_hits":"3",},
{"lineNum":" 2966","line":""},
{"lineNum":" 2967","line":"    return t;","class":"lineCov","hits":"1","order":"646","possible_hits":"1",},
{"lineNum":" 2968","line":"}"},
{"lineNum":" 2969","line":""},
{"lineNum":" 2970","line":"fn _testCreateErrorUnion(value_or_error: bool, comptime T: type, value: T, err: anyerror) anyerror!T {","class":"lineCov","hits":"1","order":"333","possible_hits":"1",},
{"lineNum":" 2971","line":"    return if (value_or_error) value else err;","class":"lineCov","hits":"1","order":"334","possible_hits":"1",},
{"lineNum":" 2972","line":"}"},
{"lineNum":" 2973","line":""},
{"lineNum":" 2974","line":"fn _testIsError(comptime T: type, maybe_value: anyerror!T, expected_error: anyerror) bool {","class":"lineCov","hits":"7","order":"470","possible_hits":"7",},
{"lineNum":" 2975","line":"    if (maybe_value) |_| {","class":"lineCov","hits":"7","order":"471","possible_hits":"7",},
{"lineNum":" 2976","line":"        return false;","class":"linePartCov","hits":"1","order":"2097","possible_hits":"7",},
{"lineNum":" 2977","line":"    } else |err| {"},
{"lineNum":" 2978","line":"        return err == expected_error;","class":"lineCov","hits":"7","order":"472","possible_hits":"7",},
{"lineNum":" 2979","line":"    }"},
{"lineNum":" 2980","line":"}"},
{"lineNum":" 2981","line":""},
{"lineNum":" 2982","line":"// >>> all your tests belong to me and list in below <<<"},
{"lineNum":" 2983","line":""},
{"lineNum":" 2984","line":"test \"ArenaAllocator\" {","class":"lineCov","hits":"1","order":"1","possible_hits":"1",},
{"lineNum":" 2985","line":"    if (enable_arena_allocator) {"},
{"lineNum":" 2986","line":"        {"},
{"lineNum":" 2987","line":"            var arena_allocator = ArenaAllocator.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"2","possible_hits":"1",},
{"lineNum":" 2988","line":"            defer arena_allocator.deinit();","class":"linePartCov","hits":"1","order":"98","possible_hits":"4",},
{"lineNum":" 2989","line":"            // provides some variance in the allocated data"},
{"lineNum":" 2990","line":""},
{"lineNum":" 2991","line":"            var rng_src = std.rand.DefaultPrng.init(19930913);","class":"lineCov","hits":"1","order":"7","possible_hits":"1",},
{"lineNum":" 2992","line":"            const random = rng_src.random();","class":"lineCov","hits":"1","order":"8","possible_hits":"1",},
{"lineNum":" 2993","line":"            var rounds: usize = 25;","class":"lineCov","hits":"1","order":"9","possible_hits":"1",},
{"lineNum":" 2994","line":"            while (rounds > 0) {","class":"lineCov","hits":"1","order":"10","possible_hits":"1",},
{"lineNum":" 2995","line":"                rounds -= 1;","class":"linePartCov","hits":"1","order":"11","possible_hits":"2",},
{"lineNum":" 2996","line":"                _ = arena_allocator.reset(.retain_capacity);","class":"lineCov","hits":"1","order":"12","possible_hits":"1",},
{"lineNum":" 2997","line":"                var alloced_bytes: usize = 0;","class":"lineCov","hits":"1","order":"29","possible_hits":"1",},
{"lineNum":" 2998","line":"                const total_size: usize = random.intRangeAtMost(usize, 256, 16384);","class":"lineCov","hits":"1","order":"30","possible_hits":"1",},
{"lineNum":" 2999","line":"                while (alloced_bytes < total_size) {","class":"lineCov","hits":"1","order":"31","possible_hits":"1",},
{"lineNum":" 3000","line":"                    const size = random.intRangeAtMost(usize, 16, 256);","class":"lineCov","hits":"1","order":"32","possible_hits":"1",},
{"lineNum":" 3001","line":"                    const alignment = 32;"},
{"lineNum":" 3002","line":"                    const slice = try arena_allocator.allocator().alignedAlloc(u8, alignment, size);","class":"linePartCov","hits":"1","order":"33","possible_hits":"3",},
{"lineNum":" 3003","line":"                    try std.testing.expect(std.mem.isAligned(@intFromPtr(slice.ptr), alignment));","class":"linePartCov","hits":"1","order":"66","possible_hits":"2",},
{"lineNum":" 3004","line":"                    try std.testing.expectEqual(size, slice.len);","class":"linePartCov","hits":"1","order":"67","possible_hits":"2",},
{"lineNum":" 3005","line":"                    alloced_bytes += slice.len;","class":"lineCov","hits":"6","order":"68","possible_hits":"6",},
{"lineNum":" 3006","line":"                }"},
{"lineNum":" 3007","line":"            }"},
{"lineNum":" 3008","line":"        }"},
{"lineNum":" 3009","line":"        {"},
{"lineNum":" 3010","line":"            var arena_allocator = ArenaAllocator.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"103","possible_hits":"1",},
{"lineNum":" 3011","line":"            defer arena_allocator.deinit();","class":"linePartCov","hits":"1","order":"111","possible_hits":"5",},
{"lineNum":" 3012","line":"            const a = arena_allocator.allocator();","class":"lineCov","hits":"1","order":"104","possible_hits":"1",},
{"lineNum":" 3013","line":""},
{"lineNum":" 3014","line":"            // Create two internal buffers"},
{"lineNum":" 3015","line":"            _ = try a.alloc(u8, 1);","class":"linePartCov","hits":"1","order":"105","possible_hits":"3",},
{"lineNum":" 3016","line":"            _ = try a.alloc(u8, 1000);","class":"linePartCov","hits":"1","order":"106","possible_hits":"2",},
{"lineNum":" 3017","line":""},
{"lineNum":" 3018","line":"            // Check that we have at least two buffers"},
{"lineNum":" 3019","line":"            try std.testing.expect(arena_allocator.state.buffer_list.first.?.next != null);","class":"linePartCov","hits":"1","order":"107","possible_hits":"2",},
{"lineNum":" 3020","line":""},
{"lineNum":" 3021","line":"            // This retains the first allocated buffer"},
{"lineNum":" 3022","line":"            try std.testing.expect(arena_allocator.reset(.{ .retain_with_limit = 1 }));","class":"linePartCov","hits":"1","order":"108","possible_hits":"2",},
{"lineNum":" 3023","line":"        }"},
{"lineNum":" 3024","line":"        {"},
{"lineNum":" 3025","line":"            var arena_allocator = ArenaAllocator.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"112","possible_hits":"1",},
{"lineNum":" 3026","line":"            defer arena_allocator.deinit();","class":"linePartCov","hits":"1","order":"130","possible_hits":"6",},
{"lineNum":" 3027","line":"            const a = arena_allocator.allocator();","class":"lineCov","hits":"1","order":"113","possible_hits":"1",},
{"lineNum":" 3028","line":"            var buf = try a.alloc(u8, 100);","class":"linePartCov","hits":"1","order":"114","possible_hits":"2",},
{"lineNum":" 3029","line":"            buf = try a.realloc(buf, 50);","class":"linePartCov","hits":"1","order":"115","possible_hits":"2",},
{"lineNum":" 3030","line":"            try testing.expectEqual(buf.len, 50);","class":"linePartCov","hits":"1","order":"124","possible_hits":"2",},
{"lineNum":" 3031","line":"            buf = try a.realloc(buf, 60);","class":"linePartCov","hits":"1","order":"125","possible_hits":"2",},
{"lineNum":" 3032","line":"            try testing.expectEqual(buf.len, 60);","class":"linePartCov","hits":"1","order":"129","possible_hits":"2",},
{"lineNum":" 3033","line":"        }"},
{"lineNum":" 3034","line":"    }"},
{"lineNum":" 3035","line":"}"},
{"lineNum":" 3036","line":""},
{"lineNum":" 3037","line":"test \"constructors\" {","class":"lineCov","hits":"1","order":"131","possible_hits":"1",},
{"lineNum":" 3038","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"132","possible_hits":"1",},
{"lineNum":" 3039","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"201","possible_hits":"26",},
{"lineNum":" 3040","line":"    {"},
{"lineNum":" 3041","line":"        const str1 = try JStringUnmanaged.newEmpty(arena.allocator());","class":"linePartCov","hits":"1","order":"133","possible_hits":"2",},
{"lineNum":" 3042","line":"        try testing.expectEqual(str1.len(), 0);","class":"linePartCov","hits":"2","order":"137","possible_hits":"3",},
{"lineNum":" 3043","line":"        const str2 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,world\");","class":"linePartCov","hits":"1","order":"139","possible_hits":"2",},
{"lineNum":" 3044","line":"        try testing.expectEqual(str2.len(), 11);","class":"linePartCov","hits":"2","order":"144","possible_hits":"3",},
{"lineNum":" 3045","line":"        const str3 = try JStringUnmanaged.newFromJStringUnmanaged(arena.allocator(), str2);","class":"linePartCov","hits":"1","order":"145","possible_hits":"2",},
{"lineNum":" 3046","line":"        try testing.expectEqual(str3.len(), 11);","class":"linePartCov","hits":"2","order":"150","possible_hits":"3",},
{"lineNum":" 3047","line":"        const str4 = try JStringUnmanaged.newFromFormat(arena.allocator(), \"{s}\", .{\"jstring\"});","class":"linePartCov","hits":"1","order":"151","possible_hits":"2",},
{"lineNum":" 3048","line":"        try testing.expectEqual(str4.len(), 7);","class":"linePartCov","hits":"2","order":"155","possible_hits":"3",},
{"lineNum":" 3049","line":"        const str5 = try JStringUnmanaged.newFromTuple(arena.allocator(), .{ \"jstring\", 5 });","class":"linePartCov","hits":"1","order":"156","possible_hits":"2",},
{"lineNum":" 3050","line":"        try testing.expectEqual(str5.len(), 8);","class":"linePartCov","hits":"2","order":"159","possible_hits":"3",},
{"lineNum":" 3051","line":"        const str6 = try JStringUnmanaged.newFromNumber(arena.allocator(), i32, -5);","class":"linePartCov","hits":"1","order":"160","possible_hits":"2",},
{"lineNum":" 3052","line":"        try testing.expect(str6.eqlSlice(\"-5\"));","class":"linePartCov","hits":"2","order":"162","possible_hits":"3",},
{"lineNum":" 3053","line":"        const str7 = try JStringUnmanaged.newFromNumber(arena.allocator(), f32, -5.5);","class":"linePartCov","hits":"1","order":"164","possible_hits":"2",},
{"lineNum":" 3054","line":"        try testing.expect(str7.eqlSlice(\"-5.5\"));","class":"linePartCov","hits":"2","order":"165","possible_hits":"3",},
{"lineNum":" 3055","line":"        const TestType = struct { a: i32, b: []const u8 };"},
{"lineNum":" 3056","line":"        const str8 = try JStringUnmanaged.newFromStringify(arena.allocator(), TestType{ .a = 123, .b = \"xy\" });","class":"linePartCov","hits":"1","order":"166","possible_hits":"2",},
{"lineNum":" 3057","line":"        try testing.expect(str8.eqlSlice(\"{\\\"a\\\":123,\\\"b\\\":\\\"xy\\\"}\"));","class":"linePartCov","hits":"2","order":"177","possible_hits":"3",},
{"lineNum":" 3058","line":"        const str9 = try JStringUnmanaged.newFromStringifyWithOptions(arena.allocator(), TestType{ .a = 123, .b = \"xy\" }, .{ .whitespace = .indent_2 });","class":"linePartCov","hits":"1","order":"178","possible_hits":"2",},
{"lineNum":" 3059","line":"        const str9value =","class":"lineCov","hits":"1","order":"183","possible_hits":"1",},
{"lineNum":" 3060","line":"            \\\\{"},
{"lineNum":" 3061","line":"            \\\\  \"a\": 123,"},
{"lineNum":" 3062","line":"            \\\\  \"b\": \"xy\""},
{"lineNum":" 3063","line":"            \\\\}"},
{"lineNum":" 3064","line":"        ;"},
{"lineNum":" 3065","line":"        try testing.expect(str9.eqlSlice(str9value));","class":"linePartCov","hits":"2","order":"184","possible_hits":"3",},
{"lineNum":" 3066","line":"    }"},
{"lineNum":" 3067","line":"    {"},
{"lineNum":" 3068","line":"        var tmp_dir = std.testing.tmpDir(.{});","class":"lineCov","hits":"1","order":"185","possible_hits":"1",},
{"lineNum":" 3069","line":"        defer tmp_dir.cleanup();","class":"linePartCov","hits":"1","order":"200","possible_hits":"8",},
{"lineNum":" 3070","line":"        var tmp_file = try tmp_dir.dir.createFile(\"test.txt\", .{ .read = true });","class":"linePartCov","hits":"1","order":"186","possible_hits":"2",},
{"lineNum":" 3071","line":"        try tmp_file.writeAll(\"hello,world\");","class":"linePartCov","hits":"1","order":"187","possible_hits":"2",},
{"lineNum":" 3072","line":"        try tmp_file.seekTo(0);","class":"linePartCov","hits":"1","order":"188","possible_hits":"2",},
{"lineNum":" 3073","line":"        const str10 = try JStringUnmanaged.newFromFile(arena.allocator(), tmp_file);","class":"linePartCov","hits":"1","order":"189","possible_hits":"2",},
{"lineNum":" 3074","line":"        try testing.expect(str10.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"196","possible_hits":"3",},
{"lineNum":" 3075","line":"        // now file is at the end, so read again should give us 0 len slice"},
{"lineNum":" 3076","line":"        const str11 = try JStringUnmanaged.newFromFile(arena.allocator(), tmp_file);","class":"linePartCov","hits":"1","order":"197","possible_hits":"2",},
{"lineNum":" 3077","line":"        try testing.expect(str11.eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"199","possible_hits":"3",},
{"lineNum":" 3078","line":"    }"},
{"lineNum":" 3079","line":"}"},
{"lineNum":" 3080","line":""},
{"lineNum":" 3081","line":"test \"formatter\" {","class":"lineCov","hits":"1","order":"202","possible_hits":"1",},
{"lineNum":" 3082","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"203","possible_hits":"1",},
{"lineNum":" 3083","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"209","possible_hits":"4",},
{"lineNum":" 3084","line":"    const str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,world\");","class":"linePartCov","hits":"1","order":"204","possible_hits":"2",},
{"lineNum":" 3085","line":"    const s = try std.fmt.allocPrint(arena.allocator(), \"{}\", .{str1});","class":"linePartCov","hits":"1","order":"205","possible_hits":"2",},
{"lineNum":" 3086","line":"    try testing.expectEqualSlices(u8, s, \"hello,world\");","class":"linePartCov","hits":"1","order":"208","possible_hits":"2",},
{"lineNum":" 3087","line":"}"},
{"lineNum":" 3088","line":""},
{"lineNum":" 3089","line":"test \"utils\" {","class":"lineCov","hits":"1","order":"210","possible_hits":"1",},
{"lineNum":" 3090","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"211","possible_hits":"1",},
{"lineNum":" 3091","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"293","possible_hits":"28",},
{"lineNum":" 3092","line":"    {"},
{"lineNum":" 3093","line":"        const str1 = try JStringUnmanaged.newEmpty(arena.allocator());","class":"linePartCov","hits":"1","order":"212","possible_hits":"2",},
{"lineNum":" 3094","line":"        const str2 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,world\");","class":"linePartCov","hits":"1","order":"213","possible_hits":"2",},
{"lineNum":" 3095","line":"        const str3 = try JStringUnmanaged.newFromJStringUnmanaged(arena.allocator(), str2);","class":"linePartCov","hits":"1","order":"214","possible_hits":"2",},
{"lineNum":" 3096","line":"        try testing.expect(str1.eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"215","possible_hits":"3",},
{"lineNum":" 3097","line":"        try testing.expect(str1.isEmpty());","class":"linePartCov","hits":"2","order":"216","possible_hits":"3",},
{"lineNum":" 3098","line":"        try testing.expect(str2.eql(str3));","class":"linePartCov","hits":"2","order":"218","possible_hits":"3",},
{"lineNum":" 3099","line":"        try testing.expect(str3.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"220","possible_hits":"3",},
{"lineNum":" 3100","line":"        const str4 = try str3.clone(arena.allocator());","class":"linePartCov","hits":"1","order":"221","possible_hits":"2",},
{"lineNum":" 3101","line":"        try testing.expect(str4.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"223","possible_hits":"3",},
{"lineNum":" 3102","line":"        try testing.expect(str3.str_slice.ptr != str4.str_slice.ptr);","class":"linePartCov","hits":"1","order":"224","possible_hits":"2",},
{"lineNum":" 3103","line":"    }"},
{"lineNum":" 3104","line":"    {"},
{"lineNum":" 3105","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"zig更好的c💯\");","class":"linePartCov","hits":"1","order":"225","possible_hits":"2",},
{"lineNum":" 3106","line":"        try testing.expectEqual(str1.utf8Len(), 8);","class":"linePartCov","hits":"1","order":"226","possible_hits":"2",},
{"lineNum":" 3107","line":"    }"},
{"lineNum":" 3108","line":"    {"},
{"lineNum":" 3109","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \" zig 更好 \\t 的c\\t💯\");","class":"linePartCov","hits":"1","order":"238","possible_hits":"2",},
{"lineNum":" 3110","line":"        var strings1 = try str1.explode(arena.allocator(), -1);","class":"linePartCov","hits":"1","order":"239","possible_hits":"2",},
{"lineNum":" 3111","line":"        try testing.expectEqual(strings1.len, 4);","class":"linePartCov","hits":"1","order":"270","possible_hits":"2",},
{"lineNum":" 3112","line":"        var strings2 = try str1.explode(arena.allocator(), 2);","class":"linePartCov","hits":"1","order":"271","possible_hits":"2",},
{"lineNum":" 3113","line":"        try testing.expectEqual(strings2.len, 2);","class":"linePartCov","hits":"1","order":"274","possible_hits":"2",},
{"lineNum":" 3114","line":"        try testing.expect(strings2[0].eqlSlice(\"zig\"));","class":"linePartCov","hits":"2","order":"275","possible_hits":"3",},
{"lineNum":" 3115","line":"        try testing.expect(strings2[1].eqlSlice(\"更好\"));","class":"linePartCov","hits":"2","order":"276","possible_hits":"3",},
{"lineNum":" 3116","line":"        strings1 = try str1.splitByWhiteSpace(arena.allocator(), -1);","class":"linePartCov","hits":"1","order":"277","possible_hits":"2",},
{"lineNum":" 3117","line":"        try testing.expectEqual(strings1.len, 4);","class":"linePartCov","hits":"1","order":"279","possible_hits":"2",},
{"lineNum":" 3118","line":"        strings2 = try str1.splitByWhiteSpace(arena.allocator(), 2);","class":"linePartCov","hits":"1","order":"280","possible_hits":"2",},
{"lineNum":" 3119","line":"        try testing.expectEqual(strings2.len, 2);","class":"linePartCov","hits":"1","order":"281","possible_hits":"2",},
{"lineNum":" 3120","line":"        try testing.expect(strings2[0].eqlSlice(\"zig\"));","class":"linePartCov","hits":"2","order":"282","possible_hits":"3",},
{"lineNum":" 3121","line":"        try testing.expect(strings2[1].eqlSlice(\"更好\"));","class":"linePartCov","hits":"2","order":"283","possible_hits":"3",},
{"lineNum":" 3122","line":"    }"},
{"lineNum":" 3123","line":"    {"},
{"lineNum":" 3124","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \" zig 更好 \\t 的c\\t💯\");","class":"linePartCov","hits":"1","order":"284","possible_hits":"2",},
{"lineNum":" 3125","line":"        var wyhash = std.hash.Wyhash.init(0);","class":"lineCov","hits":"1","order":"285","possible_hits":"1",},
{"lineNum":" 3126","line":"        wyhash.update(\" zig 更好 \\t 的c\\t💯\");","class":"lineCov","hits":"1","order":"286","possible_hits":"1",},
{"lineNum":" 3127","line":"        const h = wyhash.final();","class":"lineCov","hits":"1","order":"287","possible_hits":"1",},
{"lineNum":" 3128","line":"        try testing.expectEqual(str1.hash(), h);","class":"linePartCov","hits":"1","order":"288","possible_hits":"2",},
{"lineNum":" 3129","line":"    }"},
{"lineNum":" 3130","line":"}"},
{"lineNum":" 3131","line":""},
{"lineNum":" 3132","line":"test \"concat\" {","class":"lineCov","hits":"1","order":"294","possible_hits":"1",},
{"lineNum":" 3133","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"295","possible_hits":"1",},
{"lineNum":" 3134","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"380","possible_hits":"24",},
{"lineNum":" 3135","line":"    const str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,world\");","class":"linePartCov","hits":"1","order":"296","possible_hits":"2",},
{"lineNum":" 3136","line":"    var str_array_buf: [256]JStringUnmanaged = undefined;","class":"lineCov","hits":"1","order":"297","possible_hits":"1",},
{"lineNum":" 3137","line":"    str_array_buf[0] = str1;","class":"lineCov","hits":"1","order":"298","possible_hits":"1",},
{"lineNum":" 3138","line":"    const str2 = try str1.concatMany(arena.allocator(), str_array_buf[0..1]);","class":"linePartCov","hits":"1","order":"299","possible_hits":"2",},
{"lineNum":" 3139","line":"    try testing.expect(str1.eqlSlice(\"hello,world\" ** 1));","class":"linePartCov","hits":"2","order":"315","possible_hits":"3",},
{"lineNum":" 3140","line":"    try testing.expect(str2.eqlSlice(\"hello,world\" ** 2));","class":"linePartCov","hits":"2","order":"316","possible_hits":"3",},
{"lineNum":" 3141","line":"    str_array_buf[1] = str2;","class":"lineCov","hits":"1","order":"317","possible_hits":"1",},
{"lineNum":" 3142","line":"    const str3 = try str1.concatMany(arena.allocator(), str_array_buf[0..2]);","class":"linePartCov","hits":"1","order":"318","possible_hits":"2",},
{"lineNum":" 3143","line":"    try testing.expect(str3.eqlSlice(\"hello,world\" ** 4));","class":"linePartCov","hits":"2","order":"319","possible_hits":"3",},
{"lineNum":" 3144","line":"    const str4 = try str1.concatMany(arena.allocator(), str_array_buf[0..0]);","class":"linePartCov","hits":"1","order":"320","possible_hits":"2",},
{"lineNum":" 3145","line":"    try testing.expect(str4.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"322","possible_hits":"3",},
{"lineNum":" 3146","line":"    try testing.expect(str4.str_slice.ptr != str1.str_slice.ptr);","class":"linePartCov","hits":"1","order":"323","possible_hits":"2",},
{"lineNum":" 3147","line":"    const str5 = try str1.concatFormat(arena.allocator(), \"{s}\", .{\" jstring\"});","class":"linePartCov","hits":"1","order":"324","possible_hits":"2",},
{"lineNum":" 3148","line":"    try testing.expect(str5.eqlSlice(\"hello,world jstring\"));","class":"linePartCov","hits":"2","order":"331","possible_hits":"3",},
{"lineNum":" 3149","line":"    const optional_6: ?i32 = 6;"},
{"lineNum":" 3150","line":"    const error1 = _testCreateErrorUnion(false, i32, 0, error.OutOfMemory);","class":"linePartCov","hits":"1","order":"332","possible_hits":"2",},
{"lineNum":" 3151","line":"    const str6 = try str1.concatTuple(arena.allocator(), .{","class":"linePartCov","hits":"1","order":"335","possible_hits":"3",},
{"lineNum":" 3152","line":"        \" jstring\","},
{"lineNum":" 3153","line":"        5,"},
{"lineNum":" 3154","line":"        optional_6,"},
{"lineNum":" 3155","line":"        error1,"},
{"lineNum":" 3156","line":"    });"},
{"lineNum":" 3157","line":"    try testing.expect(str6.eqlSlice(\"hello,world jstring56error.OutOfMemory\"));","class":"linePartCov","hits":"2","order":"338","possible_hits":"3",},
{"lineNum":" 3158","line":"    const str7 = try str1.concat(arena.allocator(), str1);","class":"linePartCov","hits":"1","order":"339","possible_hits":"2",},
{"lineNum":" 3159","line":"    try testing.expect(str7.eqlSlice(\"hello,worldhello,world\"));","class":"linePartCov","hits":"2","order":"352","possible_hits":"3",},
{"lineNum":" 3160","line":"    const str8 = try str1.concatSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"353","possible_hits":"2",},
{"lineNum":" 3161","line":"    try testing.expect(str8.eqlSlice(\"hello,worldhello\"));","class":"linePartCov","hits":"2","order":"354","possible_hits":"3",},
{"lineNum":" 3162","line":"    var some_slices: [1][]const u8 = undefined;","class":"lineCov","hits":"1","order":"355","possible_hits":"1",},
{"lineNum":" 3163","line":"    some_slices[0] = \"hello\";","class":"lineCov","hits":"1","order":"356","possible_hits":"1",},
{"lineNum":" 3164","line":"    const str9 = try str1.concatManySlices(arena.allocator(), &some_slices);","class":"linePartCov","hits":"1","order":"357","possible_hits":"2",},
{"lineNum":" 3165","line":"    try testing.expect(str9.eqlSlice(\"hello,worldhello\"));","class":"linePartCov","hits":"2","order":"373","possible_hits":"3",},
{"lineNum":" 3166","line":"    const str10 = try str1.concatSlice(arena.allocator(), \"\");","class":"linePartCov","hits":"1","order":"374","possible_hits":"2",},
{"lineNum":" 3167","line":"    try testing.expect(str10.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"376","possible_hits":"3",},
{"lineNum":" 3168","line":"    const str11 = try str1.concatManySlices(arena.allocator(), some_slices[0..0]);","class":"linePartCov","hits":"1","order":"377","possible_hits":"2",},
{"lineNum":" 3169","line":"    try testing.expect(str11.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"379","possible_hits":"3",},
{"lineNum":" 3170","line":"}"},
{"lineNum":" 3171","line":""},
{"lineNum":" 3172","line":"test \"startsWith/endsWith\" {","class":"lineCov","hits":"1","order":"381","possible_hits":"1",},
{"lineNum":" 3173","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"382","possible_hits":"1",},
{"lineNum":" 3174","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"404","possible_hits":"12",},
{"lineNum":" 3175","line":"    const str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,world\");","class":"linePartCov","hits":"1","order":"383","possible_hits":"2",},
{"lineNum":" 3176","line":"    const str2 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"384","possible_hits":"2",},
{"lineNum":" 3177","line":"    try testing.expect(str1.startsWith(str2));","class":"linePartCov","hits":"2","order":"385","possible_hits":"3",},
{"lineNum":" 3178","line":"    try testing.expect(str1.startsWithSlice(\"\"));","class":"linePartCov","hits":"1","order":"390","possible_hits":"2",},
{"lineNum":" 3179","line":"    try testing.expect(str1.startsWithSlice(\"hello\"));","class":"linePartCov","hits":"1","order":"391","possible_hits":"2",},
{"lineNum":" 3180","line":"    try testing.expect(!str1.startsWithSlice(\"hello,world,more\"));","class":"linePartCov","hits":"1","order":"392","possible_hits":"2",},
{"lineNum":" 3181","line":"    const str3 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"world\");","class":"linePartCov","hits":"1","order":"394","possible_hits":"2",},
{"lineNum":" 3182","line":"    try testing.expect(str1.endsWith(str3));","class":"linePartCov","hits":"2","order":"395","possible_hits":"3",},
{"lineNum":" 3183","line":"    try testing.expect(str1.endsWithSlice(\"\"));","class":"linePartCov","hits":"1","order":"400","possible_hits":"2",},
{"lineNum":" 3184","line":"    try testing.expect(str1.endsWithSlice(\"world\"));","class":"linePartCov","hits":"1","order":"401","possible_hits":"2",},
{"lineNum":" 3185","line":"    try testing.expect(!str1.endsWithSlice(\"hello,world,more\"));","class":"linePartCov","hits":"1","order":"402","possible_hits":"2",},
{"lineNum":" 3186","line":"}"},
{"lineNum":" 3187","line":""},
{"lineNum":" 3188","line":"test \"trim/trimStart/trimEnd\" {","class":"lineCov","hits":"1","order":"405","possible_hits":"1",},
{"lineNum":" 3189","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"406","possible_hits":"1",},
{"lineNum":" 3190","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"461","possible_hits":"26",},
{"lineNum":" 3191","line":"    {"},
{"lineNum":" 3192","line":"        const str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"  hello,world\");","class":"linePartCov","hits":"1","order":"407","possible_hits":"2",},
{"lineNum":" 3193","line":"        const str2 = try str1.trimStart(arena.allocator());","class":"linePartCov","hits":"1","order":"408","possible_hits":"2",},
{"lineNum":" 3194","line":"        try testing.expect(str2.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"416","possible_hits":"3",},
{"lineNum":" 3195","line":"        const str3 = try str2.trimStart(arena.allocator());","class":"linePartCov","hits":"1","order":"417","possible_hits":"2",},
{"lineNum":" 3196","line":"        try testing.expect(str3.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"419","possible_hits":"3",},
{"lineNum":" 3197","line":"        const str4 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"  \\t  \");","class":"linePartCov","hits":"1","order":"420","possible_hits":"2",},
{"lineNum":" 3198","line":"        const str5 = try str4.trimStart(arena.allocator());","class":"linePartCov","hits":"1","order":"421","possible_hits":"2",},
{"lineNum":" 3199","line":"        try testing.expect(str5.eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"423","possible_hits":"3",},
{"lineNum":" 3200","line":"    }"},
{"lineNum":" 3201","line":"    {"},
{"lineNum":" 3202","line":"        const str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,world  \");","class":"linePartCov","hits":"1","order":"424","possible_hits":"2",},
{"lineNum":" 3203","line":"        const str2 = try str1.trimEnd(arena.allocator());","class":"linePartCov","hits":"1","order":"425","possible_hits":"2",},
{"lineNum":" 3204","line":"        try testing.expect(str2.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"437","possible_hits":"3",},
{"lineNum":" 3205","line":"        const str3 = try str2.trimEnd(arena.allocator());","class":"linePartCov","hits":"1","order":"438","possible_hits":"2",},
{"lineNum":" 3206","line":"        try testing.expect(str3.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"440","possible_hits":"3",},
{"lineNum":" 3207","line":"        const str4 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"  \\t  \");","class":"linePartCov","hits":"1","order":"441","possible_hits":"2",},
{"lineNum":" 3208","line":"        const str5 = try str4.trimEnd(arena.allocator());","class":"linePartCov","hits":"1","order":"442","possible_hits":"2",},
{"lineNum":" 3209","line":"        try testing.expect(str5.eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"444","possible_hits":"3",},
{"lineNum":" 3210","line":"    }"},
{"lineNum":" 3211","line":"    {"},
{"lineNum":" 3212","line":"        const str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"  hello,world  \");","class":"linePartCov","hits":"1","order":"445","possible_hits":"2",},
{"lineNum":" 3213","line":"        const str2 = try str1.trim(arena.allocator());","class":"linePartCov","hits":"1","order":"446","possible_hits":"2",},
{"lineNum":" 3214","line":"        try testing.expect(str2.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"453","possible_hits":"3",},
{"lineNum":" 3215","line":"        const str4 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"  \\t  \");","class":"linePartCov","hits":"1","order":"454","possible_hits":"2",},
{"lineNum":" 3216","line":"        const str5 = try str4.trimEnd(arena.allocator());","class":"linePartCov","hits":"1","order":"455","possible_hits":"2",},
{"lineNum":" 3217","line":"        try testing.expect(str5.eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"456","possible_hits":"3",},
{"lineNum":" 3218","line":"    }"},
{"lineNum":" 3219","line":"    {"},
{"lineNum":" 3220","line":"        const str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"  \");","class":"linePartCov","hits":"1","order":"457","possible_hits":"2",},
{"lineNum":" 3221","line":"        var str2 = try str1.trim(arena.allocator());","class":"linePartCov","hits":"1","order":"458","possible_hits":"2",},
{"lineNum":" 3222","line":"        try testing.expect(str2.isEmpty());","class":"linePartCov","hits":"2","order":"460","possible_hits":"3",},
{"lineNum":" 3223","line":"    }"},
{"lineNum":" 3224","line":"}"},
{"lineNum":" 3225","line":""},
{"lineNum":" 3226","line":"test \"chartAt/at\" {","class":"lineCov","hits":"1","order":"462","possible_hits":"1",},
{"lineNum":" 3227","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"463","possible_hits":"1",},
{"lineNum":" 3228","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"505","possible_hits":"16",},
{"lineNum":" 3229","line":"    {"},
{"lineNum":" 3230","line":"        const str1 = try JStringUnmanaged.newEmpty(arena.allocator());","class":"linePartCov","hits":"1","order":"464","possible_hits":"2",},
{"lineNum":" 3231","line":"        const str2 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"abcdefg\");","class":"linePartCov","hits":"1","order":"465","possible_hits":"2",},
{"lineNum":" 3232","line":"        try testing.expect(_testIsError(u8, str1.charAt(100), error.IndexOutOfBounds));","class":"linePartCov","hits":"1","order":"466","possible_hits":"2",},
{"lineNum":" 3233","line":"        try testing.expectEqual(str2.charAt(0), \'a\');","class":"linePartCov","hits":"1","order":"473","possible_hits":"2",},
{"lineNum":" 3234","line":"        try testing.expectEqual(str2.charAt(2), \'c\');","class":"linePartCov","hits":"1","order":"477","possible_hits":"2",},
{"lineNum":" 3235","line":"        try testing.expectEqual(str2.charAt(-3), \'e\');","class":"linePartCov","hits":"1","order":"478","possible_hits":"2",},
{"lineNum":" 3236","line":"        try testing.expectEqual(str2.charAt(-7), \'a\');","class":"linePartCov","hits":"1","order":"480","possible_hits":"2",},
{"lineNum":" 3237","line":"        try testing.expect(_testIsError(u8, str2.charAt(-100), error.IndexOutOfBounds));","class":"linePartCov","hits":"1","order":"481","possible_hits":"2",},
{"lineNum":" 3238","line":"    }"},
{"lineNum":" 3239","line":"    {"},
{"lineNum":" 3240","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"zig更好的c💯\");","class":"linePartCov","hits":"1","order":"483","possible_hits":"2",},
{"lineNum":" 3241","line":"        try testing.expectEqual(str1.at(0), \'z\');","class":"linePartCov","hits":"1","order":"484","possible_hits":"2",},
{"lineNum":" 3242","line":"        try testing.expectEqual(str1.at(3), \'更\');","class":"linePartCov","hits":"1","order":"497","possible_hits":"2",},
{"lineNum":" 3243","line":"        try testing.expectEqual(str1.at(-1), \'💯\');","class":"linePartCov","hits":"1","order":"499","possible_hits":"2",},
{"lineNum":" 3244","line":"        try testing.expectEqual(str1.at(-8), \'z\');","class":"linePartCov","hits":"1","order":"500","possible_hits":"2",},
{"lineNum":" 3245","line":"        try testing.expect(_testIsError(u21, str1.at(100), error.IndexOutOfBounds));","class":"linePartCov","hits":"1","order":"501","possible_hits":"2",},
{"lineNum":" 3246","line":"        try testing.expect(_testIsError(u21, str1.at(-100), error.IndexOutOfBounds));","class":"linePartCov","hits":"1","order":"503","possible_hits":"2",},
{"lineNum":" 3247","line":"    }"},
{"lineNum":" 3248","line":"}"},
{"lineNum":" 3249","line":""},
{"lineNum":" 3250","line":"test \"iterator/reverseIterator/utf8Iterator\" {","class":"lineCov","hits":"1","order":"506","possible_hits":"1",},
{"lineNum":" 3251","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"507","possible_hits":"1",},
{"lineNum":" 3252","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"539","possible_hits":"13",},
{"lineNum":" 3253","line":"    {"},
{"lineNum":" 3254","line":"        const str1 = try JStringUnmanaged.newEmpty(arena.allocator());","class":"linePartCov","hits":"1","order":"508","possible_hits":"2",},
{"lineNum":" 3255","line":"        const str2 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"ab\");","class":"linePartCov","hits":"1","order":"509","possible_hits":"2",},
{"lineNum":" 3256","line":"        var it1 = str1.iterator();","class":"lineCov","hits":"1","order":"510","possible_hits":"1",},
{"lineNum":" 3257","line":"        try testing.expectEqual(it1.next(), null);","class":"linePartCov","hits":"1","order":"512","possible_hits":"2",},
{"lineNum":" 3258","line":"        var it2 = str2.iterator();","class":"lineCov","hits":"1","order":"516","possible_hits":"1",},
{"lineNum":" 3259","line":"        try testing.expectEqual(it2.next(), \'a\');","class":"linePartCov","hits":"1","order":"517","possible_hits":"2",},
{"lineNum":" 3260","line":"        try testing.expectEqual(it2.next(), \'b\');","class":"linePartCov","hits":"1","order":"521","possible_hits":"2",},
{"lineNum":" 3261","line":"        try testing.expectEqual(it2.next(), null);","class":"linePartCov","hits":"1","order":"522","possible_hits":"2",},
{"lineNum":" 3262","line":"        var it3 = str2.reverseIterator();","class":"lineCov","hits":"1","order":"523","possible_hits":"1",},
{"lineNum":" 3263","line":"        try testing.expectEqual(it3.next(), \'b\');","class":"linePartCov","hits":"1","order":"525","possible_hits":"2",},
{"lineNum":" 3264","line":"        try testing.expectEqual(it3.next(), \'a\');","class":"linePartCov","hits":"1","order":"531","possible_hits":"2",},
{"lineNum":" 3265","line":"        try testing.expectEqual(it3.next(), null);","class":"linePartCov","hits":"1","order":"532","possible_hits":"2",},
{"lineNum":" 3266","line":"    }"},
{"lineNum":" 3267","line":"    {"},
{"lineNum":" 3268","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"zig更好的c💯\");","class":"linePartCov","hits":"1","order":"534","possible_hits":"2",},
{"lineNum":" 3269","line":"        var it1 = try str1.utf8Iterator();","class":"linePartCov","hits":"1","order":"535","possible_hits":"2",},
{"lineNum":" 3270","line":"        try testing.expectEqual(it1.nextCodepoint(), \'z\');","class":"linePartCov","hits":"1","order":"538","possible_hits":"2",},
{"lineNum":" 3271","line":"    }"},
{"lineNum":" 3272","line":"}"},
{"lineNum":" 3273","line":""},
{"lineNum":" 3274","line":"test \"padStart/padEnd\" {","class":"lineCov","hits":"1","order":"540","possible_hits":"1",},
{"lineNum":" 3275","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"541","possible_hits":"1",},
{"lineNum":" 3276","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"590","possible_hits":"17",},
{"lineNum":" 3277","line":"    {"},
{"lineNum":" 3278","line":"        const str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"542","possible_hits":"2",},
{"lineNum":" 3279","line":"        const str2 = try str1.padStart(arena.allocator(), 12, \"welcome\");","class":"linePartCov","hits":"1","order":"543","possible_hits":"2",},
{"lineNum":" 3280","line":"        try testing.expect(str2.eqlSlice(\"welcomehello\"));","class":"linePartCov","hits":"2","order":"558","possible_hits":"3",},
{"lineNum":" 3281","line":"        const str3 = try str1.padStart(arena.allocator(), 15, \"welcome\");","class":"linePartCov","hits":"1","order":"559","possible_hits":"2",},
{"lineNum":" 3282","line":"        try testing.expect(str3.eqlSlice(\"omewelcomehello\"));","class":"linePartCov","hits":"2","order":"560","possible_hits":"3",},
{"lineNum":" 3283","line":"        const str4 = try str1.padStart(arena.allocator(), 4, \"welcome\");","class":"linePartCov","hits":"1","order":"561","possible_hits":"2",},
{"lineNum":" 3284","line":"        try testing.expect(str4.eqlSlice(\"hello\"));","class":"linePartCov","hits":"2","order":"563","possible_hits":"3",},
{"lineNum":" 3285","line":"    }"},
{"lineNum":" 3286","line":"    {"},
{"lineNum":" 3287","line":"        const str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"564","possible_hits":"2",},
{"lineNum":" 3288","line":"        const str2 = try str1.padEnd(arena.allocator(), 10, \"world\");","class":"linePartCov","hits":"1","order":"565","possible_hits":"2",},
{"lineNum":" 3289","line":"        try testing.expect(str2.eqlSlice(\"helloworld\"));","class":"linePartCov","hits":"2","order":"580","possible_hits":"3",},
{"lineNum":" 3290","line":"        const str3 = try str1.padEnd(arena.allocator(), 13, \"world\");","class":"linePartCov","hits":"1","order":"581","possible_hits":"2",},
{"lineNum":" 3291","line":"        try testing.expect(str3.eqlSlice(\"helloworldwor\"));","class":"linePartCov","hits":"2","order":"582","possible_hits":"3",},
{"lineNum":" 3292","line":"        const str4 = try str1.padEnd(arena.allocator(), 4, \"welcome\");","class":"linePartCov","hits":"1","order":"583","possible_hits":"2",},
{"lineNum":" 3293","line":"        try testing.expect(str4.eqlSlice(\"hello\"));","class":"linePartCov","hits":"2","order":"585","possible_hits":"3",},
{"lineNum":" 3294","line":"    }"},
{"lineNum":" 3295","line":"    {"},
{"lineNum":" 3296","line":"        // zig💯 = 0x7a 0x69 0x67 0xf0 0x9f 0x92 0xaf, 7 bytes"},
{"lineNum":" 3297","line":"        const raw_bytes = \"zig💯\";","class":"lineCov","hits":"1","order":"586","possible_hits":"1",},
{"lineNum":" 3298","line":"        const wrong_raw_bytes = raw_bytes[0..6]; // now this is corrupted unicode string","class":"lineCov","hits":"1","order":"587","possible_hits":"1",},
{"lineNum":" 3299","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), wrong_raw_bytes);","class":"linePartCov","hits":"1","order":"588","possible_hits":"2",},
{"lineNum":" 3300","line":"        try testing.expect(_testIsError(u21, str1.at(4), error.InvalidUtf8));","class":"linePartCov","hits":"1","order":"589","possible_hits":"2",},
{"lineNum":" 3301","line":"    }"},
{"lineNum":" 3302","line":"}"},
{"lineNum":" 3303","line":""},
{"lineNum":" 3304","line":"test \"indexOf/lastIndexOf/includes/search\" {","class":"lineCov","hits":"1","order":"591","possible_hits":"1",},
{"lineNum":" 3305","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"592","possible_hits":"1",},
{"lineNum":" 3306","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"690","possible_hits":"30",},
{"lineNum":" 3307","line":"    {"},
{"lineNum":" 3308","line":"        const str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,worldhello,world\");","class":"linePartCov","hits":"1","order":"593","possible_hits":"2",},
{"lineNum":" 3309","line":"        try testing.expectEqual(str1.indexOf(\"hello\", 0), 0);","class":"linePartCov","hits":"2","order":"594","possible_hits":"3",},
{"lineNum":" 3310","line":"        try testing.expectEqual(str1.lastIndexOf(\"hello\", 0), 11);","class":"linePartCov","hits":"2","order":"607","possible_hits":"3",},
{"lineNum":" 3311","line":"        try testing.expectEqual(str1.indexOf(\"hello\", 6), 11);","class":"linePartCov","hits":"2","order":"611","possible_hits":"3",},
{"lineNum":" 3312","line":"        try testing.expectEqual(str1.indexOf(\"nothere\", 0), -1);","class":"linePartCov","hits":"2","order":"612","possible_hits":"3",},
{"lineNum":" 3313","line":"        try testing.expectEqual(str1.indexOf(\"\", 0), 0);","class":"linePartCov","hits":"2","order":"613","possible_hits":"3",},
{"lineNum":" 3314","line":"        try testing.expectEqual(str1.indexOf(\"\", 6), 6);","class":"linePartCov","hits":"2","order":"615","possible_hits":"3",},
{"lineNum":" 3315","line":"        try testing.expectEqual(str1.lastIndexOf(\"\", 0), 21);","class":"linePartCov","hits":"2","order":"616","possible_hits":"3",},
{"lineNum":" 3316","line":"        try testing.expectEqual(str1.lastIndexOf(\"\", 6), 21);","class":"linePartCov","hits":"2","order":"618","possible_hits":"3",},
{"lineNum":" 3317","line":"        try testing.expect(str1.includes(\"hello\", 0));","class":"linePartCov","hits":"2","order":"619","possible_hits":"3",},
{"lineNum":" 3318","line":"        try testing.expect(!str1.includes(\"nothere\", 0));","class":"linePartCov","hits":"2","order":"621","possible_hits":"3",},
{"lineNum":" 3319","line":"    }"},
{"lineNum":" 3320","line":"    {"},
{"lineNum":" 3321","line":"        const str2 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,worldhello,world\");","class":"linePartCov","hits":"1","order":"622","possible_hits":"2",},
{"lineNum":" 3322","line":"        try testing.expectEqual(str2.fastIndexOf(arena.allocator(), \"hello\", 0), 0);","class":"linePartCov","hits":"2","order":"623","possible_hits":"3",},
{"lineNum":" 3323","line":"        try testing.expectEqual(str2.fastLastIndexOf(arena.allocator(), \"hello\", 0), 11);","class":"linePartCov","hits":"2","order":"661","possible_hits":"3",},
{"lineNum":" 3324","line":"        try testing.expectEqual(str2.fastIndexOf(arena.allocator(), \"hello\", 6), 11);","class":"linePartCov","hits":"2","order":"667","possible_hits":"3",},
{"lineNum":" 3325","line":"        try testing.expectEqual(str2.fastIndexOf(arena.allocator(), \"nothere\", 0), -1);","class":"linePartCov","hits":"2","order":"668","possible_hits":"3",},
{"lineNum":" 3326","line":"        try testing.expectEqual(str2.fastIndexOf(arena.allocator(), \"\", 0), 0);","class":"linePartCov","hits":"2","order":"669","possible_hits":"3",},
{"lineNum":" 3327","line":"        try testing.expectEqual(str2.fastIndexOf(arena.allocator(), \"\", 6), 6);","class":"linePartCov","hits":"2","order":"671","possible_hits":"3",},
{"lineNum":" 3328","line":"        try testing.expectEqual(str2.fastLastIndexOf(arena.allocator(), \"\", 0), 21);","class":"linePartCov","hits":"2","order":"672","possible_hits":"3",},
{"lineNum":" 3329","line":"        try testing.expectEqual(str2.fastLastIndexOf(arena.allocator(), \"\", 6), 21);","class":"linePartCov","hits":"2","order":"674","possible_hits":"3",},
{"lineNum":" 3330","line":"        try testing.expect(str2.fastIncludes(arena.allocator(), \"hello\", 0));","class":"linePartCov","hits":"2","order":"675","possible_hits":"3",},
{"lineNum":" 3331","line":"        try testing.expect(!str2.fastIncludes(arena.allocator(), \"nothere\", 0));","class":"linePartCov","hits":"2","order":"678","possible_hits":"3",},
{"lineNum":" 3332","line":"        try testing.expectEqual(str2.fastIndexOf(arena.allocator(), \"hello\", 20), -1);","class":"linePartCov","hits":"2","order":"679","possible_hits":"3",},
{"lineNum":" 3333","line":"        try testing.expectEqual(str2.fastIndexOf(arena.allocator(), \"hello\", 24), -1);","class":"linePartCov","hits":"2","order":"681","possible_hits":"3",},
{"lineNum":" 3334","line":"    }"},
{"lineNum":" 3335","line":"    {"},
{"lineNum":" 3336","line":"        // TODO: more kmp test cases"},
{"lineNum":" 3337","line":"        const str2 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"GATCCATATG\");","class":"linePartCov","hits":"1","order":"682","possible_hits":"2",},
{"lineNum":" 3338","line":"        try testing.expectEqual(str2.fastIndexOf(arena.allocator(), \"ATAT\", 0), 5);","class":"linePartCov","hits":"2","order":"683","possible_hits":"3",},
{"lineNum":" 3339","line":"    }"},
{"lineNum":" 3340","line":"    {"},
{"lineNum":" 3341","line":"        const str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"685","possible_hits":"2",},
{"lineNum":" 3342","line":"        try testing.expectEqual(str1.indexOf(\"hello,world\", 0), -1);","class":"linePartCov","hits":"2","order":"686","possible_hits":"3",},
{"lineNum":" 3343","line":"        try testing.expectEqual(str1.search(\"hello,world\", 0), -1);","class":"linePartCov","hits":"2","order":"688","possible_hits":"3",},
{"lineNum":" 3344","line":"    }"},
{"lineNum":" 3345","line":"}"},
{"lineNum":" 3346","line":""},
{"lineNum":" 3347","line":"test \"repeat\" {","class":"lineCov","hits":"1","order":"691","possible_hits":"1",},
{"lineNum":" 3348","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"692","possible_hits":"1",},
{"lineNum":" 3349","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"708","possible_hits":"6",},
{"lineNum":" 3350","line":"    {"},
{"lineNum":" 3351","line":"        const str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"693","possible_hits":"2",},
{"lineNum":" 3352","line":"        const str2 = try str1.repeat(arena.allocator(), 2);","class":"linePartCov","hits":"1","order":"694","possible_hits":"2",},
{"lineNum":" 3353","line":"        try testing.expect(str2.eqlSlice(\"hellohello\"));","class":"linePartCov","hits":"2","order":"704","possible_hits":"3",},
{"lineNum":" 3354","line":"        const str3 = try str1.repeat(arena.allocator(), 0);","class":"linePartCov","hits":"1","order":"705","possible_hits":"2",},
{"lineNum":" 3355","line":"        try testing.expect(str3.eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"707","possible_hits":"3",},
{"lineNum":" 3356","line":"    }"},
{"lineNum":" 3357","line":"}"},
{"lineNum":" 3358","line":""},
{"lineNum":" 3359","line":"test \"slice\" {","class":"lineCov","hits":"1","order":"709","possible_hits":"1",},
{"lineNum":" 3360","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"710","possible_hits":"1",},
{"lineNum":" 3361","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"752","possible_hits":"22",},
{"lineNum":" 3362","line":"    {"},
{"lineNum":" 3363","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,world\");","class":"linePartCov","hits":"1","order":"711","possible_hits":"2",},
{"lineNum":" 3364","line":"        const str2 = try str1.sliceWithStartOnly(arena.allocator(), 0);","class":"linePartCov","hits":"1","order":"712","possible_hits":"2",},
{"lineNum":" 3365","line":"        try testing.expect(str2.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"726","possible_hits":"3",},
{"lineNum":" 3366","line":"        const str3 = try str1.sliceWithStartOnly(arena.allocator(), 6);","class":"linePartCov","hits":"1","order":"727","possible_hits":"2",},
{"lineNum":" 3367","line":"        try testing.expect(str3.eqlSlice(\"world\"));","class":"linePartCov","hits":"2","order":"728","possible_hits":"3",},
{"lineNum":" 3368","line":"        const str4 = try str1.sliceWithStartOnly(arena.allocator(), -5);","class":"linePartCov","hits":"1","order":"729","possible_hits":"2",},
{"lineNum":" 3369","line":"        try testing.expect(str4.eqlSlice(\"world\"));","class":"linePartCov","hits":"2","order":"731","possible_hits":"3",},
{"lineNum":" 3370","line":"        const str5 = try str1.sliceWithStartOnly(arena.allocator(), -11);","class":"linePartCov","hits":"1","order":"732","possible_hits":"2",},
{"lineNum":" 3371","line":"        try testing.expect(str5.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"733","possible_hits":"3",},
{"lineNum":" 3372","line":"        var r = str1.sliceWithStartOnly(arena.allocator(), -15);","class":"lineCov","hits":"1","order":"734","possible_hits":"1",},
{"lineNum":" 3373","line":"        try testing.expectEqual(r, error.IndexOutOfBounds);","class":"linePartCov","hits":"2","order":"736","possible_hits":"3",},
{"lineNum":" 3374","line":"        r = str1.slice(arena.allocator(), 0, -15);","class":"lineCov","hits":"1","order":"737","possible_hits":"1",},
{"lineNum":" 3375","line":"        try testing.expectEqual(r, error.IndexOutOfBounds);","class":"linePartCov","hits":"1","order":"740","possible_hits":"2",},
{"lineNum":" 3376","line":"        const str6 = try str1.slice(arena.allocator(), 15, 7);","class":"linePartCov","hits":"1","order":"741","possible_hits":"2",},
{"lineNum":" 3377","line":"        try testing.expect(str6.eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"743","possible_hits":"3",},
{"lineNum":" 3378","line":"        const str7 = try str1.slice(arena.allocator(), 8, 7);","class":"linePartCov","hits":"1","order":"744","possible_hits":"2",},
{"lineNum":" 3379","line":"        try testing.expect(str7.eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"745","possible_hits":"3",},
{"lineNum":" 3380","line":"        const str8 = try str1.slice(arena.allocator(), 6, 15);","class":"linePartCov","hits":"1","order":"746","possible_hits":"2",},
{"lineNum":" 3381","line":"        try testing.expect(str8.eqlSlice(\"world\"));","class":"linePartCov","hits":"2","order":"747","possible_hits":"3",},
{"lineNum":" 3382","line":"        const str9 = try str1.slice(arena.allocator(), 6, 8);","class":"linePartCov","hits":"1","order":"748","possible_hits":"2",},
{"lineNum":" 3383","line":"        try testing.expect(str9.eqlSlice(\"wo\"));","class":"linePartCov","hits":"2","order":"749","possible_hits":"3",},
{"lineNum":" 3384","line":"        const str10 = try str1.slice(arena.allocator(), 6, -3);","class":"linePartCov","hits":"1","order":"750","possible_hits":"2",},
{"lineNum":" 3385","line":"        try testing.expect(str10.eqlSlice(\"wo\"));","class":"linePartCov","hits":"2","order":"751","possible_hits":"3",},
{"lineNum":" 3386","line":"    }"},
{"lineNum":" 3387","line":"}"},
{"lineNum":" 3388","line":""},
{"lineNum":" 3389","line":"test \"toLowerCase/toUpperCase\" {","class":"lineCov","hits":"1","order":"753","possible_hits":"1",},
{"lineNum":" 3390","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"754","possible_hits":"1",},
{"lineNum":" 3391","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"789","possible_hits":"11",},
{"lineNum":" 3392","line":"    {"},
{"lineNum":" 3393","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hEllO,💯woRld\");","class":"linePartCov","hits":"1","order":"755","possible_hits":"2",},
{"lineNum":" 3394","line":"        const str2 = try str1.toUpperCase(arena.allocator());","class":"linePartCov","hits":"1","order":"756","possible_hits":"2",},
{"lineNum":" 3395","line":"        try testing.expect(str2.eqlSlice(\"HELLO,💯WORLD\"));","class":"linePartCov","hits":"2","order":"768","possible_hits":"3",},
{"lineNum":" 3396","line":"        const str3 = try str1.toLowerCase(arena.allocator());","class":"linePartCov","hits":"1","order":"769","possible_hits":"2",},
{"lineNum":" 3397","line":"        try testing.expect(str3.eqlSlice(\"hello,💯world\"));","class":"linePartCov","hits":"2","order":"781","possible_hits":"3",},
{"lineNum":" 3398","line":"    }"},
{"lineNum":" 3399","line":"    {"},
{"lineNum":" 3400","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"\");","class":"linePartCov","hits":"1","order":"782","possible_hits":"2",},
{"lineNum":" 3401","line":"        var str2 = try str1.toUpperCase(arena.allocator());","class":"linePartCov","hits":"1","order":"783","possible_hits":"2",},
{"lineNum":" 3402","line":"        try testing.expect(str2.isEmpty());","class":"linePartCov","hits":"2","order":"785","possible_hits":"3",},
{"lineNum":" 3403","line":"        str2 = try str1.toLowerCase(arena.allocator());","class":"linePartCov","hits":"1","order":"786","possible_hits":"2",},
{"lineNum":" 3404","line":"        try testing.expect(str2.isEmpty());","class":"linePartCov","hits":"2","order":"788","possible_hits":"3",},
{"lineNum":" 3405","line":"    }"},
{"lineNum":" 3406","line":"}"},
{"lineNum":" 3407","line":""},
{"lineNum":" 3408","line":"test \"split\" {","class":"lineCov","hits":"1","order":"790","possible_hits":"1",},
{"lineNum":" 3409","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"791","possible_hits":"1",},
{"lineNum":" 3410","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"866","possible_hits":"30",},
{"lineNum":" 3411","line":"    {"},
{"lineNum":" 3412","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,💯world\");","class":"linePartCov","hits":"1","order":"792","possible_hits":"2",},
{"lineNum":" 3413","line":"        var strings1 = try str1.split(arena.allocator(), \",\", -1);","class":"linePartCov","hits":"1","order":"793","possible_hits":"2",},
{"lineNum":" 3414","line":"        try testing.expectEqual(strings1.len, 2);","class":"linePartCov","hits":"1","order":"821","possible_hits":"2",},
{"lineNum":" 3415","line":"        try testing.expect(strings1[0].eqlSlice(\"hello\"));","class":"linePartCov","hits":"2","order":"822","possible_hits":"3",},
{"lineNum":" 3416","line":"        try testing.expect(strings1[1].eqlSlice(\"💯world\"));","class":"linePartCov","hits":"2","order":"823","possible_hits":"3",},
{"lineNum":" 3417","line":"        var strings2 = try str1.split(arena.allocator(), \",\", 1);","class":"linePartCov","hits":"1","order":"824","possible_hits":"2",},
{"lineNum":" 3418","line":"        try testing.expectEqual(strings2.len, 1);","class":"linePartCov","hits":"1","order":"827","possible_hits":"2",},
{"lineNum":" 3419","line":"        try testing.expect(strings2[0].eqlSlice(\"hello\"));","class":"linePartCov","hits":"2","order":"828","possible_hits":"3",},
{"lineNum":" 3420","line":"        var str2 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"\\thello 💯 world \");","class":"linePartCov","hits":"1","order":"829","possible_hits":"2",},
{"lineNum":" 3421","line":"        var strings3 = try str2.split(arena.allocator(), \"\", -1);","class":"linePartCov","hits":"1","order":"830","possible_hits":"2",},
{"lineNum":" 3422","line":"        try testing.expectEqual(strings3.len, 15);","class":"linePartCov","hits":"1","order":"846","possible_hits":"2",},
{"lineNum":" 3423","line":"        try testing.expect(strings3[0].eqlSlice(\"\\t\"));","class":"linePartCov","hits":"2","order":"847","possible_hits":"3",},
{"lineNum":" 3424","line":"        try testing.expect(strings3[7].eqlSlice(\"💯\"));","class":"linePartCov","hits":"2","order":"848","possible_hits":"3",},
{"lineNum":" 3425","line":"        try testing.expect(strings3[13].eqlSlice(\"d\"));","class":"linePartCov","hits":"2","order":"849","possible_hits":"3",},
{"lineNum":" 3426","line":"    }"},
{"lineNum":" 3427","line":"    {"},
{"lineNum":" 3428","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"850","possible_hits":"2",},
{"lineNum":" 3429","line":"        var strings = try str1.split(arena.allocator(), \"\", -1);","class":"linePartCov","hits":"1","order":"851","possible_hits":"2",},
{"lineNum":" 3430","line":"        try testing.expectEqual(strings.len, 5);","class":"linePartCov","hits":"1","order":"852","possible_hits":"2",},
{"lineNum":" 3431","line":"        try testing.expect(strings[0].eqlSlice(\"h\"));","class":"linePartCov","hits":"2","order":"853","possible_hits":"3",},
{"lineNum":" 3432","line":"        try testing.expect(strings[1].eqlSlice(\"e\"));","class":"linePartCov","hits":"2","order":"854","possible_hits":"3",},
{"lineNum":" 3433","line":"        try testing.expect(strings[2].eqlSlice(\"l\"));","class":"linePartCov","hits":"2","order":"855","possible_hits":"3",},
{"lineNum":" 3434","line":"        try testing.expect(strings[3].eqlSlice(\"l\"));","class":"linePartCov","hits":"2","order":"856","possible_hits":"3",},
{"lineNum":" 3435","line":"        try testing.expect(strings[4].eqlSlice(\"o\"));","class":"linePartCov","hits":"2","order":"857","possible_hits":"3",},
{"lineNum":" 3436","line":"        strings = try str1.split(arena.allocator(), \"\", 3);","class":"linePartCov","hits":"1","order":"858","possible_hits":"2",},
{"lineNum":" 3437","line":"        try testing.expectEqual(strings.len, 3);","class":"linePartCov","hits":"1","order":"859","possible_hits":"2",},
{"lineNum":" 3438","line":"        try testing.expect(strings[0].eqlSlice(\"h\"));","class":"linePartCov","hits":"2","order":"860","possible_hits":"3",},
{"lineNum":" 3439","line":"        try testing.expect(strings[1].eqlSlice(\"e\"));","class":"linePartCov","hits":"2","order":"861","possible_hits":"3",},
{"lineNum":" 3440","line":"        try testing.expect(strings[2].eqlSlice(\"l\"));","class":"linePartCov","hits":"2","order":"862","possible_hits":"3",},
{"lineNum":" 3441","line":"        strings = try str1.split(arena.allocator(), \"\", 0);","class":"linePartCov","hits":"1","order":"863","possible_hits":"2",},
{"lineNum":" 3442","line":"        try testing.expectEqual(strings.len, 0);","class":"linePartCov","hits":"1","order":"865","possible_hits":"2",},
{"lineNum":" 3443","line":"    }"},
{"lineNum":" 3444","line":"}"},
{"lineNum":" 3445","line":""},
{"lineNum":" 3446","line":"test \"RegexUnmanged\" {","class":"lineCov","hits":"1","order":"867","possible_hits":"1",},
{"lineNum":" 3447","line":"    if (enable_pcre) {"},
{"lineNum":" 3448","line":"        var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"868","possible_hits":"1",},
{"lineNum":" 3449","line":"        defer arena.deinit();","class":"linePartCov","hits":"1","order":"1353","possible_hits":"111",},
{"lineNum":" 3450","line":"        {"},
{"lineNum":" 3451","line":"            const re = RegexUnmanaged.init(arena.allocator(), \"\", 0);","class":"lineCov","hits":"1","order":"869","possible_hits":"1",},
{"lineNum":" 3452","line":"            try testing.expect(_testIsError(RegexUnmanaged, re, JStringError.RegexBadPattern));","class":"linePartCov","hits":"1","order":"875","possible_hits":"2",},
{"lineNum":" 3453","line":"        }"},
{"lineNum":" 3454","line":"        {"},
{"lineNum":" 3455","line":"            const re = try RegexUnmanaged.init(arena.allocator(), \"(hello\", 0);","class":"linePartCov","hits":"1","order":"876","possible_hits":"2",},
{"lineNum":" 3456","line":"            try testing.expect(!re.succeed());","class":"linePartCov","hits":"2","order":"917","possible_hits":"3",},
{"lineNum":" 3457","line":"            try testing.expectEqual(re.errorNumber(), 114);","class":"linePartCov","hits":"2","order":"919","possible_hits":"3",},
{"lineNum":" 3458","line":"            try testing.expectEqual(re.errorOffset(), 6);","class":"linePartCov","hits":"2","order":"921","possible_hits":"3",},
{"lineNum":" 3459","line":"            try testing.expectEqualSlices(u8, re.errorMessage(), \"PCRE2 compilation failed at offset 6: missing closing parenthesis\\n\");","class":"linePartCov","hits":"2","order":"923","possible_hits":"3",},
{"lineNum":" 3460","line":"        }"},
{"lineNum":" 3461","line":"        {"},
{"lineNum":" 3462","line":"            var re = try RegexUnmanaged.init(arena.allocator(), \"hel+o\", 0);","class":"linePartCov","hits":"1","order":"925","possible_hits":"2",},
{"lineNum":" 3463","line":"            try re.match(arena.allocator(), \"hello,hello,world\", 0, true, 0);","class":"linePartCov","hits":"1","order":"934","possible_hits":"2",},
{"lineNum":" 3464","line":"            re.deinit(arena.allocator());","class":"lineCov","hits":"1","order":"992","possible_hits":"1",},
{"lineNum":" 3465","line":"        }"},
{"lineNum":" 3466","line":"        {"},
{"lineNum":" 3467","line":"            var re = try RegexUnmanaged.init(arena.allocator(), \"(?<H>hel+o)\", 0);","class":"linePartCov","hits":"1","order":"1010","possible_hits":"2",},
{"lineNum":" 3468","line":"            try re.matchAll(arena.allocator(), \"hello,hello,world\", 0, 0);","class":"linePartCov","hits":"1","order":"1028","possible_hits":"2",},
{"lineNum":" 3469","line":"            re.deinit(arena.allocator());","class":"lineCov","hits":"1","order":"1140","possible_hits":"1",},
{"lineNum":" 3470","line":"        }"},
{"lineNum":" 3471","line":"        {"},
{"lineNum":" 3472","line":"            var re = try RegexUnmanaged.init(arena.allocator(), \"hel+o\", 0);","class":"linePartCov","hits":"1","order":"1149","possible_hits":"2",},
{"lineNum":" 3473","line":"            try testing.expectEqual(re.errorNumber(), 100);","class":"linePartCov","hits":"2","order":"1150","possible_hits":"3",},
{"lineNum":" 3474","line":"            try re.match(arena.allocator(), \"hello,hello,world\", 0, true, 0);","class":"linePartCov","hits":"1","order":"1151","possible_hits":"2",},
{"lineNum":" 3475","line":"            try testing.expect(re.matchSucceed());","class":"linePartCov","hits":"2","order":"1152","possible_hits":"3",},
{"lineNum":" 3476","line":"            const matched_results = re.getResults();","class":"lineCov","hits":"1","order":"1153","possible_hits":"1",},
{"lineNum":" 3477","line":"            try testing.expect(matched_results != null);","class":"linePartCov","hits":"1","order":"1154","possible_hits":"2",},
{"lineNum":" 3478","line":"            if (matched_results) |mr| {","class":"lineCov","hits":"2","order":"1155","possible_hits":"2",},
{"lineNum":" 3479","line":"                try testing.expect(mr[0].start == 0);","class":"linePartCov","hits":"2","order":"1156","possible_hits":"3",},
{"lineNum":" 3480","line":"                try testing.expect(mr[0].len == 5);","class":"linePartCov","hits":"1","order":"1157","possible_hits":"3",},
{"lineNum":" 3481","line":"            }"},
{"lineNum":" 3482","line":"        }"},
{"lineNum":" 3483","line":"        {"},
{"lineNum":" 3484","line":"            var re = try RegexUnmanaged.init(arena.allocator(), \"hel+o\", 0);","class":"linePartCov","hits":"1","order":"1158","possible_hits":"3",},
{"lineNum":" 3485","line":"            try testing.expectEqual(re.errorNumber(), 100);","class":"linePartCov","hits":"2","order":"1159","possible_hits":"3",},
{"lineNum":" 3486","line":"            try re.matchAll(arena.allocator(), \"hello,hello,world\", 0, 0);","class":"linePartCov","hits":"1","order":"1160","possible_hits":"2",},
{"lineNum":" 3487","line":"            try testing.expect(re.matchSucceed());","class":"linePartCov","hits":"2","order":"1162","possible_hits":"3",},
{"lineNum":" 3488","line":"            const matched_results = re.getResults();","class":"lineCov","hits":"1","order":"1163","possible_hits":"1",},
{"lineNum":" 3489","line":"            try testing.expect(matched_results != null);","class":"linePartCov","hits":"1","order":"1164","possible_hits":"2",},
{"lineNum":" 3490","line":"            if (matched_results) |mr| {","class":"lineCov","hits":"2","order":"1165","possible_hits":"2",},
{"lineNum":" 3491","line":"                try testing.expect(mr.len == 2);","class":"linePartCov","hits":"1","order":"1166","possible_hits":"2",},
{"lineNum":" 3492","line":"                try testing.expect(mr[0].start == 0);","class":"linePartCov","hits":"1","order":"1167","possible_hits":"2",},
{"lineNum":" 3493","line":"                try testing.expect(mr[0].len == 5);","class":"linePartCov","hits":"1","order":"1168","possible_hits":"2",},
{"lineNum":" 3494","line":"                try testing.expect(mr[1].start == 6);","class":"linePartCov","hits":"1","order":"1169","possible_hits":"2",},
{"lineNum":" 3495","line":"                try testing.expect(mr[1].len == 5);","class":"linePartCov","hits":"1","order":"1170","possible_hits":"3",},
{"lineNum":" 3496","line":"            }"},
{"lineNum":" 3497","line":"        }"},
{"lineNum":" 3498","line":"        {"},
{"lineNum":" 3499","line":"            var re = try RegexUnmanaged.init(arena.allocator(), \"(?<h>hel+o)\", 0);","class":"linePartCov","hits":"1","order":"1171","possible_hits":"3",},
{"lineNum":" 3500","line":"            try testing.expectEqual(re.errorNumber(), 100);","class":"linePartCov","hits":"2","order":"1172","possible_hits":"3",},
{"lineNum":" 3501","line":"            try re.matchAll(arena.allocator(), \"hello,hello,world\", 0, 0);","class":"linePartCov","hits":"1","order":"1173","possible_hits":"2",},
{"lineNum":" 3502","line":"            try testing.expect(re.matchSucceed());","class":"linePartCov","hits":"2","order":"1174","possible_hits":"3",},
{"lineNum":" 3503","line":"            const matched_results = re.getResults();","class":"lineCov","hits":"1","order":"1175","possible_hits":"1",},
{"lineNum":" 3504","line":"            try testing.expect(matched_results != null);","class":"linePartCov","hits":"1","order":"1176","possible_hits":"2",},
{"lineNum":" 3505","line":"            if (matched_results) |mr| {","class":"lineCov","hits":"2","order":"1177","possible_hits":"2",},
{"lineNum":" 3506","line":"                try testing.expect(mr.len == 2);","class":"linePartCov","hits":"1","order":"1178","possible_hits":"2",},
{"lineNum":" 3507","line":"                try testing.expect(mr[0].start == 0);","class":"linePartCov","hits":"1","order":"1179","possible_hits":"2",},
{"lineNum":" 3508","line":"                try testing.expect(mr[0].len == 5);","class":"linePartCov","hits":"1","order":"1180","possible_hits":"2",},
{"lineNum":" 3509","line":"                try testing.expect(mr[1].start == 6);","class":"linePartCov","hits":"1","order":"1181","possible_hits":"2",},
{"lineNum":" 3510","line":"                try testing.expect(mr[1].len == 5);","class":"linePartCov","hits":"1","order":"1182","possible_hits":"3",},
{"lineNum":" 3511","line":"            }"},
{"lineNum":" 3512","line":"            const matched_group_results = re.getGroupResults();","class":"lineCov","hits":"1","order":"1183","possible_hits":"1",},
{"lineNum":" 3513","line":"            try testing.expect(matched_group_results != null);","class":"linePartCov","hits":"1","order":"1184","possible_hits":"2",},
{"lineNum":" 3514","line":"            if (matched_group_results) |mgr| {","class":"lineCov","hits":"2","order":"1185","possible_hits":"2",},
{"lineNum":" 3515","line":"                try testing.expect(mgr.len == 2);","class":"linePartCov","hits":"1","order":"1186","possible_hits":"2",},
{"lineNum":" 3516","line":"                try testing.expectEqualSlices(u8, mgr[0].name[0..mgr[0].name_len], \"h\");","class":"linePartCov","hits":"1","order":"1187","possible_hits":"2",},
{"lineNum":" 3517","line":"                try testing.expect(mgr[0].start == 0);","class":"linePartCov","hits":"1","order":"1188","possible_hits":"2",},
{"lineNum":" 3518","line":"                try testing.expect(mgr[0].len == 5);","class":"linePartCov","hits":"1","order":"1189","possible_hits":"2",},
{"lineNum":" 3519","line":"                try testing.expectEqualSlices(u8, mgr[1].name[0..mgr[1].name_len], \"h\");","class":"linePartCov","hits":"1","order":"1190","possible_hits":"2",},
{"lineNum":" 3520","line":"                try testing.expect(mgr[1].start == 6);","class":"linePartCov","hits":"1","order":"1191","possible_hits":"2",},
{"lineNum":" 3521","line":"                try testing.expect(mgr[1].len == 5);","class":"linePartCov","hits":"1","order":"1192","possible_hits":"3",},
{"lineNum":" 3522","line":"            }"},
{"lineNum":" 3523","line":"        }"},
{"lineNum":" 3524","line":"        {"},
{"lineNum":" 3525","line":"            var re = try RegexUnmanaged.init(arena.allocator(), \"(?<h>hel+o)\", 0);","class":"linePartCov","hits":"1","order":"1193","possible_hits":"3",},
{"lineNum":" 3526","line":"            try re.matchAll(arena.allocator(), \"hello,hello,world\", 0, 0);","class":"linePartCov","hits":"1","order":"1194","possible_hits":"2",},
{"lineNum":" 3527","line":"            re.deinit(arena.allocator());","class":"lineCov","hits":"1","order":"1195","possible_hits":"1",},
{"lineNum":" 3528","line":"        }"},
{"lineNum":" 3529","line":"        {"},
{"lineNum":" 3530","line":"            var re = try RegexUnmanaged.init(arena.allocator(), \"(hi,)(?<h>hel+o?)\", 0);","class":"linePartCov","hits":"1","order":"1196","possible_hits":"2",},
{"lineNum":" 3531","line":"            try re.match(arena.allocator(), \"hi,hello\", 0, true, 0);","class":"linePartCov","hits":"1","order":"1197","possible_hits":"2",},
{"lineNum":" 3532","line":"            const match_results = re.getResults();","class":"lineCov","hits":"1","order":"1204","possible_hits":"1",},
{"lineNum":" 3533","line":"            const group_results = re.getGroupResults();","class":"lineCov","hits":"1","order":"1205","possible_hits":"1",},
{"lineNum":" 3534","line":"            _ = group_results;"},
{"lineNum":" 3535","line":"            if (match_results) |mrs| {","class":"lineCov","hits":"2","order":"1206","possible_hits":"2",},
{"lineNum":" 3536","line":"                try testing.expectEqual(mrs[0].start, 0);","class":"linePartCov","hits":"2","order":"1207","possible_hits":"3",},
{"lineNum":" 3537","line":"                try testing.expectEqual(mrs[0].len, 8);","class":"linePartCov","hits":"1","order":"1208","possible_hits":"3",},
{"lineNum":" 3538","line":"            }"},
{"lineNum":" 3539","line":"        }"},
{"lineNum":" 3540","line":"        {"},
{"lineNum":" 3541","line":"            var re = try RegexUnmanaged.init(arena.allocator(), \"(hi,)(?<h>hel+o?)\", 0);","class":"linePartCov","hits":"1","order":"1209","possible_hits":"3",},
{"lineNum":" 3542","line":"            try re.match(arena.allocator(), \"hi,hello\", 0, true, 0);","class":"linePartCov","hits":"1","order":"1210","possible_hits":"2",},
{"lineNum":" 3543","line":"            try re.reset(arena.allocator());","class":"linePartCov","hits":"1","order":"1211","possible_hits":"2",},
{"lineNum":" 3544","line":"            try re.match(arena.allocator(), \"hi,hello\", 0, true, 0);","class":"linePartCov","hits":"1","order":"1216","possible_hits":"2",},
{"lineNum":" 3545","line":"            const match_results = re.getResults();","class":"lineCov","hits":"1","order":"1217","possible_hits":"1",},
{"lineNum":" 3546","line":"            const group_results = re.getGroupResults();","class":"lineCov","hits":"1","order":"1218","possible_hits":"1",},
{"lineNum":" 3547","line":"            _ = group_results;"},
{"lineNum":" 3548","line":"            if (match_results) |mrs| {","class":"lineCov","hits":"2","order":"1219","possible_hits":"2",},
{"lineNum":" 3549","line":"                try testing.expectEqual(mrs[0].start, 0);","class":"linePartCov","hits":"2","order":"1220","possible_hits":"3",},
{"lineNum":" 3550","line":"                try testing.expectEqual(mrs[0].len, 8);","class":"linePartCov","hits":"1","order":"1221","possible_hits":"3",},
{"lineNum":" 3551","line":"            }"},
{"lineNum":" 3552","line":"            var it = re.getGroupResultsIterator(\"hi,hello\");","class":"lineCov","hits":"1","order":"1222","possible_hits":"1",},
{"lineNum":" 3553","line":"            var maybe_r = it.nextResult();","class":"lineCov","hits":"1","order":"1227","possible_hits":"1",},
{"lineNum":" 3554","line":"            try testing.expect(maybe_r != null);","class":"linePartCov","hits":"1","order":"1238","possible_hits":"2",},
{"lineNum":" 3555","line":"            if (maybe_r) |r| {","class":"lineCov","hits":"2","order":"1239","possible_hits":"2",},
{"lineNum":" 3556","line":"                try testing.expect(std.mem.eql(u8, r.name, \"\"));","class":"linePartCov","hits":"1","order":"1240","possible_hits":"2",},
{"lineNum":" 3557","line":"                try testing.expectEqual(r.start, 0);","class":"linePartCov","hits":"1","order":"1241","possible_hits":"3",},
{"lineNum":" 3558","line":"            }"},
{"lineNum":" 3559","line":"            maybe_r = it.nextResult();","class":"lineCov","hits":"1","order":"1242","possible_hits":"1",},
{"lineNum":" 3560","line":"            try testing.expect(maybe_r != null);","class":"linePartCov","hits":"1","order":"1243","possible_hits":"2",},
{"lineNum":" 3561","line":"            if (maybe_r) |r| {","class":"lineCov","hits":"2","order":"1244","possible_hits":"2",},
{"lineNum":" 3562","line":"                try testing.expect(std.mem.eql(u8, r.name, \"h\"));","class":"linePartCov","hits":"1","order":"1245","possible_hits":"2",},
{"lineNum":" 3563","line":"                try testing.expectEqual(r.start, 3);","class":"linePartCov","hits":"1","order":"1246","possible_hits":"3",},
{"lineNum":" 3564","line":"            }"},
{"lineNum":" 3565","line":"        }"},
{"lineNum":" 3566","line":"        {"},
{"lineNum":" 3567","line":"            var re = try RegexUnmanaged.init(arena.allocator(), \"(hi,)(?<h>hel+o?)\", 0);","class":"linePartCov","hits":"1","order":"1247","possible_hits":"3",},
{"lineNum":" 3568","line":"            try re.matchAll(arena.allocator(), \"hi,hello,hi,hello\", 0, 0);","class":"linePartCov","hits":"1","order":"1248","possible_hits":"2",},
{"lineNum":" 3569","line":"            const match_results = re.getResults();","class":"lineCov","hits":"1","order":"1249","possible_hits":"1",},
{"lineNum":" 3570","line":"            const group_results = re.getGroupResults();","class":"lineCov","hits":"1","order":"1250","possible_hits":"1",},
{"lineNum":" 3571","line":"            if (match_results) |mrs| {","class":"lineCov","hits":"2","order":"1251","possible_hits":"2",},
{"lineNum":" 3572","line":"                try testing.expectEqual(mrs[0].start, 0);","class":"linePartCov","hits":"2","order":"1252","possible_hits":"3",},
{"lineNum":" 3573","line":"                try testing.expectEqual(mrs[0].len, 8);","class":"linePartCov","hits":"1","order":"1253","possible_hits":"2",},
{"lineNum":" 3574","line":"                try testing.expectEqual(mrs[1].start, 9);","class":"linePartCov","hits":"1","order":"1254","possible_hits":"2",},
{"lineNum":" 3575","line":"                try testing.expectEqual(mrs[1].len, 8);","class":"linePartCov","hits":"1","order":"1255","possible_hits":"3",},
{"lineNum":" 3576","line":"            }"},
{"lineNum":" 3577","line":"            if (group_results) |grs| {","class":"lineCov","hits":"2","order":"1256","possible_hits":"2",},
{"lineNum":" 3578","line":"                try testing.expectEqual(grs[0].start, 0);","class":"linePartCov","hits":"2","order":"1257","possible_hits":"3",},
{"lineNum":" 3579","line":"                try testing.expectEqual(grs[0].len, 3);","class":"linePartCov","hits":"1","order":"1258","possible_hits":"2",},
{"lineNum":" 3580","line":"                try testing.expectEqual(grs[1].start, 3);","class":"linePartCov","hits":"1","order":"1259","possible_hits":"2",},
{"lineNum":" 3581","line":"                try testing.expectEqual(grs[1].len, 5);","class":"linePartCov","hits":"1","order":"1260","possible_hits":"2",},
{"lineNum":" 3582","line":"                try testing.expectEqual(grs[2].start, 9);","class":"linePartCov","hits":"1","order":"1261","possible_hits":"2",},
{"lineNum":" 3583","line":"                try testing.expectEqual(grs[2].len, 3);","class":"linePartCov","hits":"1","order":"1262","possible_hits":"2",},
{"lineNum":" 3584","line":"                try testing.expectEqual(grs[3].start, 12);","class":"linePartCov","hits":"1","order":"1263","possible_hits":"2",},
{"lineNum":" 3585","line":"                try testing.expectEqual(grs[3].len, 5);","class":"linePartCov","hits":"1","order":"1264","possible_hits":"3",},
{"lineNum":" 3586","line":"            }"},
{"lineNum":" 3587","line":"        }"},
{"lineNum":" 3588","line":"        {"},
{"lineNum":" 3589","line":"            var re = try RegexUnmanaged.init(arena.allocator(), \"(hi,)(?<h>hel+o?)\", 0);","class":"linePartCov","hits":"1","order":"1265","possible_hits":"3",},
{"lineNum":" 3590","line":"            try re.reset(arena.allocator()); // this should works find without error","class":"linePartCov","hits":"1","order":"1266","possible_hits":"2",},
{"lineNum":" 3591","line":"        }"},
{"lineNum":" 3592","line":"        {"},
{"lineNum":" 3593","line":"            var re = try RegexUnmanaged.init(arena.allocator(), \"(hi,)(?<h>hel+o?)\", 0);","class":"linePartCov","hits":"1","order":"1268","possible_hits":"2",},
{"lineNum":" 3594","line":"            try re.match(arena.allocator(), \"hi,hello,hi,hello\", 0, true, 0);","class":"linePartCov","hits":"1","order":"1269","possible_hits":"2",},
{"lineNum":" 3595","line":"            var maybe_r = re.getGroupResultByName(\"h\");","class":"lineCov","hits":"1","order":"1270","possible_hits":"1",},
{"lineNum":" 3596","line":"            try testing.expect(maybe_r != null);","class":"linePartCov","hits":"1","order":"1277","possible_hits":"2",},
{"lineNum":" 3597","line":"            if (maybe_r) |r| {","class":"lineCov","hits":"2","order":"1278","possible_hits":"2",},
{"lineNum":" 3598","line":"                try testing.expectEqual(r.start, 3);","class":"linePartCov","hits":"1","order":"1279","possible_hits":"2",},
{"lineNum":" 3599","line":"                try testing.expectEqual(r.len, 5);","class":"linePartCov","hits":"1","order":"1280","possible_hits":"3",},
{"lineNum":" 3600","line":"            }"},
{"lineNum":" 3601","line":"            maybe_r = re.getGroupResultByName(\"hello\");","class":"lineCov","hits":"1","order":"1281","possible_hits":"1",},
{"lineNum":" 3602","line":"            try testing.expect(maybe_r == null);","class":"linePartCov","hits":"1","order":"1283","possible_hits":"2",},
{"lineNum":" 3603","line":"            var maybe_r2 = re.getGroupResultByIndex(1);","class":"lineCov","hits":"1","order":"1284","possible_hits":"1",},
{"lineNum":" 3604","line":"            try testing.expect(maybe_r2 != null);","class":"linePartCov","hits":"1","order":"1289","possible_hits":"2",},
{"lineNum":" 3605","line":"            if (maybe_r2) |r| {","class":"lineCov","hits":"2","order":"1290","possible_hits":"2",},
{"lineNum":" 3606","line":"                try testing.expectEqual(r.start, 0);","class":"linePartCov","hits":"1","order":"1291","possible_hits":"2",},
{"lineNum":" 3607","line":"                try testing.expectEqual(r.len, 3);","class":"linePartCov","hits":"1","order":"1292","possible_hits":"3",},
{"lineNum":" 3608","line":"            }"},
{"lineNum":" 3609","line":"            maybe_r2 = re.getGroupResultByIndex(100);","class":"lineCov","hits":"1","order":"1293","possible_hits":"1",},
{"lineNum":" 3610","line":"            try re.reset(arena.allocator());","class":"linePartCov","hits":"1","order":"1296","possible_hits":"2",},
{"lineNum":" 3611","line":"            maybe_r = re.getGroupResultByName(\"h\");","class":"lineCov","hits":"1","order":"1297","possible_hits":"1",},
{"lineNum":" 3612","line":"            try testing.expect(maybe_r == null);","class":"linePartCov","hits":"1","order":"1299","possible_hits":"2",},
{"lineNum":" 3613","line":"            maybe_r2 = re.getGroupResultByIndex(1);","class":"lineCov","hits":"1","order":"1300","possible_hits":"1",},
{"lineNum":" 3614","line":"            try testing.expect(maybe_r2 == null);","class":"linePartCov","hits":"1","order":"1302","possible_hits":"2",},
{"lineNum":" 3615","line":"        }"},
{"lineNum":" 3616","line":"        {"},
{"lineNum":" 3617","line":"            var re = try RegexUnmanaged.init(arena.allocator(), \"(hi,)(?<h>hel+o?)\", 0);","class":"linePartCov","hits":"1","order":"1303","possible_hits":"2",},
{"lineNum":" 3618","line":"            try testing.expect(_testIsError(usize, re.getNextOffset(\"hello\"), JStringError.RegexFetchBeforeMatch));","class":"linePartCov","hits":"1","order":"1304","possible_hits":"2",},
{"lineNum":" 3619","line":"            try re.match(arena.allocator(), \"hi,hello,hi,hello\", 0, true, 0);","class":"linePartCov","hits":"1","order":"1308","possible_hits":"2",},
{"lineNum":" 3620","line":"            try testing.expectEqual(re.getNextOffset(\"hi,hello,hi,hello\"), 8);","class":"linePartCov","hits":"1","order":"1309","possible_hits":"2",},
{"lineNum":" 3621","line":"            try re.reset(arena.allocator());","class":"linePartCov","hits":"1","order":"1313","possible_hits":"2",},
{"lineNum":" 3622","line":"            try re.match(arena.allocator(), \"notsomething\", 0, true, 0);","class":"linePartCov","hits":"1","order":"1314","possible_hits":"2",},
{"lineNum":" 3623","line":"            try testing.expectEqual(re.getNextOffset(\"notsomething\"), 0);","class":"linePartCov","hits":"1","order":"1315","possible_hits":"2",},
{"lineNum":" 3624","line":"        }"},
{"lineNum":" 3625","line":"        {"},
{"lineNum":" 3626","line":"            // example mentioned at: https://www.pcre.org/current/doc/html/pcre2pattern.html about"},
{"lineNum":" 3627","line":"            // PCRE2_EXTRA_ALLOW_LOOKAROUND_BSK"},
{"lineNum":" 3628","line":"            var re = try RegexUnmanaged.initWithExtraRegexOptions(arena.allocator(), \"(?<=\\\\Kfoo)bar\", 0, pcre.PCRE2_EXTRA_ALLOW_LOOKAROUND_BSK);","class":"linePartCov","hits":"1","order":"1317","possible_hits":"2",},
{"lineNum":" 3629","line":"            try re.match(arena.allocator(), \"foobar\", 3, true, 0);","class":"linePartCov","hits":"1","order":"1329","possible_hits":"2",},
{"lineNum":" 3630","line":"            const offset = try re.getNextOffset(\"foobar\");","class":"linePartCov","hits":"1","order":"1330","possible_hits":"2",},
{"lineNum":" 3631","line":"            try testing.expectEqual(offset, 6);","class":"linePartCov","hits":"1","order":"1331","possible_hits":"2",},
{"lineNum":" 3632","line":"            re.deinit(arena.allocator());","class":"lineCov","hits":"1","order":"1332","possible_hits":"1",},
{"lineNum":" 3633","line":"        }"},
{"lineNum":" 3634","line":"        {"},
{"lineNum":" 3635","line":"            // this example will trigger the tricky case mentioned in pcre2 demo on get next offset."},
{"lineNum":" 3636","line":"            // check https://pcre.org/current/doc/html/pcre2demo.html, line around comment \"If the previous match was"},
{"lineNum":" 3637","line":"            // not an empty string, there is one tricky case to consider.\""},
{"lineNum":" 3638","line":"            var re = try RegexUnmanaged.initWithExtraRegexOptions(arena.allocator(), \"(?<=\\\\Kfoo)\", pcre.PCRE2_UTF, pcre.PCRE2_EXTRA_ALLOW_LOOKAROUND_BSK);","class":"linePartCov","hits":"1","order":"1335","possible_hits":"2",},
{"lineNum":" 3639","line":"            try re.match(arena.allocator(), \"foobar\", 3, true, 0);","class":"linePartCov","hits":"1","order":"1336","possible_hits":"2",},
{"lineNum":" 3640","line":"            var offset = try re.getNextOffset(\"foobar\");","class":"linePartCov","hits":"1","order":"1344","possible_hits":"2",},
{"lineNum":" 3641","line":"            try testing.expectEqual(offset, 4);","class":"linePartCov","hits":"1","order":"1345","possible_hits":"2",},
{"lineNum":" 3642","line":"            try re.reset(arena.allocator());","class":"linePartCov","hits":"1","order":"1346","possible_hits":"2",},
{"lineNum":" 3643","line":"            try re.match(arena.allocator(), \"foo\", 3, true, 0);","class":"linePartCov","hits":"1","order":"1347","possible_hits":"2",},
{"lineNum":" 3644","line":"            offset = try re.getNextOffset(\"foo\");","class":"linePartCov","hits":"1","order":"1350","possible_hits":"2",},
{"lineNum":" 3645","line":"            try testing.expectEqual(offset, 4);","class":"linePartCov","hits":"1","order":"1351","possible_hits":"2",},
{"lineNum":" 3646","line":"            re.deinit(arena.allocator());","class":"lineCov","hits":"1","order":"1352","possible_hits":"1",},
{"lineNum":" 3647","line":"        }"},
{"lineNum":" 3648","line":"    }"},
{"lineNum":" 3649","line":"}"},
{"lineNum":" 3650","line":""},
{"lineNum":" 3651","line":"test \"match/matchAll\" {","class":"lineCov","hits":"1","order":"1354","possible_hits":"1",},
{"lineNum":" 3652","line":"    if (enable_pcre) {"},
{"lineNum":" 3653","line":"        var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"1355","possible_hits":"1",},
{"lineNum":" 3654","line":"        defer arena.deinit();","class":"linePartCov","hits":"1","order":"1400","possible_hits":"17",},
{"lineNum":" 3655","line":"        {"},
{"lineNum":" 3656","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"1356","possible_hits":"2",},
{"lineNum":" 3657","line":"            var re = try str1.match(arena.allocator(), \"hel+o\", 0, true, RegexUnmanaged.DefaultRegexOptions, RegexUnmanaged.DefaultMatchOptions);","class":"linePartCov","hits":"1","order":"1357","possible_hits":"2",},
{"lineNum":" 3658","line":"            try testing.expect(re.succeed());","class":"linePartCov","hits":"2","order":"1361","possible_hits":"3",},
{"lineNum":" 3659","line":"            var it = re.getResultsIterator(str1.str_slice);","class":"lineCov","hits":"1","order":"1362","possible_hits":"1",},
{"lineNum":" 3660","line":"            const maybe_result = it.nextResult();","class":"lineCov","hits":"1","order":"1367","possible_hits":"1",},
{"lineNum":" 3661","line":"            if (maybe_result) |r| {","class":"lineCov","hits":"2","order":"1376","possible_hits":"2",},
{"lineNum":" 3662","line":"                try testing.expectEqual(r.start, 0);","class":"linePartCov","hits":"1","order":"1377","possible_hits":"2",},
{"lineNum":" 3663","line":"                try testing.expectEqual(r.len, 5);","class":"linePartCov","hits":"1","order":"1378","possible_hits":"2",},
{"lineNum":" 3664","line":"                try testing.expectEqualSlices(u8, r.value, \"hello\");","class":"linePartCov","hits":"1","order":"1379","possible_hits":"3",},
{"lineNum":" 3665","line":"            }"},
{"lineNum":" 3666","line":"        }"},
{"lineNum":" 3667","line":"        {"},
{"lineNum":" 3668","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"1380","possible_hits":"3",},
{"lineNum":" 3669","line":"            var re = try str1.matchAll(arena.allocator(), \"hel+o\", 0, RegexUnmanaged.DefaultRegexOptions, RegexUnmanaged.DefaultMatchOptions);","class":"linePartCov","hits":"1","order":"1381","possible_hits":"2",},
{"lineNum":" 3670","line":"            try testing.expect(re.succeed());","class":"linePartCov","hits":"2","order":"1385","possible_hits":"3",},
{"lineNum":" 3671","line":"            var it = re.getResultsIterator(str1.str_slice);","class":"lineCov","hits":"1","order":"1386","possible_hits":"1",},
{"lineNum":" 3672","line":"            const maybe_result = it.nextResult();","class":"lineCov","hits":"1","order":"1387","possible_hits":"1",},
{"lineNum":" 3673","line":"            if (maybe_result) |r| {","class":"lineCov","hits":"2","order":"1388","possible_hits":"2",},
{"lineNum":" 3674","line":"                try testing.expectEqual(r.start, 0);","class":"linePartCov","hits":"1","order":"1389","possible_hits":"2",},
{"lineNum":" 3675","line":"                try testing.expectEqual(r.len, 5);","class":"linePartCov","hits":"1","order":"1390","possible_hits":"2",},
{"lineNum":" 3676","line":"                try testing.expectEqualSlices(u8, r.value, \"hello\");","class":"linePartCov","hits":"1","order":"1391","possible_hits":"3",},
{"lineNum":" 3677","line":"            }"},
{"lineNum":" 3678","line":"            const maybe_result2 = it.nextResult();","class":"lineCov","hits":"1","order":"1392","possible_hits":"1",},
{"lineNum":" 3679","line":"            if (maybe_result2) |r| {","class":"lineCov","hits":"2","order":"1393","possible_hits":"2",},
{"lineNum":" 3680","line":"                try testing.expectEqual(r.start, 6);","class":"linePartCov","hits":"1","order":"1394","possible_hits":"2",},
{"lineNum":" 3681","line":"                try testing.expectEqual(r.len, 5);","class":"linePartCov","hits":"1","order":"1395","possible_hits":"2",},
{"lineNum":" 3682","line":"                try testing.expectEqualSlices(u8, r.value, \"hello\");","class":"linePartCov","hits":"1","order":"1396","possible_hits":"3",},
{"lineNum":" 3683","line":"            }"},
{"lineNum":" 3684","line":"            const maybe_result3 = it.nextResult();","class":"lineCov","hits":"1","order":"1397","possible_hits":"1",},
{"lineNum":" 3685","line":"            try testing.expectEqual(maybe_result3, null);","class":"linePartCov","hits":"1","order":"1399","possible_hits":"2",},
{"lineNum":" 3686","line":"        }"},
{"lineNum":" 3687","line":"    }"},
{"lineNum":" 3688","line":"}"},
{"lineNum":" 3689","line":""},
{"lineNum":" 3690","line":"test \"searchByRegex\" {","class":"lineCov","hits":"1","order":"1401","possible_hits":"1",},
{"lineNum":" 3691","line":"    if (enable_pcre) {"},
{"lineNum":" 3692","line":"        var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"1402","possible_hits":"1",},
{"lineNum":" 3693","line":"        defer arena.deinit();","class":"linePartCov","hits":"1","order":"1427","possible_hits":"13",},
{"lineNum":" 3694","line":"        {"},
{"lineNum":" 3695","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"1403","possible_hits":"2",},
{"lineNum":" 3696","line":"            var r = try str1.searchByRegex(arena.allocator(), \"hel+o\", 0);","class":"linePartCov","hits":"1","order":"1404","possible_hits":"2",},
{"lineNum":" 3697","line":"            try testing.expectEqual(r, 0);","class":"linePartCov","hits":"1","order":"1414","possible_hits":"2",},
{"lineNum":" 3698","line":"            r = try str1.searchByRegex(arena.allocator(), \"hel+o\", 3);","class":"linePartCov","hits":"1","order":"1415","possible_hits":"2",},
{"lineNum":" 3699","line":"            try testing.expectEqual(r, 6);","class":"linePartCov","hits":"1","order":"1416","possible_hits":"2",},
{"lineNum":" 3700","line":"            r = try str1.searchByRegex(arena.allocator(), \"hel+o\", 8);","class":"linePartCov","hits":"1","order":"1417","possible_hits":"2",},
{"lineNum":" 3701","line":"            try testing.expectEqual(r, -1);","class":"linePartCov","hits":"1","order":"1419","possible_hits":"2",},
{"lineNum":" 3702","line":"        }"},
{"lineNum":" 3703","line":"        {"},
{"lineNum":" 3704","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"1420","possible_hits":"2",},
{"lineNum":" 3705","line":"            const r = try str1.searchByRegex(arena.allocator(), \"nonexist\", 0);","class":"linePartCov","hits":"1","order":"1421","possible_hits":"2",},
{"lineNum":" 3706","line":"            try testing.expectEqual(r, -1);","class":"linePartCov","hits":"1","order":"1422","possible_hits":"2",},
{"lineNum":" 3707","line":"        }"},
{"lineNum":" 3708","line":"        {"},
{"lineNum":" 3709","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"1423","possible_hits":"2",},
{"lineNum":" 3710","line":"            try testing.expect(_testIsError(isize, str1.searchByRegex(arena.allocator(), \"he(?<L>l+\", 0), JStringError.RegexMatchFailed));","class":"linePartCov","hits":"1","order":"1424","possible_hits":"2",},
{"lineNum":" 3711","line":"        }"},
{"lineNum":" 3712","line":"    }"},
{"lineNum":" 3713","line":"}"},
{"lineNum":" 3714","line":""},
{"lineNum":" 3715","line":"test \"splitByRegex\" {","class":"lineCov","hits":"1","order":"1428","possible_hits":"1",},
{"lineNum":" 3716","line":"    if (enable_pcre) {"},
{"lineNum":" 3717","line":"        var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"1429","possible_hits":"1",},
{"lineNum":" 3718","line":"        defer arena.deinit();","class":"linePartCov","hits":"1","order":"1570","possible_hits":"54",},
{"lineNum":" 3719","line":"        {"},
{"lineNum":" 3720","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"1430","possible_hits":"2",},
{"lineNum":" 3721","line":"            var results = try str1.splitByRegex(arena.allocator(), \"l+\", 0, 0);","class":"linePartCov","hits":"1","order":"1431","possible_hits":"2",},
{"lineNum":" 3722","line":"            try testing.expectEqual(results.len, 1);","class":"linePartCov","hits":"1","order":"1441","possible_hits":"2",},
{"lineNum":" 3723","line":"            try testing.expect(results[0].eqlSlice(\"hello,hello,world\"));","class":"linePartCov","hits":"2","order":"1442","possible_hits":"3",},
{"lineNum":" 3724","line":"            results = try str1.splitByRegex(arena.allocator(), \"l+\", 0, -1);","class":"linePartCov","hits":"1","order":"1443","possible_hits":"2",},
{"lineNum":" 3725","line":"            try testing.expectEqual(results.len, 4);","class":"linePartCov","hits":"1","order":"1500","possible_hits":"2",},
{"lineNum":" 3726","line":"            try testing.expect(results[0].eqlSlice(\"he\"));","class":"linePartCov","hits":"2","order":"1501","possible_hits":"3",},
{"lineNum":" 3727","line":"            try testing.expect(results[1].eqlSlice(\"o,he\"));","class":"linePartCov","hits":"2","order":"1502","possible_hits":"3",},
{"lineNum":" 3728","line":"            try testing.expect(results[2].eqlSlice(\"o,wor\"));","class":"linePartCov","hits":"2","order":"1503","possible_hits":"3",},
{"lineNum":" 3729","line":"            try testing.expect(results[3].eqlSlice(\"d\"));","class":"linePartCov","hits":"2","order":"1504","possible_hits":"3",},
{"lineNum":" 3730","line":"            results = try str1.splitByRegex(arena.allocator(), \"he\", 0, -1);","class":"linePartCov","hits":"1","order":"1505","possible_hits":"2",},
{"lineNum":" 3731","line":"            try testing.expectEqual(results.len, 3);","class":"linePartCov","hits":"1","order":"1508","possible_hits":"2",},
{"lineNum":" 3732","line":"            try testing.expect(results[0].eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1509","possible_hits":"3",},
{"lineNum":" 3733","line":"            try testing.expect(results[1].eqlSlice(\"llo,\"));","class":"linePartCov","hits":"2","order":"1510","possible_hits":"3",},
{"lineNum":" 3734","line":"            try testing.expect(results[2].eqlSlice(\"llo,world\"));","class":"linePartCov","hits":"2","order":"1511","possible_hits":"3",},
{"lineNum":" 3735","line":"            results = try str1.splitByRegex(arena.allocator(), \"lo|d\", 0, -1);","class":"linePartCov","hits":"1","order":"1512","possible_hits":"2",},
{"lineNum":" 3736","line":"            try testing.expectEqual(results.len, 3);","class":"linePartCov","hits":"1","order":"1515","possible_hits":"2",},
{"lineNum":" 3737","line":"            try testing.expect(results[0].eqlSlice(\"hel\"));","class":"linePartCov","hits":"2","order":"1516","possible_hits":"3",},
{"lineNum":" 3738","line":"            try testing.expect(results[1].eqlSlice(\",hel\"));","class":"linePartCov","hits":"2","order":"1517","possible_hits":"3",},
{"lineNum":" 3739","line":"            try testing.expect(results[2].eqlSlice(\",worl\"));","class":"linePartCov","hits":"2","order":"1518","possible_hits":"3",},
{"lineNum":" 3740","line":"        }"},
{"lineNum":" 3741","line":"        {"},
{"lineNum":" 3742","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"1519","possible_hits":"2",},
{"lineNum":" 3743","line":"            var results = try str1.splitByRegex(arena.allocator(), \"(?<L>l+)\", 0, -1);","class":"linePartCov","hits":"1","order":"1520","possible_hits":"2",},
{"lineNum":" 3744","line":"            try testing.expectEqual(results.len, 4);","class":"linePartCov","hits":"1","order":"1530","possible_hits":"2",},
{"lineNum":" 3745","line":"            try testing.expect(results[0].eqlSlice(\"he\"));","class":"linePartCov","hits":"2","order":"1531","possible_hits":"3",},
{"lineNum":" 3746","line":"            try testing.expect(results[1].eqlSlice(\"o,he\"));","class":"linePartCov","hits":"2","order":"1532","possible_hits":"3",},
{"lineNum":" 3747","line":"            try testing.expect(results[2].eqlSlice(\"o,wor\"));","class":"linePartCov","hits":"2","order":"1533","possible_hits":"3",},
{"lineNum":" 3748","line":"            try testing.expect(results[3].eqlSlice(\"d\"));","class":"linePartCov","hits":"2","order":"1534","possible_hits":"3",},
{"lineNum":" 3749","line":"        }"},
{"lineNum":" 3750","line":"        {"},
{"lineNum":" 3751","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"1535","possible_hits":"2",},
{"lineNum":" 3752","line":"            const r = str1.splitByRegex(arena.allocator(), \"he(?<L>l+)\", 0, -1);","class":"lineCov","hits":"1","order":"1536","possible_hits":"1",},
{"lineNum":" 3753","line":"            try testing.expect(_testIsError([]JStringUnmanaged, r, JStringError.RegexMatchOverlapped));","class":"linePartCov","hits":"1","order":"1539","possible_hits":"2",},
{"lineNum":" 3754","line":"        }"},
{"lineNum":" 3755","line":"        {"},
{"lineNum":" 3756","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"1540","possible_hits":"2",},
{"lineNum":" 3757","line":"            // stupid way of splitting every char into string, but should work"},
{"lineNum":" 3758","line":"            const results = try str1.splitByRegex(arena.allocator(), \".\", 0, -1);","class":"linePartCov","hits":"1","order":"1541","possible_hits":"2",},
{"lineNum":" 3759","line":"            try testing.expectEqual(results.len, 6);","class":"linePartCov","hits":"1","order":"1543","possible_hits":"2",},
{"lineNum":" 3760","line":"            try testing.expect(results[0].eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1544","possible_hits":"3",},
{"lineNum":" 3761","line":"            try testing.expect(results[1].eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1545","possible_hits":"3",},
{"lineNum":" 3762","line":"            try testing.expect(results[2].eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1546","possible_hits":"3",},
{"lineNum":" 3763","line":"            try testing.expect(results[3].eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1547","possible_hits":"3",},
{"lineNum":" 3764","line":"            try testing.expect(results[4].eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1548","possible_hits":"3",},
{"lineNum":" 3765","line":"            try testing.expect(results[5].eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1549","possible_hits":"3",},
{"lineNum":" 3766","line":"        }"},
{"lineNum":" 3767","line":"        {"},
{"lineNum":" 3768","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hhoh\");","class":"linePartCov","hits":"1","order":"1550","possible_hits":"2",},
{"lineNum":" 3769","line":"            var results = try str1.splitByRegex(arena.allocator(), \"h\", 0, -1);","class":"linePartCov","hits":"1","order":"1551","possible_hits":"2",},
{"lineNum":" 3770","line":"            try testing.expectEqual(results.len, 4);","class":"linePartCov","hits":"1","order":"1552","possible_hits":"2",},
{"lineNum":" 3771","line":"            try testing.expect(results[0].eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1553","possible_hits":"3",},
{"lineNum":" 3772","line":"            try testing.expect(results[1].eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1554","possible_hits":"3",},
{"lineNum":" 3773","line":"            try testing.expect(results[2].eqlSlice(\"o\"));","class":"linePartCov","hits":"2","order":"1555","possible_hits":"3",},
{"lineNum":" 3774","line":"            try testing.expect(results[3].eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1556","possible_hits":"3",},
{"lineNum":" 3775","line":"            results = try str1.splitByRegex(arena.allocator(), \"h\", 0, 2);","class":"linePartCov","hits":"1","order":"1557","possible_hits":"2",},
{"lineNum":" 3776","line":"            try testing.expectEqual(results.len, 2);","class":"linePartCov","hits":"1","order":"1559","possible_hits":"2",},
{"lineNum":" 3777","line":"            try testing.expect(results[0].eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1560","possible_hits":"3",},
{"lineNum":" 3778","line":"            try testing.expect(results[1].eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1561","possible_hits":"3",},
{"lineNum":" 3779","line":"        }"},
{"lineNum":" 3780","line":"        {"},
{"lineNum":" 3781","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"1562","possible_hits":"2",},
{"lineNum":" 3782","line":"            const results = str1.splitByRegex(arena.allocator(), \"\", 0, -1);","class":"lineCov","hits":"1","order":"1563","possible_hits":"1",},
{"lineNum":" 3783","line":"            try testing.expect(_testIsError([]JStringUnmanaged, results, JStringError.RegexBadPattern));","class":"linePartCov","hits":"1","order":"1564","possible_hits":"2",},
{"lineNum":" 3784","line":"        }"},
{"lineNum":" 3785","line":"        {"},
{"lineNum":" 3786","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"1565","possible_hits":"2",},
{"lineNum":" 3787","line":"            const results = str1.splitByRegex(arena.allocator(), \"noexist\", 0, -1);","class":"lineCov","hits":"1","order":"1566","possible_hits":"1",},
{"lineNum":" 3788","line":"            try testing.expect(_testIsError([]JStringUnmanaged, results, JStringError.RegexMatchFailed));","class":"linePartCov","hits":"1","order":"1569","possible_hits":"2",},
{"lineNum":" 3789","line":"        }"},
{"lineNum":" 3790","line":"    }"},
{"lineNum":" 3791","line":"}"},
{"lineNum":" 3792","line":""},
{"lineNum":" 3793","line":"test \"replace/replaceAll/replaceByRegex/replaceAllByRegex\" {","class":"lineCov","hits":"1","order":"1571","possible_hits":"1",},
{"lineNum":" 3794","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"1572","possible_hits":"1",},
{"lineNum":" 3795","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"1685","possible_hits":"26",},
{"lineNum":" 3796","line":"    {"},
{"lineNum":" 3797","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"1573","possible_hits":"2",},
{"lineNum":" 3798","line":"        var str2 = try str1.replace(arena.allocator(), \"world\", \"jstring\");","class":"linePartCov","hits":"1","order":"1574","possible_hits":"2",},
{"lineNum":" 3799","line":"        try testing.expect(str2.eqlSlice(\"hello,hello,jstring\"));","class":"linePartCov","hits":"2","order":"1616","possible_hits":"3",},
{"lineNum":" 3800","line":"        str2 = try str1.replaceAll(arena.allocator(), \"hello\", \"jstring\");","class":"linePartCov","hits":"1","order":"1617","possible_hits":"2",},
{"lineNum":" 3801","line":"        try testing.expect(str2.eqlSlice(\"jstring,jstring,world\"));","class":"linePartCov","hits":"2","order":"1628","possible_hits":"3",},
{"lineNum":" 3802","line":"        str2 = try str1.replace(arena.allocator(), \"noexist\", \"jstring\");","class":"linePartCov","hits":"1","order":"1629","possible_hits":"2",},
{"lineNum":" 3803","line":"        try testing.expect(str2.eqlSlice(\"hello,hello,world\"));","class":"linePartCov","hits":"2","order":"1631","possible_hits":"3",},
{"lineNum":" 3804","line":"    }"},
{"lineNum":" 3805","line":"    if (enable_pcre) {"},
{"lineNum":" 3806","line":"        {"},
{"lineNum":" 3807","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"1632","possible_hits":"2",},
{"lineNum":" 3808","line":"            var str2 = try str1.replaceByRegex(arena.allocator(), \"wor.d\", \"jstring\");","class":"linePartCov","hits":"1","order":"1633","possible_hits":"2",},
{"lineNum":" 3809","line":"            try testing.expect(str2.eqlSlice(\"hello,hello,jstring\"));","class":"linePartCov","hits":"2","order":"1659","possible_hits":"3",},
{"lineNum":" 3810","line":"            str2 = try str1.replaceAllByRegex(arena.allocator(), \"hel+o\", \"jstring\");","class":"linePartCov","hits":"1","order":"1660","possible_hits":"2",},
{"lineNum":" 3811","line":"            try testing.expect(str2.eqlSlice(\"jstring,jstring,world\"));","class":"linePartCov","hits":"2","order":"1665","possible_hits":"3",},
{"lineNum":" 3812","line":"            const r = str1.replaceByRegex(arena.allocator(), \"noexiststring\", \"jstring\");","class":"lineCov","hits":"1","order":"1666","possible_hits":"1",},
{"lineNum":" 3813","line":"            try testing.expect(_testIsError(JStringUnmanaged, r, JStringError.RegexMatchFailed));","class":"linePartCov","hits":"1","order":"1668","possible_hits":"2",},
{"lineNum":" 3814","line":"        }"},
{"lineNum":" 3815","line":"        {"},
{"lineNum":" 3816","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"1669","possible_hits":"2",},
{"lineNum":" 3817","line":"            const str2 = try str1.replaceAllByRegex(arena.allocator(), \"(?<L>l+)\", \"L\");","class":"linePartCov","hits":"1","order":"1670","possible_hits":"2",},
{"lineNum":" 3818","line":"            try testing.expect(str2.eqlSlice(\"heLo,heLo,worLd\"));","class":"linePartCov","hits":"2","order":"1671","possible_hits":"3",},
{"lineNum":" 3819","line":"        }"},
{"lineNum":" 3820","line":"        {"},
{"lineNum":" 3821","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"1672","possible_hits":"2",},
{"lineNum":" 3822","line":"            const r = str1.replaceAllByRegex(arena.allocator(), \"he(?<L>l+)\", \"\");","class":"lineCov","hits":"1","order":"1673","possible_hits":"1",},
{"lineNum":" 3823","line":"            try testing.expect(_testIsError(JStringUnmanaged, r, JStringError.RegexMatchOverlapped));","class":"linePartCov","hits":"1","order":"1674","possible_hits":"2",},
{"lineNum":" 3824","line":"        }"},
{"lineNum":" 3825","line":"        {"},
{"lineNum":" 3826","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"1675","possible_hits":"2",},
{"lineNum":" 3827","line":"            const r = str1.replaceAllByRegex(arena.allocator(), \"\", \"L\");","class":"lineCov","hits":"1","order":"1676","possible_hits":"1",},
{"lineNum":" 3828","line":"            try testing.expect(_testIsError(JStringUnmanaged, r, JStringError.RegexBadPattern));","class":"linePartCov","hits":"1","order":"1677","possible_hits":"2",},
{"lineNum":" 3829","line":"            try testing.expect(_testIsError(JStringUnmanaged, r, JStringError.RegexBadPattern));","class":"linePartCov","hits":"1","order":"1678","possible_hits":"2",},
{"lineNum":" 3830","line":"        }"},
{"lineNum":" 3831","line":"        {"},
{"lineNum":" 3832","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"1679","possible_hits":"2",},
{"lineNum":" 3833","line":"            const r = str1.replaceByRegex(arena.allocator(), \"helloworld\", \"\");","class":"lineCov","hits":"1","order":"1680","possible_hits":"1",},
{"lineNum":" 3834","line":"            try testing.expect(_testIsError(JStringUnmanaged, r, JStringError.RegexMatchFailed));","class":"linePartCov","hits":"1","order":"1681","possible_hits":"2",},
{"lineNum":" 3835","line":"        }"},
{"lineNum":" 3836","line":"        {"},
{"lineNum":" 3837","line":"            var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"1682","possible_hits":"2",},
{"lineNum":" 3838","line":"            try testing.expect(_testIsError(JStringUnmanaged, str1.replaceAllByRegex(arena.allocator(), \"he(?<L>l+\", \"\"), JStringError.RegexMatchFailed));","class":"linePartCov","hits":"1","order":"1683","possible_hits":"2",},
{"lineNum":" 3839","line":"        }"},
{"lineNum":" 3840","line":"    }"},
{"lineNum":" 3841","line":"}"},
{"lineNum":" 3842","line":""},
{"lineNum":" 3843","line":"test \"freeJStringArray/freeJStringUnmanagedArray\" {","class":"lineCov","hits":"1","order":"1686","possible_hits":"1",},
{"lineNum":" 3844","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"1687","possible_hits":"1",},
{"lineNum":" 3845","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"1712","possible_hits":"5",},
{"lineNum":" 3846","line":"    {"},
{"lineNum":" 3847","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello\\nhello\\nhello\\n\");","class":"linePartCov","hits":"1","order":"1688","possible_hits":"2",},
{"lineNum":" 3848","line":"        const strs = try str1.split(arena.allocator(), \"\\n\", -1);","class":"linePartCov","hits":"1","order":"1689","possible_hits":"2",},
{"lineNum":" 3849","line":"        freeJStringUnmanagedArray(arena.allocator(), strs);","class":"lineCov","hits":"1","order":"1690","possible_hits":"1",},
{"lineNum":" 3850","line":"    }"},
{"lineNum":" 3851","line":"    {"},
{"lineNum":" 3852","line":"        var str1 = try JString.newFromSlice(arena.allocator(), \"hello\\nhello\\nhello\\n\");","class":"linePartCov","hits":"1","order":"1695","possible_hits":"2",},
{"lineNum":" 3853","line":"        const strs = try str1.split(\"\\n\", -1);","class":"linePartCov","hits":"1","order":"1699","possible_hits":"2",},
{"lineNum":" 3854","line":"        freeJStringArray(strs);","class":"lineCov","hits":"1","order":"1705","possible_hits":"1",},
{"lineNum":" 3855","line":"    }"},
{"lineNum":" 3856","line":"}"},
{"lineNum":" 3857","line":""},
{"lineNum":" 3858","line":"test \"isWellFormed\" {","class":"lineCov","hits":"1","order":"1713","possible_hits":"1",},
{"lineNum":" 3859","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"1714","possible_hits":"1",},
{"lineNum":" 3860","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"1724","possible_hits":"5",},
{"lineNum":" 3861","line":"    const str: []const u8 = \"hello,💯\";","class":"lineCov","hits":"1","order":"1715","possible_hits":"1",},
{"lineNum":" 3862","line":"    var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), str[0 .. str.len - 1]);","class":"linePartCov","hits":"1","order":"1716","possible_hits":"2",},
{"lineNum":" 3863","line":"    try testing.expect(!str1.isWellFormed());","class":"linePartCov","hits":"1","order":"1717","possible_hits":"2",},
{"lineNum":" 3864","line":"    str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), str);","class":"linePartCov","hits":"1","order":"1721","possible_hits":"2",},
{"lineNum":" 3865","line":"    try testing.expect(str1.isWellFormed());","class":"linePartCov","hits":"1","order":"1722","possible_hits":"2",},
{"lineNum":" 3866","line":"}"},
{"lineNum":" 3867","line":""},
{"lineNum":" 3868","line":"test \"valueOf\" {","class":"lineCov","hits":"1","order":"1725","possible_hits":"1",},
{"lineNum":" 3869","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"1726","possible_hits":"1",},
{"lineNum":" 3870","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"1731","possible_hits":"3",},
{"lineNum":" 3871","line":"    const str: []const u8 = \"hello,💯\";","class":"lineCov","hits":"1","order":"1727","possible_hits":"1",},
{"lineNum":" 3872","line":"    const str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), str);","class":"linePartCov","hits":"1","order":"1728","possible_hits":"2",},
{"lineNum":" 3873","line":"    try testing.expect(std.mem.eql(u8, str1.valueOf(), \"hello,💯\"));","class":"linePartCov","hits":"2","order":"1729","possible_hits":"3",},
{"lineNum":" 3874","line":"}"},
{"lineNum":" 3875","line":""},
{"lineNum":" 3876","line":"test \"JString/Regex\" {","class":"lineCov","hits":"1","order":"1732","possible_hits":"1",},
{"lineNum":" 3877","line":"    // briefly test managed version, to make sure that they follow the the spec designed. Majority functions are tested in unmanaged version."},
{"lineNum":" 3878","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"1733","possible_hits":"1",},
{"lineNum":" 3879","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"2083","possible_hits":"163",},
{"lineNum":" 3880","line":"    {"},
{"lineNum":" 3881","line":"        var str1 = try JString.newEmpty(arena.allocator());","class":"linePartCov","hits":"1","order":"1734","possible_hits":"2",},
{"lineNum":" 3882","line":"        const str2 = try JString.newFromSlice(arena.allocator(), \"hello,💯world\");","class":"linePartCov","hits":"1","order":"1737","possible_hits":"2",},
{"lineNum":" 3883","line":"        str1 = try str1.repeat(5);","class":"linePartCov","hits":"1","order":"1738","possible_hits":"2",},
{"lineNum":" 3884","line":"        var jstrings: [1]JString = undefined;","class":"lineCov","hits":"1","order":"1742","possible_hits":"1",},
{"lineNum":" 3885","line":"        jstrings[0] = str2;","class":"lineCov","hits":"1","order":"1743","possible_hits":"1",},
{"lineNum":" 3886","line":"        var str3 = try str1.concatMany(jstrings[0..1]);","class":"linePartCov","hits":"1","order":"1744","possible_hits":"2",},
{"lineNum":" 3887","line":"        try testing.expect(str3.eqlSlice(\"hello,💯world\"));","class":"linePartCov","hits":"2","order":"1753","possible_hits":"3",},
{"lineNum":" 3888","line":"        str3 = try str1.concatMany(jstrings[0..0]);","class":"linePartCov","hits":"1","order":"1755","possible_hits":"2",},
{"lineNum":" 3889","line":"        try testing.expect(str3.eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1760","possible_hits":"3",},
{"lineNum":" 3890","line":"        str3 = try str1.concat(str2);","class":"linePartCov","hits":"1","order":"1761","possible_hits":"2",},
{"lineNum":" 3891","line":"        try testing.expect(str3.eqlSlice(\"hello,💯world\"));","class":"linePartCov","hits":"2","order":"1765","possible_hits":"3",},
{"lineNum":" 3892","line":"        str3 = try str2.clone();","class":"linePartCov","hits":"1","order":"1766","possible_hits":"2",},
{"lineNum":" 3893","line":"        try testing.expect(str3.eqlSlice(\"hello,💯world\"));","class":"linePartCov","hits":"2","order":"1767","possible_hits":"3",},
{"lineNum":" 3894","line":"        try testing.expect(!str3.isEmpty());","class":"linePartCov","hits":"2","order":"1768","possible_hits":"3",},
{"lineNum":" 3895","line":"        try testing.expect(str3.eql(str2));","class":"linePartCov","hits":"2","order":"1770","possible_hits":"3",},
{"lineNum":" 3896","line":"        str3 = try JString.newFromJString(str2);","class":"linePartCov","hits":"1","order":"1772","possible_hits":"2",},
{"lineNum":" 3897","line":"        try testing.expect(str3.eqlSlice(\"hello,💯world\"));","class":"linePartCov","hits":"2","order":"1777","possible_hits":"3",},
{"lineNum":" 3898","line":"        str3 = try JString.newFromFormat(arena.allocator(), \"{s}!\", .{str2});","class":"linePartCov","hits":"1","order":"1778","possible_hits":"2",},
{"lineNum":" 3899","line":"        try testing.expect(str3.eqlSlice(\"hello,💯world!\"));","class":"linePartCov","hits":"2","order":"1783","possible_hits":"3",},
{"lineNum":" 3900","line":"        str3 = try JString.newFromTuple(arena.allocator(), .{ str2, \"!\" });","class":"linePartCov","hits":"1","order":"1784","possible_hits":"2",},
{"lineNum":" 3901","line":"        try testing.expect(str3.eqlSlice(\"hello,💯world!\"));","class":"linePartCov","hits":"2","order":"1788","possible_hits":"3",},
{"lineNum":" 3902","line":"        str3 = try JString.newFromNumber(arena.allocator(), f32, 13.5);","class":"linePartCov","hits":"1","order":"1789","possible_hits":"2",},
{"lineNum":" 3903","line":"        try testing.expect(str3.eqlSlice(\"13.5\"));","class":"linePartCov","hits":"2","order":"1792","possible_hits":"3",},
{"lineNum":" 3904","line":"        str3 = try JString.newFromStringify(arena.allocator(), .{ .hello = \"world\" });","class":"linePartCov","hits":"1","order":"1793","possible_hits":"2",},
{"lineNum":" 3905","line":"        try testing.expect(str3.eqlSlice(\"{\\\"hello\\\":\\\"world\\\"}\"));","class":"linePartCov","hits":"2","order":"1796","possible_hits":"3",},
{"lineNum":" 3906","line":"        str3 = try JString.newFromStringifyWithOptions(arena.allocator(), .{ .hello = \"world\" }, .{});","class":"linePartCov","hits":"1","order":"1797","possible_hits":"2",},
{"lineNum":" 3907","line":"        try testing.expect(str3.eqlSlice(\"{\\\"hello\\\":\\\"world\\\"}\"));","class":"linePartCov","hits":"2","order":"1800","possible_hits":"3",},
{"lineNum":" 3908","line":"        var tmp_dir = std.testing.tmpDir(.{});","class":"lineCov","hits":"1","order":"1801","possible_hits":"1",},
{"lineNum":" 3909","line":"        defer tmp_dir.cleanup();","class":"linePartCov","hits":"1","order":"1811","possible_hits":"8",},
{"lineNum":" 3910","line":"        var tmp_file = try tmp_dir.dir.createFile(\"test.txt\", .{ .read = true });","class":"linePartCov","hits":"1","order":"1802","possible_hits":"2",},
{"lineNum":" 3911","line":"        try tmp_file.writeAll(\"hello,world\");","class":"linePartCov","hits":"1","order":"1803","possible_hits":"2",},
{"lineNum":" 3912","line":"        try tmp_file.seekTo(0);","class":"linePartCov","hits":"1","order":"1804","possible_hits":"2",},
{"lineNum":" 3913","line":"        const str10 = try JString.newFromFile(arena.allocator(), tmp_file);","class":"linePartCov","hits":"1","order":"1805","possible_hits":"2",},
{"lineNum":" 3914","line":"        try testing.expect(str10.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"1808","possible_hits":"3",},
{"lineNum":" 3915","line":"        // now file is at the end, so read again should give us 0 len slice"},
{"lineNum":" 3916","line":"        const str11 = try JString.newFromFile(arena.allocator(), tmp_file);","class":"linePartCov","hits":"1","order":"1809","possible_hits":"2",},
{"lineNum":" 3917","line":"        try testing.expect(str11.eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1810","possible_hits":"3",},
{"lineNum":" 3918","line":"    }"},
{"lineNum":" 3919","line":"    {"},
{"lineNum":" 3920","line":"        var str1 = try JString.newFromSlice(arena.allocator(), \" zig 更好 \\t 的c\\t💯\");","class":"linePartCov","hits":"1","order":"1812","possible_hits":"2",},
{"lineNum":" 3921","line":"        var wyhash = std.hash.Wyhash.init(0);","class":"lineCov","hits":"1","order":"1813","possible_hits":"1",},
{"lineNum":" 3922","line":"        wyhash.update(\" zig 更好 \\t 的c\\t💯\");","class":"lineCov","hits":"1","order":"1814","possible_hits":"1",},
{"lineNum":" 3923","line":"        const h = wyhash.final();","class":"lineCov","hits":"1","order":"1815","possible_hits":"1",},
{"lineNum":" 3924","line":"        try testing.expectEqual(str1.hash(), h);","class":"linePartCov","hits":"2","order":"1816","possible_hits":"3",},
{"lineNum":" 3925","line":"        try testing.expectEqual(str1.len(), 23);","class":"linePartCov","hits":"2","order":"1818","possible_hits":"3",},
{"lineNum":" 3926","line":"        try testing.expectEqual(str1.utf8Len(), 14);","class":"linePartCov","hits":"2","order":"1820","possible_hits":"3",},
{"lineNum":" 3927","line":"    }"},
{"lineNum":" 3928","line":"    {"},
{"lineNum":" 3929","line":"        const str2 = try JString.newFromSlice(arena.allocator(), \"ab\");","class":"linePartCov","hits":"1","order":"1822","possible_hits":"2",},
{"lineNum":" 3930","line":"        var it2 = str2.iterator();","class":"lineCov","hits":"1","order":"1823","possible_hits":"1",},
{"lineNum":" 3931","line":"        try testing.expectEqual(it2.next(), \'a\');","class":"linePartCov","hits":"1","order":"1825","possible_hits":"2",},
{"lineNum":" 3932","line":"        var it3 = str2.reverseIterator();","class":"lineCov","hits":"1","order":"1826","possible_hits":"1",},
{"lineNum":" 3933","line":"        try testing.expectEqual(it3.next(), \'b\');","class":"linePartCov","hits":"1","order":"1828","possible_hits":"2",},
{"lineNum":" 3934","line":"        var str1 = try JString.newFromSlice(arena.allocator(), \"zig更好的c💯\");","class":"linePartCov","hits":"1","order":"1829","possible_hits":"2",},
{"lineNum":" 3935","line":"        var it1 = try str1.utf8Iterator();","class":"linePartCov","hits":"1","order":"1830","possible_hits":"2",},
{"lineNum":" 3936","line":"        try testing.expectEqual(it1.nextCodepoint(), \'z\');","class":"linePartCov","hits":"1","order":"1832","possible_hits":"2",},
{"lineNum":" 3937","line":"    }"},
{"lineNum":" 3938","line":"    {"},
{"lineNum":" 3939","line":"        const str1 = try JString.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"1833","possible_hits":"2",},
{"lineNum":" 3940","line":"        var str2 = try str1.padStart(12, \"welcome\");","class":"linePartCov","hits":"1","order":"1834","possible_hits":"2",},
{"lineNum":" 3941","line":"        try testing.expect(str2.eqlSlice(\"welcomehello\"));","class":"linePartCov","hits":"2","order":"1838","possible_hits":"3",},
{"lineNum":" 3942","line":"        str2 = try str1.padStartJString(12, &str1);","class":"linePartCov","hits":"1","order":"1839","possible_hits":"2",},
{"lineNum":" 3943","line":"        try testing.expect(str2.eqlSlice(\"lohellohello\"));","class":"linePartCov","hits":"2","order":"1841","possible_hits":"3",},
{"lineNum":" 3944","line":"        str2 = try str1.padEnd(10, \"world\");","class":"linePartCov","hits":"1","order":"1842","possible_hits":"2",},
{"lineNum":" 3945","line":"        try testing.expect(str2.eqlSlice(\"helloworld\"));","class":"linePartCov","hits":"2","order":"1846","possible_hits":"3",},
{"lineNum":" 3946","line":"        str2 = try str1.padEndJString(12, &str1);","class":"linePartCov","hits":"1","order":"1847","possible_hits":"2",},
{"lineNum":" 3947","line":"        try testing.expect(str2.eqlSlice(\"hellohellohe\"));","class":"linePartCov","hits":"2","order":"1849","possible_hits":"3",},
{"lineNum":" 3948","line":"    }"},
{"lineNum":" 3949","line":"    {"},
{"lineNum":" 3950","line":"        const str2 = try JString.newFromSlice(arena.allocator(), \"abcdefg\");","class":"linePartCov","hits":"1","order":"1850","possible_hits":"2",},
{"lineNum":" 3951","line":"        try testing.expectEqual(str2.charAt(2), \'c\');","class":"linePartCov","hits":"2","order":"1851","possible_hits":"3",},
{"lineNum":" 3952","line":"        var str1 = try JString.newFromSlice(arena.allocator(), \"zig更好的c💯\");","class":"linePartCov","hits":"1","order":"1853","possible_hits":"2",},
{"lineNum":" 3953","line":"        try testing.expectEqual(str1.at(-1), \'💯\');","class":"linePartCov","hits":"2","order":"1854","possible_hits":"3",},
{"lineNum":" 3954","line":"    }"},
{"lineNum":" 3955","line":"    {"},
{"lineNum":" 3956","line":"        var str1 = try JString.newFromSlice(arena.allocator(), \" zig 更好 \\t 的c\\t💯\");","class":"linePartCov","hits":"1","order":"1856","possible_hits":"2",},
{"lineNum":" 3957","line":"        var strings1 = try str1.explode(-1);","class":"linePartCov","hits":"1","order":"1857","possible_hits":"2",},
{"lineNum":" 3958","line":"        try testing.expectEqual(strings1.len, 4);","class":"linePartCov","hits":"1","order":"1864","possible_hits":"2",},
{"lineNum":" 3959","line":"        strings1 = try str1.splitByWhiteSpace(-1);","class":"linePartCov","hits":"1","order":"1865","possible_hits":"2",},
{"lineNum":" 3960","line":"        try testing.expectEqual(strings1.len, 4);","class":"linePartCov","hits":"1","order":"1867","possible_hits":"2",},
{"lineNum":" 3961","line":"    }"},
{"lineNum":" 3962","line":"    {"},
{"lineNum":" 3963","line":"        const str1 = try JString.newFromSlice(arena.allocator(), \"hello,world\");","class":"linePartCov","hits":"1","order":"1868","possible_hits":"2",},
{"lineNum":" 3964","line":"        var str_array_buf: [256]JString = undefined;","class":"lineCov","hits":"1","order":"1869","possible_hits":"1",},
{"lineNum":" 3965","line":"        str_array_buf[0] = str1;","class":"lineCov","hits":"1","order":"1870","possible_hits":"1",},
{"lineNum":" 3966","line":"        const str2 = try str1.concatMany(str_array_buf[0..1]);","class":"linePartCov","hits":"1","order":"1871","possible_hits":"2",},
{"lineNum":" 3967","line":"        try testing.expect(str2.eqlSlice(\"hello,world\" ** 2));","class":"linePartCov","hits":"2","order":"1872","possible_hits":"3",},
{"lineNum":" 3968","line":"        var str5 = try str1.concatFormat(\"{s}\", .{\" jstring\"});","class":"linePartCov","hits":"1","order":"1873","possible_hits":"2",},
{"lineNum":" 3969","line":"        try testing.expect(str5.eqlSlice(\"hello,world jstring\"));","class":"linePartCov","hits":"2","order":"1878","possible_hits":"3",},
{"lineNum":" 3970","line":"        str5 = try str1.concatFormat(\"{s}\", .{});","class":"linePartCov","hits":"1","order":"1879","possible_hits":"2",},
{"lineNum":" 3971","line":"        try testing.expect(str5.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"1881","possible_hits":"3",},
{"lineNum":" 3972","line":"        const optional_6: ?i32 = 6;"},
{"lineNum":" 3973","line":"        const error1 = _testCreateErrorUnion(false, i32, 0, error.OutOfMemory);","class":"linePartCov","hits":"1","order":"1882","possible_hits":"2",},
{"lineNum":" 3974","line":"        const str6 = try str1.concatTuple(.{","class":"linePartCov","hits":"1","order":"1883","possible_hits":"2",},
{"lineNum":" 3975","line":"            \" jstring\","},
{"lineNum":" 3976","line":"            5,"},
{"lineNum":" 3977","line":"            optional_6,"},
{"lineNum":" 3978","line":"            error1,"},
{"lineNum":" 3979","line":"        });"},
{"lineNum":" 3980","line":"        try testing.expect(str6.eqlSlice(\"hello,world jstring56error.OutOfMemory\"));","class":"linePartCov","hits":"2","order":"1885","possible_hits":"3",},
{"lineNum":" 3981","line":"        var some_slices: [1][]const u8 = undefined;","class":"lineCov","hits":"1","order":"1886","possible_hits":"1",},
{"lineNum":" 3982","line":"        some_slices[0] = \"hello\";","class":"lineCov","hits":"1","order":"1887","possible_hits":"1",},
{"lineNum":" 3983","line":"        const str9 = try str1.concatManySlices(&some_slices);","class":"linePartCov","hits":"1","order":"1888","possible_hits":"2",},
{"lineNum":" 3984","line":"        try testing.expect(str9.eqlSlice(\"hello,worldhello\"));","class":"linePartCov","hits":"2","order":"1892","possible_hits":"3",},
{"lineNum":" 3985","line":"        const str8 = try str1.concatSlice(\"hello\");","class":"linePartCov","hits":"1","order":"1893","possible_hits":"2",},
{"lineNum":" 3986","line":"        try testing.expect(str8.eqlSlice(\"hello,worldhello\"));","class":"linePartCov","hits":"2","order":"1897","possible_hits":"3",},
{"lineNum":" 3987","line":"    }"},
{"lineNum":" 3988","line":"    {"},
{"lineNum":" 3989","line":"        var str1 = try JString.newFromSlice(arena.allocator(), \"hello,world\");","class":"linePartCov","hits":"1","order":"1898","possible_hits":"2",},
{"lineNum":" 3990","line":"        var str2 = try JString.newFromSlice(arena.allocator(), \"hello\");","class":"linePartCov","hits":"1","order":"1899","possible_hits":"2",},
{"lineNum":" 3991","line":"        try testing.expect(str1.startsWith(str2));","class":"linePartCov","hits":"2","order":"1900","possible_hits":"3",},
{"lineNum":" 3992","line":"        try testing.expect(!str1.endsWith(str2));","class":"linePartCov","hits":"2","order":"1904","possible_hits":"3",},
{"lineNum":" 3993","line":"        try testing.expect(str1.endsWithSlice(\"world\"));","class":"linePartCov","hits":"2","order":"1906","possible_hits":"3",},
{"lineNum":" 3994","line":"        str1 = try JString.newFromSlice(arena.allocator(), \"hello,worldhello,world\");","class":"linePartCov","hits":"1","order":"1908","possible_hits":"2",},
{"lineNum":" 3995","line":"        try testing.expectEqual(str1.indexOf(\"hello\", 0), 0);","class":"linePartCov","hits":"2","order":"1909","possible_hits":"3",},
{"lineNum":" 3996","line":"        try testing.expectEqual(str1.lastIndexOf(\"hello\", 0), 11);","class":"linePartCov","hits":"2","order":"1911","possible_hits":"3",},
{"lineNum":" 3997","line":"        try testing.expect(!str1.includes(\"nothere\", 0));","class":"linePartCov","hits":"2","order":"1913","possible_hits":"3",},
{"lineNum":" 3998","line":"        str2 = try JString.newFromSlice(arena.allocator(), \"hello,worldhello,world\");","class":"linePartCov","hits":"1","order":"1915","possible_hits":"2",},
{"lineNum":" 3999","line":"        try testing.expectEqual(str2.fastIndexOf(\"hello\", 0), 0);","class":"linePartCov","hits":"2","order":"1916","possible_hits":"3",},
{"lineNum":" 4000","line":"        try testing.expectEqual(str2.fastLastIndexOf(\"hello\", 0), 11);","class":"linePartCov","hits":"2","order":"1918","possible_hits":"3",},
{"lineNum":" 4001","line":"        try testing.expectEqual(str2.search(\"hello\", 0), 0);","class":"linePartCov","hits":"2","order":"1920","possible_hits":"3",},
{"lineNum":" 4002","line":"    }"},
{"lineNum":" 4003","line":"    {"},
{"lineNum":" 4004","line":"        const str: []const u8 = \"hello,💯\";","class":"lineCov","hits":"1","order":"1922","possible_hits":"1",},
{"lineNum":" 4005","line":"        var str1 = try JString.newFromSlice(arena.allocator(), str[0 .. str.len - 1]);","class":"linePartCov","hits":"1","order":"1923","possible_hits":"2",},
{"lineNum":" 4006","line":"        try testing.expect(!str1.isWellFormed());","class":"linePartCov","hits":"1","order":"1924","possible_hits":"2",},
{"lineNum":" 4007","line":"    }"},
{"lineNum":" 4008","line":"    {"},
{"lineNum":" 4009","line":"        var str1 = try JString.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"1927","possible_hits":"2",},
{"lineNum":" 4010","line":"        var str2 = try str1.replace(\"world\", \"jstring\");","class":"linePartCov","hits":"1","order":"1928","possible_hits":"2",},
{"lineNum":" 4011","line":"        try testing.expect(str2.eqlSlice(\"hello,hello,jstring\"));","class":"linePartCov","hits":"2","order":"1932","possible_hits":"3",},
{"lineNum":" 4012","line":"        str2 = try str1.replaceAll(\"hello\", \"jstring\");","class":"linePartCov","hits":"1","order":"1933","possible_hits":"2",},
{"lineNum":" 4013","line":"        try testing.expect(str2.eqlSlice(\"jstring,jstring,world\"));","class":"linePartCov","hits":"2","order":"1937","possible_hits":"3",},
{"lineNum":" 4014","line":"    }"},
{"lineNum":" 4015","line":"    {"},
{"lineNum":" 4016","line":"        var str1 = try JString.newFromSlice(arena.allocator(), \"hEllO,💯woRld\");","class":"linePartCov","hits":"1","order":"1938","possible_hits":"2",},
{"lineNum":" 4017","line":"        const str2 = try str1.toUpperCase();","class":"linePartCov","hits":"1","order":"1939","possible_hits":"2",},
{"lineNum":" 4018","line":"        try testing.expect(str2.eqlSlice(\"HELLO,💯WORLD\"));","class":"linePartCov","hits":"2","order":"1944","possible_hits":"3",},
{"lineNum":" 4019","line":"        const str3 = try str1.toLowerCase();","class":"linePartCov","hits":"1","order":"1945","possible_hits":"2",},
{"lineNum":" 4020","line":"        try testing.expect(str3.eqlSlice(\"hello,💯world\"));","class":"linePartCov","hits":"2","order":"1950","possible_hits":"3",},
{"lineNum":" 4021","line":"    }"},
{"lineNum":" 4022","line":"    {"},
{"lineNum":" 4023","line":"        var str1 = try JString.newFromSlice(arena.allocator(), \"  hello,world\");","class":"linePartCov","hits":"1","order":"1951","possible_hits":"2",},
{"lineNum":" 4024","line":"        var str2 = try str1.trimStart();","class":"linePartCov","hits":"1","order":"1952","possible_hits":"2",},
{"lineNum":" 4025","line":"        try testing.expect(str2.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"1957","possible_hits":"3",},
{"lineNum":" 4026","line":"        str1 = try JString.newFromSlice(arena.allocator(), \"hello,world  \");","class":"linePartCov","hits":"1","order":"1958","possible_hits":"2",},
{"lineNum":" 4027","line":"        str2 = try str1.trimEnd();","class":"linePartCov","hits":"1","order":"1959","possible_hits":"2",},
{"lineNum":" 4028","line":"        try testing.expect(str2.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"1964","possible_hits":"3",},
{"lineNum":" 4029","line":"        str1 = try JString.newFromSlice(arena.allocator(), \"  hello,world  \");","class":"linePartCov","hits":"1","order":"1965","possible_hits":"2",},
{"lineNum":" 4030","line":"        str2 = try str1.trim();","class":"linePartCov","hits":"1","order":"1966","possible_hits":"2",},
{"lineNum":" 4031","line":"        try testing.expect(str2.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"1971","possible_hits":"3",},
{"lineNum":" 4032","line":"    }"},
{"lineNum":" 4033","line":"    {"},
{"lineNum":" 4034","line":"        var str1 = try JString.newFromSlice(arena.allocator(), \"hello,world\");","class":"linePartCov","hits":"1","order":"1972","possible_hits":"2",},
{"lineNum":" 4035","line":"        const str2 = try str1.sliceWithStartOnly(0);","class":"linePartCov","hits":"1","order":"1973","possible_hits":"2",},
{"lineNum":" 4036","line":"        try testing.expect(str2.eqlSlice(\"hello,world\"));","class":"linePartCov","hits":"2","order":"1978","possible_hits":"3",},
{"lineNum":" 4037","line":"        const str6 = try str1.slice(15, 7);","class":"linePartCov","hits":"1","order":"1979","possible_hits":"2",},
{"lineNum":" 4038","line":"        try testing.expect(str6.eqlSlice(\"\"));","class":"linePartCov","hits":"2","order":"1980","possible_hits":"3",},
{"lineNum":" 4039","line":"    }"},
{"lineNum":" 4040","line":"    if (enable_pcre) {"},
{"lineNum":" 4041","line":"        {"},
{"lineNum":" 4042","line":"            var str1 = try JString.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"1981","possible_hits":"2",},
{"lineNum":" 4043","line":"            var re = try str1.match(\"hel+o\", 0, true, Regex.DefaultRegexOptions, Regex.DefaultMatchOptions);","class":"linePartCov","hits":"1","order":"1982","possible_hits":"2",},
{"lineNum":" 4044","line":"            try testing.expect(re.matchSucceed());","class":"linePartCov","hits":"2","order":"1986","possible_hits":"3",},
{"lineNum":" 4045","line":"            var it = re.getResultsIterator(str1.valueOf());","class":"lineCov","hits":"1","order":"1988","possible_hits":"1",},
{"lineNum":" 4046","line":"            const maybe_result = it.nextResult();","class":"lineCov","hits":"1","order":"1991","possible_hits":"1",},
{"lineNum":" 4047","line":"            if (maybe_result) |r| {","class":"lineCov","hits":"2","order":"1992","possible_hits":"2",},
{"lineNum":" 4048","line":"                try testing.expectEqual(r.start, 0);","class":"linePartCov","hits":"1","order":"1993","possible_hits":"2",},
{"lineNum":" 4049","line":"                try testing.expectEqual(r.len, 5);","class":"linePartCov","hits":"1","order":"1994","possible_hits":"2",},
{"lineNum":" 4050","line":"                try testing.expectEqualSlices(u8, r.value, \"hello\");","class":"linePartCov","hits":"1","order":"1995","possible_hits":"3",},
{"lineNum":" 4051","line":"            }"},
{"lineNum":" 4052","line":"            str1 = try JString.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"1996","possible_hits":"3",},
{"lineNum":" 4053","line":"            re = try str1.matchAll(\"hel+o\", 0, Regex.DefaultRegexOptions, Regex.DefaultMatchOptions);","class":"linePartCov","hits":"1","order":"1997","possible_hits":"2",},
{"lineNum":" 4054","line":"            try testing.expect(re.matchSucceed());","class":"linePartCov","hits":"2","order":"2001","possible_hits":"3",},
{"lineNum":" 4055","line":"        }"},
{"lineNum":" 4056","line":"        {"},
{"lineNum":" 4057","line":"            var str1 = try JString.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"2002","possible_hits":"2",},
{"lineNum":" 4058","line":"            var str2 = try str1.replaceByRegex(\"wor.d\", \"jstring\");","class":"linePartCov","hits":"1","order":"2003","possible_hits":"2",},
{"lineNum":" 4059","line":"            try testing.expect(str2.eqlSlice(\"hello,hello,jstring\"));","class":"linePartCov","hits":"2","order":"2007","possible_hits":"3",},
{"lineNum":" 4060","line":"            str2 = try str1.replaceAllByRegex(\"hel+o\", \"jstring\");","class":"linePartCov","hits":"1","order":"2008","possible_hits":"2",},
{"lineNum":" 4061","line":"            try testing.expect(str2.eqlSlice(\"jstring,jstring,world\"));","class":"linePartCov","hits":"2","order":"2012","possible_hits":"3",},
{"lineNum":" 4062","line":"        }"},
{"lineNum":" 4063","line":"        {"},
{"lineNum":" 4064","line":"            var str1 = try JString.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"2013","possible_hits":"2",},
{"lineNum":" 4065","line":"            const r = try str1.searchByRegex(\"hel+o\", 0);","class":"linePartCov","hits":"1","order":"2014","possible_hits":"2",},
{"lineNum":" 4066","line":"            try testing.expectEqual(r, 0);","class":"linePartCov","hits":"1","order":"2016","possible_hits":"2",},
{"lineNum":" 4067","line":"        }"},
{"lineNum":" 4068","line":"        {"},
{"lineNum":" 4069","line":"            var str1 = try JString.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"2017","possible_hits":"2",},
{"lineNum":" 4070","line":"            const results = try str1.splitByRegex(\"l+\", 0, 0);","class":"linePartCov","hits":"1","order":"2018","possible_hits":"2",},
{"lineNum":" 4071","line":"            try testing.expectEqual(results.len, 1);","class":"linePartCov","hits":"1","order":"2024","possible_hits":"2",},
{"lineNum":" 4072","line":"        }"},
{"lineNum":" 4073","line":"        // Regex"},
{"lineNum":" 4074","line":"        {"},
{"lineNum":" 4075","line":"            var re = try Regex.init(arena.allocator(), \"(hello\", 0);","class":"linePartCov","hits":"1","order":"2025","possible_hits":"2",},
{"lineNum":" 4076","line":"            try testing.expect(!re.succeed());","class":"linePartCov","hits":"2","order":"2031","possible_hits":"3",},
{"lineNum":" 4077","line":"            try testing.expectEqual(re.errorNumber(), 114);","class":"linePartCov","hits":"2","order":"2033","possible_hits":"3",},
{"lineNum":" 4078","line":"            try testing.expectEqual(re.errorOffset(), 6);","class":"linePartCov","hits":"2","order":"2035","possible_hits":"3",},
{"lineNum":" 4079","line":"            try testing.expectEqualSlices(u8, re.errorMessage(), \"PCRE2 compilation failed at offset 6: missing closing parenthesis\\n\");","class":"linePartCov","hits":"2","order":"2037","possible_hits":"3",},
{"lineNum":" 4080","line":"            re.deinit();","class":"lineCov","hits":"1","order":"2039","possible_hits":"1",},
{"lineNum":" 4081","line":"        }"},
{"lineNum":" 4082","line":"        {"},
{"lineNum":" 4083","line":"            var re = try Regex.init(arena.allocator(), \"(?<h>hel+o)\", 0);","class":"linePartCov","hits":"1","order":"2041","possible_hits":"2",},
{"lineNum":" 4084","line":"            try re.matchAll(\"hello,hello,world\", 0, 0);","class":"linePartCov","hits":"1","order":"2042","possible_hits":"2",},
{"lineNum":" 4085","line":"            const matched_results = re.getResults();","class":"lineCov","hits":"1","order":"2044","possible_hits":"1",},
{"lineNum":" 4086","line":"            try testing.expect(matched_results != null);","class":"linePartCov","hits":"1","order":"2046","possible_hits":"2",},
{"lineNum":" 4087","line":"            if (matched_results) |mr| {","class":"lineCov","hits":"2","order":"2047","possible_hits":"2",},
{"lineNum":" 4088","line":"                try testing.expect(mr[0].start == 0);","class":"linePartCov","hits":"2","order":"2048","possible_hits":"3",},
{"lineNum":" 4089","line":"                try testing.expect(mr[0].len == 5);","class":"linePartCov","hits":"1","order":"2049","possible_hits":"3",},
{"lineNum":" 4090","line":"            }"},
{"lineNum":" 4091","line":"            const matched_group_results = re.getGroupResults();","class":"lineCov","hits":"1","order":"2050","possible_hits":"1",},
{"lineNum":" 4092","line":"            try testing.expect(matched_group_results != null);","class":"linePartCov","hits":"1","order":"2052","possible_hits":"2",},
{"lineNum":" 4093","line":"            if (matched_group_results) |mgr| {","class":"lineCov","hits":"2","order":"2053","possible_hits":"2",},
{"lineNum":" 4094","line":"                try testing.expect(mgr.len == 2);","class":"linePartCov","hits":"1","order":"2054","possible_hits":"2",},
{"lineNum":" 4095","line":"                try testing.expectEqualSlices(u8, mgr[0].name[0..mgr[0].name_len], \"h\");","class":"linePartCov","hits":"1","order":"2055","possible_hits":"2",},
{"lineNum":" 4096","line":"                try testing.expect(mgr[0].start == 0);","class":"linePartCov","hits":"1","order":"2056","possible_hits":"2",},
{"lineNum":" 4097","line":"                try testing.expect(mgr[0].len == 5);","class":"linePartCov","hits":"1","order":"2057","possible_hits":"3",},
{"lineNum":" 4098","line":"            }"},
{"lineNum":" 4099","line":"        }"},
{"lineNum":" 4100","line":"        {"},
{"lineNum":" 4101","line":"            var re = try Regex.init(arena.allocator(), \"(hi,)(?<h>hel+o?)\", 0);","class":"linePartCov","hits":"1","order":"2058","possible_hits":"3",},
{"lineNum":" 4102","line":"            try re.reset(); // this should works find without error","class":"linePartCov","hits":"1","order":"2059","possible_hits":"2",},
{"lineNum":" 4103","line":"        }"},
{"lineNum":" 4104","line":"        {"},
{"lineNum":" 4105","line":"            var re = try Regex.init(arena.allocator(), \"(hi,)(?<h>hel+o?)\", 0);","class":"linePartCov","hits":"1","order":"2061","possible_hits":"2",},
{"lineNum":" 4106","line":"            try re.match(\"hi,hello,hi,hello\", 0, true, 0);","class":"linePartCov","hits":"1","order":"2062","possible_hits":"2",},
{"lineNum":" 4107","line":"            const maybe_r = re.getGroupResultByName(\"h\");","class":"lineCov","hits":"1","order":"2064","possible_hits":"1",},
{"lineNum":" 4108","line":"            try testing.expect(maybe_r != null);","class":"linePartCov","hits":"1","order":"2066","possible_hits":"2",},
{"lineNum":" 4109","line":"            const maybe_r2 = re.getGroupResultByIndex(1);","class":"lineCov","hits":"1","order":"2067","possible_hits":"1",},
{"lineNum":" 4110","line":"            try testing.expect(maybe_r2 != null);","class":"linePartCov","hits":"1","order":"2069","possible_hits":"2",},
{"lineNum":" 4111","line":"            var it = re.getGroupResultsIterator(\"hi,hello,hi,hello\");","class":"lineCov","hits":"1","order":"2070","possible_hits":"1",},
{"lineNum":" 4112","line":"            try testing.expect(it.nextResult() != null);","class":"linePartCov","hits":"1","order":"2072","possible_hits":"2",},
{"lineNum":" 4113","line":"        }"},
{"lineNum":" 4114","line":"        {"},
{"lineNum":" 4115","line":"            var re = try Regex.init(arena.allocator(), \"(hi,)(?<h>hel+o?)\", 0);","class":"linePartCov","hits":"1","order":"2073","possible_hits":"2",},
{"lineNum":" 4116","line":"            try testing.expect(_testIsError(usize, re.getNextOffset(\"hello\"), JStringError.RegexFetchBeforeMatch));","class":"linePartCov","hits":"2","order":"2074","possible_hits":"3",},
{"lineNum":" 4117","line":"            try re.match(\"hi,hello,hi,hello\", 0, true, 0);","class":"linePartCov","hits":"1","order":"2076","possible_hits":"2",},
{"lineNum":" 4118","line":"            try testing.expectEqual(re.getNextOffset(\"hi,hello,hi,hello\"), 8);","class":"linePartCov","hits":"2","order":"2077","possible_hits":"3",},
{"lineNum":" 4119","line":"        }"},
{"lineNum":" 4120","line":"        {"},
{"lineNum":" 4121","line":"            var re = try Regex.init(arena.allocator(), \"(hi,)(?<h>hel+o?)\", 0);","class":"linePartCov","hits":"1","order":"2078","possible_hits":"2",},
{"lineNum":" 4122","line":"            try re.match(\"hi,hello,hi,hello\", 0, false, 0);","class":"linePartCov","hits":"1","order":"2079","possible_hits":"2",},
{"lineNum":" 4123","line":"            try re.fetchResults();","class":"linePartCov","hits":"1","order":"2080","possible_hits":"2",},
{"lineNum":" 4124","line":"            try testing.expectEqual(re.getNextOffset(\"hi,hello,hi,hello\"), 8);","class":"linePartCov","hits":"2","order":"2082","possible_hits":"3",},
{"lineNum":" 4125","line":"        }"},
{"lineNum":" 4126","line":"    }"},
{"lineNum":" 4127","line":"}"},
{"lineNum":" 4128","line":""},
{"lineNum":" 4129","line":"test \"forbidden city\" {","class":"lineCov","hits":"1","order":"2084","possible_hits":"1",},
{"lineNum":" 4130","line":"    // tests listed here are those necessary to better coverage but not supposed to be used if not developing this lib"},
{"lineNum":" 4131","line":"    // just remember that: in practice if you call this you will be fired (not me), or they are tested here does not"},
{"lineNum":" 4132","line":"    // mean you should use it."},
{"lineNum":" 4133","line":"    var arena = ArenaAllocator.init(testing.allocator);","class":"lineCov","hits":"1","order":"2085","possible_hits":"1",},
{"lineNum":" 4134","line":"    defer arena.deinit();","class":"linePartCov","hits":"1","order":"2128","possible_hits":"16",},
{"lineNum":" 4135","line":"    {"},
{"lineNum":" 4136","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello,hello,world\");","class":"linePartCov","hits":"1","order":"2086","possible_hits":"2",},
{"lineNum":" 4137","line":"        const gaps = try arena.allocator().alloc(_MatchedGapIterator.Gap, 0);","class":"linePartCov","hits":"1","order":"2087","possible_hits":"2",},
{"lineNum":" 4138","line":"        const str2 = try str1._joinGapsWithSlice(arena.allocator(), gaps, \"\");","class":"linePartCov","hits":"1","order":"2088","possible_hits":"2",},
{"lineNum":" 4139","line":"        try testing.expect(str2.eqlSlice(\"hello,hello,world\"));","class":"linePartCov","hits":"2","order":"2089","possible_hits":"3",},
{"lineNum":" 4140","line":"    }"},
{"lineNum":" 4141","line":"    {"},
{"lineNum":" 4142","line":"        try testing.expectEqual(_sliceAt(u8, \"hello\", 1), \'e\');","class":"linePartCov","hits":"1","order":"2090","possible_hits":"2",},
{"lineNum":" 4143","line":"        try testing.expectEqual(_sliceAt(u8, \"hello\", -1), \'o\');","class":"linePartCov","hits":"1","order":"2094","possible_hits":"2",},
{"lineNum":" 4144","line":"        try testing.expect(!_testIsError(u8, \'h\', JStringError.RegexMatchFailed));","class":"linePartCov","hits":"1","order":"2096","possible_hits":"2",},
{"lineNum":" 4145","line":"    }"},
{"lineNum":" 4146","line":"    {"},
{"lineNum":" 4147","line":"        var str1 = try JStringUnmanaged.newFromSlice(arena.allocator(), \"hello 💯world\");","class":"linePartCov","hits":"1","order":"2098","possible_hits":"2",},
{"lineNum":" 4148","line":"        const strs = try str1._splitToUtf8Chars(arena.allocator(), 999, false);","class":"linePartCov","hits":"1","order":"2099","possible_hits":"2",},
{"lineNum":" 4149","line":"        defer freeJStringUnmanagedArray(arena.allocator(), strs);","class":"linePartCov","hits":"1","order":"2112","possible_hits":"3",},
{"lineNum":" 4150","line":"        try testing.expectEqual(strs.len, 11);","class":"linePartCov","hits":"1","order":"2110","possible_hits":"2",},
{"lineNum":" 4151","line":"        try testing.expect(strs[5].eqlSlice(\"💯\"));","class":"linePartCov","hits":"2","order":"2111","possible_hits":"3",},
{"lineNum":" 4152","line":"    }"},
{"lineNum":" 4153","line":"    if (enable_pcre) {"},
{"lineNum":" 4154","line":"        {"},
{"lineNum":" 4155","line":"            var re = try RegexUnmanaged.init(arena.allocator(), \"pattern\", 0);","class":"linePartCov","hits":"1","order":"2113","possible_hits":"2",},
{"lineNum":" 4156","line":"            var it = re.getResultsIterator(\"something\");","class":"lineCov","hits":"1","order":"2114","possible_hits":"1",},
{"lineNum":" 4157","line":"            _ = &it;"},
{"lineNum":" 4158","line":"            try testing.expectEqual(it.nextResult(), null);","class":"linePartCov","hits":"1","order":"2115","possible_hits":"2",},
{"lineNum":" 4159","line":"        }"},
{"lineNum":" 4160","line":"        {"},
{"lineNum":" 4161","line":"            var re = try RegexUnmanaged.init(arena.allocator(), \"pattern\", 0);","class":"linePartCov","hits":"1","order":"2117","possible_hits":"2",},
{"lineNum":" 4162","line":"            _ = &re;"},
{"lineNum":" 4163","line":"            pcre.fetch_match_results(re.context_); // no panic means passed","class":"lineCov","hits":"1","order":"2118","possible_hits":"1",},
{"lineNum":" 4164","line":"            const str = \"hello\";","class":"lineCov","hits":"1","order":"2120","possible_hits":"1",},
{"lineNum":" 4165","line":"            pcre.get_next_offset(re.context_, str[0..].ptr, str.len);","class":"lineCov","hits":"1","order":"2121","possible_hits":"1",},
{"lineNum":" 4166","line":"        }"},
{"lineNum":" 4167","line":"        {"},
{"lineNum":" 4168","line":"            var context_ = try arena.allocator().create(pcre.RegexContext);","class":"linePartCov","hits":"1","order":"2123","possible_hits":"2",},
{"lineNum":" 4169","line":"            context_.re = std.mem.zeroes(?*anyopaque);","class":"lineCov","hits":"1","order":"2124","possible_hits":"1",},
{"lineNum":" 4170","line":"            var re = RegexUnmanaged{ .context_ = context_ };","class":"lineCov","hits":"1","order":"2125","possible_hits":"1",},
{"lineNum":" 4171","line":"            _ = &re;"},
{"lineNum":" 4172","line":"            const str = \"hello\";","class":"lineCov","hits":"1","order":"2126","possible_hits":"1",},
{"lineNum":" 4173","line":"            _ = pcre.match(re.context_, str[0..].ptr, str.len, 0); // no panic means passed","class":"lineCov","hits":"1","order":"2127","possible_hits":"1",},
{"lineNum":" 4174","line":"        }"},
{"lineNum":" 4175","line":"    }"},
{"lineNum":" 4176","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "pcre_test", "date" : "2024-02-02 22:09:19", "instrumented" : 1953, "covered" : 1953,};
var merged_data = [];
